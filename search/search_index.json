{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rodash is a collection of functions designed to aid everyday game programming in Roblox. It borrows ideas from lodash in JS, some simpler functionality of Penlight and standalone helper scripts in circulation among the Roblox community. Usage local _ = require ( game . ReplicatedStorage . Rodash ) function onlyLocalPlayerHasGold () local playersWithGold = _ . filter ( game . Players : GetChildren (), function ( player ) _ . debug ( Tools: {:#?} , player . Backpack ) return _ . some ( player . Backpack : GetChildren (), _ . fn : get ( OreType , Value ): endsWith ( Gold ) end ) end ) return _ . shallowEqual ( playersWithGold , { game . Players . LocalPlayer }) end Installation There are currently two ways to install Rodash: Method 1. Model File (Roblox Studio) Download the rbxm model from the Github releases page . Insert the module into Studio and place it in ReplicatedStorage Method 2. Filesystem Clone this repo using git clone git@github.com:CodeKingdomsTeam/rodash.git in a suitable directory Rename the src folder to Robase Use rojo to sync the files into a place Importing If you prefer not to reuse _ , you can also import the library under a different name, or a specific module: local _r = require(game.ReplicatedStorage.Rodash) local Tables = require(game.ReplicatedStorage.Rodash.Tables) Design Principles The Rodash design principles make it quick and easy to use the library to write concise operations, or incrementally simplify existing Roblox code. Functions: Avoid abstractions , working on native lua types to avoid enforcing specific coding styles Only do one thing by avoiding parameter overloading or flags Enforce type safety to avoid silent error propagation Prefer immutability to promote functional design and reduce race conditions Avoid duplication , mimicking existing functionality or aliasing other functions Maintain backwards compatibility with older versions of the library Discussion If you have any queries or feedback, please join the discussion on the Studio+ discord server!","title":"Home"},{"location":"#usage","text":"local _ = require ( game . ReplicatedStorage . Rodash ) function onlyLocalPlayerHasGold () local playersWithGold = _ . filter ( game . Players : GetChildren (), function ( player ) _ . debug ( Tools: {:#?} , player . Backpack ) return _ . some ( player . Backpack : GetChildren (), _ . fn : get ( OreType , Value ): endsWith ( Gold ) end ) end ) return _ . shallowEqual ( playersWithGold , { game . Players . LocalPlayer }) end","title":"Usage"},{"location":"#installation","text":"There are currently two ways to install Rodash:","title":"Installation"},{"location":"#method-1-model-file-roblox-studio","text":"Download the rbxm model from the Github releases page . Insert the module into Studio and place it in ReplicatedStorage","title":"Method 1. Model File (Roblox Studio)"},{"location":"#method-2-filesystem","text":"Clone this repo using git clone git@github.com:CodeKingdomsTeam/rodash.git in a suitable directory Rename the src folder to Robase Use rojo to sync the files into a place","title":"Method 2. Filesystem"},{"location":"#importing","text":"If you prefer not to reuse _ , you can also import the library under a different name, or a specific module: local _r = require(game.ReplicatedStorage.Rodash) local Tables = require(game.ReplicatedStorage.Rodash.Tables)","title":"Importing"},{"location":"#design-principles","text":"The Rodash design principles make it quick and easy to use the library to write concise operations, or incrementally simplify existing Roblox code. Functions: Avoid abstractions , working on native lua types to avoid enforcing specific coding styles Only do one thing by avoiding parameter overloading or flags Enforce type safety to avoid silent error propagation Prefer immutability to promote functional design and reduce race conditions Avoid duplication , mimicking existing functionality or aliasing other functions Maintain backwards compatibility with older versions of the library","title":"Design Principles"},{"location":"#discussion","text":"If you have any queries or feedback, please join the discussion on the Studio+ discord server!","title":"Discussion"},{"location":"api/Arrays/","text":"Arrays A collection of functions that operate specifically arrays, defined as tables with just keys 1..n . -- Examples of valid arrays: {} { red , green , blue } { winter , { is = coming }, [ 3 ] = again } { 1966 , nil , nil } -- Examples of invalid arrays: { 1994 , nil , 2002 } { you = { know , nothing }} {[ 5 ] = gold rings } 42 Because the operations are immutable it is unlikely that any additional elements in the table will be preserved in most operations. Functions can also iterate over custom iterator functions which provide elements with natural keys 1..n . Functions append function _ . append ( target , ) -- string Inserts into target the elements from all subsequent arguments in order. Parameters target - string undefined - string Returns string Examples _ . append ({}, { 1 , 2 , 3 }, { 4 , 5 , 6 }) -- {1, 2, 3, 4, 5, 6} _ . append ({ 1 , 2 , 3 }) -- {1, 2, 3} local list = { cheese } _ . append ( list , { nachos }, {}, { chillies }) list -- { cheese , nachos , chillies } first function _ . first ( source , handler ) -- string Returns the earliest value from the array that handler returns true for. If the handler is not specified, _.first simply returns the first element of the array. Parameters source - string handler - string - (default = _.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } _ . first ( names ) -- Boromir , 1 -- Find a particular value: local firstNameWithF = _ . first ( names , function ( name ) return _ . startsWith ( name , F ) end ) firstNameWithF -- Frodo , 2 -- What about a value whcih doesn t exist? local firstNameWithC = _ . first ( names , function ( name ) return _ . startsWith ( name , C ) end ) firstNameWithC -- nil -- Find the index of a value: local _ , index = _ . first ( names , _ . fn : matches ( Bilbo )) index -- 2 Usage If you need to find a value in a table which isn't an array, use _.find . See _.find last function _ . last ( source , handler ) -- string Returns the last value from the array that handler returns true for. If the handler is not specified, _.last simply returns the last element of the array. Parameters source - string handler - string - (default = _.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } _ . last ( names ) -- Bilbo , 3 local lastNameWithB = _ . last ( names , _ . fn : startsWith ( B )) lastNameWithB -- Bilbo , 3 local _ , key = _ . last ( names , _ . fn : matches ( Frodo )) key -- 2 See _.find _.first reduce function _ . reduce ( source , handler , initial ) -- string Runs the handler on each element of source in turn, passing the result of the previous call (or initial for the first element) as the first argument, and the current element as a value and key as subsequent arguments. Parameters source - string handler - string initial - string Returns string Examples local sum = _ . reduce ({ 1 , 2 , 3 }, function ( result , value ) return result + value end , 0 ) sum -- 6 local recipe = { first = cheese , second = nachos , third = chillies } local unzipRecipe = _ . reduce ( recipe , function ( result , value , key ) table.insert ( result [ 1 ], key ) table.insert ( result [ 2 ], value ) return result end , {{}, {}}) -- (in some order) unzipRecipe -- {{ first , third , second }, { cheese , chillies , nachos }} reverse function _ . reverse ( source ) -- string Swaps the order of elements in source . Parameters source - string Returns string Examples _ . reverse ({ 1 , 2 , 4 , 3 , 5 }) -- {5, 3, 4, 2, 1} shuffle function _ . shuffle ( source ) -- string Returns a new array with the order of the values from source randomized. Parameters source - string Returns string Examples local teamColors = { red , red , red , blue , blue , blue } -- (in some order) _ . shuffle ( teamColors ) -- { blue , blue , red , blue , red , red } slice function _ . slice ( source , first , last , step ) -- string Returns a copied portion of the source . Parameters source - string first - string - (default = 1) The index of the first element to include. last - string - (default = #source ) The index of the last element to include. step - string - (default = 1) What amount to step the index by during iteration. Returns string Examples _ . slice ({ 10 , 20 , 30 , 40 }) -- {10, 20, 30, 40} _ . slice ({ 10 , 20 , 30 , 40 }, 2 ) -- {20, 30, 40} _ . slice ({ 10 , 20 , 30 , 40 }, 2 , 3 ) -- {20, 30} _ . slice ({ 10 , 20 , 30 , 40 }, 2 , 4 , 2 ) -- {20, 40} sort function _ . sort ( input , comparator ) -- string Returns a sorted array from the input array, based on a comparator function. Unlike table.sort , the comparator to _.sort is optional, but it can also be defined to a numeric weight or nil as well as a boolean. Parameters input - string comparator - string - (optional) should return true or n 0 if the first element should be Returns string Examples _ . sort ({ 2 , 5 , 3 }) -- {2, 3, 5} _ . sort ({ use , the , force , Luke }) -- { Luke , force , the , use } sum function _ . sum ( source ) -- string Sums all the values in the source array. Parameters source - string Returns string Examples _ . sum ({ 1 , 2 , 3 }) -- 6 unique function _ . unique ( source ) -- string Parameters source - string Returns string","title":"Arrays"},{"location":"api/Arrays/#arrays","text":"A collection of functions that operate specifically arrays, defined as tables with just keys 1..n . -- Examples of valid arrays: {} { red , green , blue } { winter , { is = coming }, [ 3 ] = again } { 1966 , nil , nil } -- Examples of invalid arrays: { 1994 , nil , 2002 } { you = { know , nothing }} {[ 5 ] = gold rings } 42 Because the operations are immutable it is unlikely that any additional elements in the table will be preserved in most operations. Functions can also iterate over custom iterator functions which provide elements with natural keys 1..n .","title":"Arrays"},{"location":"api/Arrays/#functions","text":"","title":"Functions"},{"location":"api/Arrays/#append","text":"function _ . append ( target , ) -- string Inserts into target the elements from all subsequent arguments in order. Parameters target - string undefined - string Returns string Examples _ . append ({}, { 1 , 2 , 3 }, { 4 , 5 , 6 }) -- {1, 2, 3, 4, 5, 6} _ . append ({ 1 , 2 , 3 }) -- {1, 2, 3} local list = { cheese } _ . append ( list , { nachos }, {}, { chillies }) list -- { cheese , nachos , chillies }","title":"append"},{"location":"api/Arrays/#first","text":"function _ . first ( source , handler ) -- string Returns the earliest value from the array that handler returns true for. If the handler is not specified, _.first simply returns the first element of the array. Parameters source - string handler - string - (default = _.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } _ . first ( names ) -- Boromir , 1 -- Find a particular value: local firstNameWithF = _ . first ( names , function ( name ) return _ . startsWith ( name , F ) end ) firstNameWithF -- Frodo , 2 -- What about a value whcih doesn t exist? local firstNameWithC = _ . first ( names , function ( name ) return _ . startsWith ( name , C ) end ) firstNameWithC -- nil -- Find the index of a value: local _ , index = _ . first ( names , _ . fn : matches ( Bilbo )) index -- 2 Usage If you need to find a value in a table which isn't an array, use _.find . See _.find","title":"first"},{"location":"api/Arrays/#last","text":"function _ . last ( source , handler ) -- string Returns the last value from the array that handler returns true for. If the handler is not specified, _.last simply returns the last element of the array. Parameters source - string handler - string - (default = _.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } _ . last ( names ) -- Bilbo , 3 local lastNameWithB = _ . last ( names , _ . fn : startsWith ( B )) lastNameWithB -- Bilbo , 3 local _ , key = _ . last ( names , _ . fn : matches ( Frodo )) key -- 2 See _.find _.first","title":"last"},{"location":"api/Arrays/#reduce","text":"function _ . reduce ( source , handler , initial ) -- string Runs the handler on each element of source in turn, passing the result of the previous call (or initial for the first element) as the first argument, and the current element as a value and key as subsequent arguments. Parameters source - string handler - string initial - string Returns string Examples local sum = _ . reduce ({ 1 , 2 , 3 }, function ( result , value ) return result + value end , 0 ) sum -- 6 local recipe = { first = cheese , second = nachos , third = chillies } local unzipRecipe = _ . reduce ( recipe , function ( result , value , key ) table.insert ( result [ 1 ], key ) table.insert ( result [ 2 ], value ) return result end , {{}, {}}) -- (in some order) unzipRecipe -- {{ first , third , second }, { cheese , chillies , nachos }}","title":"reduce"},{"location":"api/Arrays/#reverse","text":"function _ . reverse ( source ) -- string Swaps the order of elements in source . Parameters source - string Returns string Examples _ . reverse ({ 1 , 2 , 4 , 3 , 5 }) -- {5, 3, 4, 2, 1}","title":"reverse"},{"location":"api/Arrays/#shuffle","text":"function _ . shuffle ( source ) -- string Returns a new array with the order of the values from source randomized. Parameters source - string Returns string Examples local teamColors = { red , red , red , blue , blue , blue } -- (in some order) _ . shuffle ( teamColors ) -- { blue , blue , red , blue , red , red }","title":"shuffle"},{"location":"api/Arrays/#slice","text":"function _ . slice ( source , first , last , step ) -- string Returns a copied portion of the source . Parameters source - string first - string - (default = 1) The index of the first element to include. last - string - (default = #source ) The index of the last element to include. step - string - (default = 1) What amount to step the index by during iteration. Returns string Examples _ . slice ({ 10 , 20 , 30 , 40 }) -- {10, 20, 30, 40} _ . slice ({ 10 , 20 , 30 , 40 }, 2 ) -- {20, 30, 40} _ . slice ({ 10 , 20 , 30 , 40 }, 2 , 3 ) -- {20, 30} _ . slice ({ 10 , 20 , 30 , 40 }, 2 , 4 , 2 ) -- {20, 40}","title":"slice"},{"location":"api/Arrays/#sort","text":"function _ . sort ( input , comparator ) -- string Returns a sorted array from the input array, based on a comparator function. Unlike table.sort , the comparator to _.sort is optional, but it can also be defined to a numeric weight or nil as well as a boolean. Parameters input - string comparator - string - (optional) should return true or n 0 if the first element should be Returns string Examples _ . sort ({ 2 , 5 , 3 }) -- {2, 3, 5} _ . sort ({ use , the , force , Luke }) -- { Luke , force , the , use }","title":"sort"},{"location":"api/Arrays/#sum","text":"function _ . sum ( source ) -- string Sums all the values in the source array. Parameters source - string Returns string Examples _ . sum ({ 1 , 2 , 3 }) -- 6","title":"sum"},{"location":"api/Arrays/#unique","text":"function _ . unique ( source ) -- string Parameters source - string Returns string","title":"unique"},{"location":"api/Async/","text":"Async Building upon the functionality of Roblox Lua Promise and borrowing ideas from Bluebird , these functions improve the experience of working with asynchronous code in Roblox. Functions async function _ . async ( fn ) -- string Wraps a function which may yield in a promise. When run, async calls the the function in a coroutine and resolves with the output of the function after any asynchronous actions, and rejects if the function throws an error. Parameters fn - string Returns string Rejects passthrough Examples local fetch = _ . async ( function ( url ) local HttpService = game : GetService ( HttpService ) return HttpService : GetAsync ( url ) end ) _ . parallelAll ({ main = fetch ( http://example.com/burger ), side = fetch ( http://example.com/fries ) }): andThen ( function ( meal ) print ( Meal , _ . pretty ( meal )) end ) -- Meal {burger = Cheeseburger , fries = Curly fries } (ideal response) Usage With promise:await the _.async function can be used just like the async-await pattern in languages like JS. asyncAll function _ . asyncAll ( dictionary ) -- string Wraps any functions in dictionary with _.async , returning a new dictionary containing functions that return promises when called rather than yielding. Parameters dictionary - string Returns string Examples local buyDinner = _ . async ( function () local http = _ . asyncAll ( game : GetService ( HttpService )) local order = _ . parallelAll ({ main = http : GetAsync ( http://example.com/burger ), side = http : GetAsync ( http://example.com/fries ) }) return http : PostAsync ( http://example.com/purchase , order : await ()) end ) buyDinner (): await () -- Purchased! (some time later) await function _ . await ( value ) -- string Yields completion of a promise promise:await() , but returns immediately with the value if it isn't a promise. Parameters value - string Returns string Examples local heat = function ( item ) return _ . delay ( 1 ). returns ( hot .. item ) end local recipe = { wrap , heat ( steak ), heat ( rice )} local burrito = _ . map ( recipe , _ . await ) _ . debug ( {:#?} , burrito ) -- { wrap , hot steak , hot rice } (2 seconds) delay function _ . delay ( delayInSeconds ) -- string Returns a promise which resolves after the given delayInSeconds. Parameters delayInSeconds - string Returns string Examples _ . delay ( 1 ): andThen ( function () print ( Delivered ) end ) -- Delivered (1 second later) finally function _ . finally ( promise , fn ) -- string Returns a promise which completes after the promise input has completed, regardless of whether it has resolved or rejected. Parameters promise - string fn - string - function(ok, result) Returns string Examples local getHunger = _ . async ( function ( player ) if player . health == 0 then error ( Player is dead! ) else return game . ReplicatedStorage . GetHunger : InvokeServer ( player ) end end ) local localPlayer = game . Players . LocalPlayer local isHungry = getHunger ( localPlayer ): finally ( function ( isAlive , result ) return isAlive and result 5 end ) isPromise function _ . isPromise ( value ) -- string Wraps Promise.is but catches any errors thrown in attempting to ascertain if value is a promise, which will occur if the value throws when trying to access missing keys. Parameters value - string Returns string never function _ . never () -- string Returns a promise which never resolves or rejects. Returns string Usage Useful in combination with _.race where a resolution or rejection should be ignored. parallel function _ . parallel ( array ) -- string Given an array of values, this function returns a promise which resolves once all of the array elements have resolved, or rejects if any of the array elements reject. Parameters array - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local meal = _ . parallel ({ heat ( cheese ), tomato }) meal : await () -- { hot-cheese , tomato } (1 second later) Usage This function is like Promise.all but allows objects in the array which aren't promises. These are considered resolved immediately. Promises that return nil values will cause the return array to be sparse. parallelAll function _ . parallelAll ( dictionary ) -- string Given a dictionary of values, this function returns a promise which resolves once all of the values in the dictionary have resolved, or rejects if any of them are promises that reject. Parameters dictionary - string Returns string - a dictionary mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local toastie = _ . parallelAll ({ bread = brown , filling = heat ( cheese ) }) toastie : await () -- {bread = brown , filling = hot-cheese } (1 second later) Usage Values which are not promises are considered resolved immediately. race function _ . race ( array , n ) -- string Returns a promise which completes after the first promise in the array input completes, or first n promises if specified. If any promise rejects, race rejects with the first rejection. Parameters array - string n - string - the number of promises required (default = 1) Returns string - an array containing the first n resolutions, in the order that they resolved. Throws OutOfBoundsError - if the number of required promises is greater than the input length. Rejects passthrough Usage Promises which return nil values are ignored due to the in-order constraint. The size of array must be equal to or larger than n . resolve function _ . resolve () -- string Like Promise.resolve but can take any number of arguments. Parameters undefined - string Returns string Examples local function mash ( veg ) return _ . resolve ( mashed , veg ) end mash ( potato ): andThen ( function ( style , veg ) _ . debug ( {} was {} , veg , style ) end ) -- potato was mashed Usage As _.resolve(promise) -- promise , this function can also be used to ensure a value is a promise. retryWithBackoff function _ . retryWithBackoff ( getPromise , backoffOptions ) -- string Try running a function which returns a promise and retry if the function throws and error or the promise rejects. The retry behaviour can be adapted using backoffOptions, which can customize the maximum number of retries and the backoff timing of the form [0, x^attemptNumber] + y where x is an exponent that produces a random exponential delay and y is a constant delay. Backoff Options Option Type Description maxTries int how many tries (including the first one) the function should be called retryExponentInSeconds number customize the backoff exponent retryConstantInSeconds number customize the backoff constant randomStream Random use a Roblox \"Random\" instance to control the backoff shouldRetry(response) T - bool called if maxTries 1 to determine whether a retry should occur onRetry(waitTime, errorMessage) (number, string) - nil a hook for when a retry is triggered, with the delay before retry and error message which caused the failure onDone(response, durationInSeconds) (T, number) - nil a hook for when the promise resolves onFail(errorMessage) string - nil a hook for when the promise has failed and no more retries are allowed Parameters getPromise - string backoffOptions - string Returns string Rejects passthrough series function _ . series () -- string Like _.compose but takes functions that can return a promise. Returns a promise that resolves once all functions have resolved. Like compose, functions receive the resolution of the previous promise as argument(s). Parameters undefined - string Returns string Examples local function fry ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( fried .. item )) end local function cheesify ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( cheesy .. item )) end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ): await () -- cheesy fried nachos (after 2s) timeout function _ . timeout ( promise , deadlineInSeconds , timeoutMessage ) -- string Resolves to the result of promise if it resolves before the deadline, otherwise rejects with an error, which can be optionally customized. Parameters promise - string deadlineInSeconds - string timeoutMessage - string - (default = \"TimeoutError\") Returns string Rejects TimeoutError - or timeoutMessage Examples let eatGreens = function () return _ . never end _ . timeout ( eatGreens (), 10 , TasteError ): await () -- throws TasteError (after 10s)","title":"Async"},{"location":"api/Async/#async","text":"Building upon the functionality of Roblox Lua Promise and borrowing ideas from Bluebird , these functions improve the experience of working with asynchronous code in Roblox.","title":"Async"},{"location":"api/Async/#functions","text":"","title":"Functions"},{"location":"api/Async/#async_1","text":"function _ . async ( fn ) -- string Wraps a function which may yield in a promise. When run, async calls the the function in a coroutine and resolves with the output of the function after any asynchronous actions, and rejects if the function throws an error. Parameters fn - string Returns string Rejects passthrough Examples local fetch = _ . async ( function ( url ) local HttpService = game : GetService ( HttpService ) return HttpService : GetAsync ( url ) end ) _ . parallelAll ({ main = fetch ( http://example.com/burger ), side = fetch ( http://example.com/fries ) }): andThen ( function ( meal ) print ( Meal , _ . pretty ( meal )) end ) -- Meal {burger = Cheeseburger , fries = Curly fries } (ideal response) Usage With promise:await the _.async function can be used just like the async-await pattern in languages like JS.","title":"async"},{"location":"api/Async/#asyncall","text":"function _ . asyncAll ( dictionary ) -- string Wraps any functions in dictionary with _.async , returning a new dictionary containing functions that return promises when called rather than yielding. Parameters dictionary - string Returns string Examples local buyDinner = _ . async ( function () local http = _ . asyncAll ( game : GetService ( HttpService )) local order = _ . parallelAll ({ main = http : GetAsync ( http://example.com/burger ), side = http : GetAsync ( http://example.com/fries ) }) return http : PostAsync ( http://example.com/purchase , order : await ()) end ) buyDinner (): await () -- Purchased! (some time later)","title":"asyncAll"},{"location":"api/Async/#await","text":"function _ . await ( value ) -- string Yields completion of a promise promise:await() , but returns immediately with the value if it isn't a promise. Parameters value - string Returns string Examples local heat = function ( item ) return _ . delay ( 1 ). returns ( hot .. item ) end local recipe = { wrap , heat ( steak ), heat ( rice )} local burrito = _ . map ( recipe , _ . await ) _ . debug ( {:#?} , burrito ) -- { wrap , hot steak , hot rice } (2 seconds)","title":"await"},{"location":"api/Async/#delay","text":"function _ . delay ( delayInSeconds ) -- string Returns a promise which resolves after the given delayInSeconds. Parameters delayInSeconds - string Returns string Examples _ . delay ( 1 ): andThen ( function () print ( Delivered ) end ) -- Delivered (1 second later)","title":"delay"},{"location":"api/Async/#finally","text":"function _ . finally ( promise , fn ) -- string Returns a promise which completes after the promise input has completed, regardless of whether it has resolved or rejected. Parameters promise - string fn - string - function(ok, result) Returns string Examples local getHunger = _ . async ( function ( player ) if player . health == 0 then error ( Player is dead! ) else return game . ReplicatedStorage . GetHunger : InvokeServer ( player ) end end ) local localPlayer = game . Players . LocalPlayer local isHungry = getHunger ( localPlayer ): finally ( function ( isAlive , result ) return isAlive and result 5 end )","title":"finally"},{"location":"api/Async/#ispromise","text":"function _ . isPromise ( value ) -- string Wraps Promise.is but catches any errors thrown in attempting to ascertain if value is a promise, which will occur if the value throws when trying to access missing keys. Parameters value - string Returns string","title":"isPromise"},{"location":"api/Async/#never","text":"function _ . never () -- string Returns a promise which never resolves or rejects. Returns string Usage Useful in combination with _.race where a resolution or rejection should be ignored.","title":"never"},{"location":"api/Async/#parallel","text":"function _ . parallel ( array ) -- string Given an array of values, this function returns a promise which resolves once all of the array elements have resolved, or rejects if any of the array elements reject. Parameters array - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local meal = _ . parallel ({ heat ( cheese ), tomato }) meal : await () -- { hot-cheese , tomato } (1 second later) Usage This function is like Promise.all but allows objects in the array which aren't promises. These are considered resolved immediately. Promises that return nil values will cause the return array to be sparse.","title":"parallel"},{"location":"api/Async/#parallelall","text":"function _ . parallelAll ( dictionary ) -- string Given a dictionary of values, this function returns a promise which resolves once all of the values in the dictionary have resolved, or rejects if any of them are promises that reject. Parameters dictionary - string Returns string - a dictionary mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local toastie = _ . parallelAll ({ bread = brown , filling = heat ( cheese ) }) toastie : await () -- {bread = brown , filling = hot-cheese } (1 second later) Usage Values which are not promises are considered resolved immediately.","title":"parallelAll"},{"location":"api/Async/#race","text":"function _ . race ( array , n ) -- string Returns a promise which completes after the first promise in the array input completes, or first n promises if specified. If any promise rejects, race rejects with the first rejection. Parameters array - string n - string - the number of promises required (default = 1) Returns string - an array containing the first n resolutions, in the order that they resolved. Throws OutOfBoundsError - if the number of required promises is greater than the input length. Rejects passthrough Usage Promises which return nil values are ignored due to the in-order constraint. The size of array must be equal to or larger than n .","title":"race"},{"location":"api/Async/#resolve","text":"function _ . resolve () -- string Like Promise.resolve but can take any number of arguments. Parameters undefined - string Returns string Examples local function mash ( veg ) return _ . resolve ( mashed , veg ) end mash ( potato ): andThen ( function ( style , veg ) _ . debug ( {} was {} , veg , style ) end ) -- potato was mashed Usage As _.resolve(promise) -- promise , this function can also be used to ensure a value is a promise.","title":"resolve"},{"location":"api/Async/#retrywithbackoff","text":"function _ . retryWithBackoff ( getPromise , backoffOptions ) -- string Try running a function which returns a promise and retry if the function throws and error or the promise rejects. The retry behaviour can be adapted using backoffOptions, which can customize the maximum number of retries and the backoff timing of the form [0, x^attemptNumber] + y where x is an exponent that produces a random exponential delay and y is a constant delay.","title":"retryWithBackoff"},{"location":"api/Async/#backoff-options","text":"Option Type Description maxTries int how many tries (including the first one) the function should be called retryExponentInSeconds number customize the backoff exponent retryConstantInSeconds number customize the backoff constant randomStream Random use a Roblox \"Random\" instance to control the backoff shouldRetry(response) T - bool called if maxTries 1 to determine whether a retry should occur onRetry(waitTime, errorMessage) (number, string) - nil a hook for when a retry is triggered, with the delay before retry and error message which caused the failure onDone(response, durationInSeconds) (T, number) - nil a hook for when the promise resolves onFail(errorMessage) string - nil a hook for when the promise has failed and no more retries are allowed Parameters getPromise - string backoffOptions - string Returns string Rejects passthrough","title":"Backoff Options"},{"location":"api/Async/#series","text":"function _ . series () -- string Like _.compose but takes functions that can return a promise. Returns a promise that resolves once all functions have resolved. Like compose, functions receive the resolution of the previous promise as argument(s). Parameters undefined - string Returns string Examples local function fry ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( fried .. item )) end local function cheesify ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( cheesy .. item )) end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ): await () -- cheesy fried nachos (after 2s)","title":"series"},{"location":"api/Async/#timeout","text":"function _ . timeout ( promise , deadlineInSeconds , timeoutMessage ) -- string Resolves to the result of promise if it resolves before the deadline, otherwise rejects with an error, which can be optionally customized. Parameters promise - string deadlineInSeconds - string timeoutMessage - string - (default = \"TimeoutError\") Returns string Rejects TimeoutError - or timeoutMessage Examples let eatGreens = function () return _ . never end _ . timeout ( eatGreens (), 10 , TasteError ): await () -- throws TasteError (after 10s)","title":"timeout"},{"location":"api/Classes/","text":"Classes These tools provide implementations of and functions for higher-order abstractions such as classes, enumerations and symbols. Functions _init function _ . _init () -- string Run after the instance has been properly initialized, allowing methods on the instance to be used. Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . _id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return _ . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Return the id if the instance is represented as a string function Vehicle : toString () return self . _id end local car = Vehicle . new ( 4 ) tostring ( car ) -- #1: 4 wheels class function _ . class ( name , constructor , decorators ) -- string Create a class called name with the specified constructor . The constructor should return a plain table which will be turned into an instance of Class from a call to Class.new(...) . Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional methods and functionality you may need. Specifically you can: Add standard functionality to the class e.g. _.Clone , _.ShallowEq , _.PrettyFormat Mixin an implementation of an interface e.g. _.mixin( fns ) Decorate fields or functions e.g. _.decorate(_.freeze) , _.decorate(_.bindAll) Parameters name - string constructor - string - (default = _.returns({}) ) decorators - string - (default = {} ) Returns string Examples -- Create a simple Vehicle class local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) function Vehicle : drive ( speed ) self . speed = speed end -- Create a car instance local car = Vehicle . new ( 4 ) car . wheelCount -- 4 car . speed -- 0 -- Drive the car car : drive ( 10 ) car . speed -- 10 Usage When using Rodash classes, private fields should be prefixed with _ to avoid accidental access. A private field should only be accessed by a method of the class itself, though Rodash does not restrict this in code. Public fields are recommended when there is no complex access logic e.g. position.x See _.classWithInterface - recommended for providing runtime type-checking. _.mixin - extend the class with extra methods. _.decorate - include methods that run when an instance of the class is constructed. classWithInterface function _ . classWithInterface ( name , interface , decorators ) -- string Create a class called name that implements a specific strict interface which is asserted when any instance is created. Instead of using a constructor, an instance is initialized with a table containing the required fields. If an _init method is present on the instance, this is called afterwards, which has the added benefit over a constructor that self and the instance are well-defined. Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional functionality in the same way _.class does. Parameters name - string interface - string decorators - string Returns string Usage Rodash uses t by Osyris to perform runtime type assertions, which we recommend using during development and production code to catch errors quickly and fail fast. For more information about t , please visit https://github.com/osyrisrblx/t . If you want to instantiate private fields, we recommend using a static factory with a public interface, using _.privatize if appropriate. See _.class _.privatize enum function _ . enum ( keys ) -- string Create an enumeration from an array string keys , provided in upper snake-case. An Enum is used when a value should only be one of a limited number of possible states. _.makeEnum creates a string enum, which uses a name for each state so it is easy to refer to. For ease of use values in the enum are identical to their key. Enums are frozen and will throw if access to a missing key is attempted, helping to eliminate typos. Symbols are not used so that enum values are serializable. Parameters keys - string - provided in upper snake-case. Returns string extend function _ . extend ( name , constructor , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . The super-constructor can be accessed with Class.constructor . Super methods can be accessed using Class.methodName and should be called with self. Parameters name - string constructor - string - undefined decorators - string Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return _ . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Let s make a Car class which has a special way to generate ids local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) -- Uses the super method to generate a car-specific id function Car : _generateId () self . id = _ . format ( Car {} , Vehicle . _generateId ( self )) end local car = Car . new () car . id -- Car #1: 4 wheels extendWithInterface function _ . extendWithInterface ( name , interface , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . Parameters name - string interface - string decorators - string Returns string Examples local Vehicle = _ . classWithInterface ( Vehicle , { speed = t . number , wheelCount = t . number , color : t . string }) local vehicle = Vehicle . new ({ speed = 5 , wheelCount = 4 , color = red }) _ . pretty ( vehicle ) -- Vehicle {speed = 4, wheelCount = 4, color = red } Usage Interfaces currently silently override super interfaces, even if their types are incompatible. Avoid doing this as more advanced type checking may throw if the types do not unify in the future. freeze function _ . freeze ( object ) -- string Mutates object , making attempts to update or accessing missing keys throw ReadonlyKey and MissingKey respectively. Parameters object - string Returns string isA function _ . isA ( value , Type ) -- string Returns true if value is an instance of type . Type can currently be either an Enum or a Class table. For instances of classes, _.isA will also return true if the instance is an instance of any sub-class. The function will catch any errors thrown during this check, returning false if so. Parameters value - string Type - string Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local car = Vehicle . new ( 4 ) Vehicle . isA ( car ) -- true Vehicle . isA ( 5 ) -- false local toggle = _ . enum ( ON , OFF ) toggle . isA ( ON ) -- true toggle . isA ( 5 ) -- false Usage This is useful if you no nothing about value . isInstance function _ . isInstance ( value ) -- string Returns true if value is an instance of Class or any sub-class. Parameters value - string Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) local car = Car . new () car . isInstance ( Car ) -- true car . isInstance ( Vehicle ) -- true car . isInstance ( Bike ) -- false match function _ . match ( enum , strategies ) -- string Given an enum and strategies , a dictionary of functions keyed by enum values, _.match returns a function that will execute the strategy for any value provided. A strategy for every enum key must be implemented, and this helps prevent missing values from causing problems later on down the line. If the enum is a symbol enum, the value tuple will be unpacked as arguments to the strategy. Parameters enum - string strategies - string Returns string new function _ . new () -- string Return a new instance of the class, passing any arguments to the specified constructor. Parameters undefined - string Returns string symbol function _ . symbol ( name ) -- string Create a symbol with a specified name . Symbols are useful when you want a value that isn't equal to any other type, for example if you want to store a unique property on an object that won't be accidentally accessed with a simple string lookup. Parameters name - string Returns string toString function _ . toString () -- string Return a string representation of the instance. By default this is the name field (or the Class name if this is not defined), but the method can be overwritten. Returns string","title":"Classes"},{"location":"api/Classes/#classes","text":"These tools provide implementations of and functions for higher-order abstractions such as classes, enumerations and symbols.","title":"Classes"},{"location":"api/Classes/#functions","text":"","title":"Functions"},{"location":"api/Classes/#_init","text":"function _ . _init () -- string Run after the instance has been properly initialized, allowing methods on the instance to be used. Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . _id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return _ . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Return the id if the instance is represented as a string function Vehicle : toString () return self . _id end local car = Vehicle . new ( 4 ) tostring ( car ) -- #1: 4 wheels","title":"_init"},{"location":"api/Classes/#class","text":"function _ . class ( name , constructor , decorators ) -- string Create a class called name with the specified constructor . The constructor should return a plain table which will be turned into an instance of Class from a call to Class.new(...) . Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional methods and functionality you may need. Specifically you can: Add standard functionality to the class e.g. _.Clone , _.ShallowEq , _.PrettyFormat Mixin an implementation of an interface e.g. _.mixin( fns ) Decorate fields or functions e.g. _.decorate(_.freeze) , _.decorate(_.bindAll) Parameters name - string constructor - string - (default = _.returns({}) ) decorators - string - (default = {} ) Returns string Examples -- Create a simple Vehicle class local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) function Vehicle : drive ( speed ) self . speed = speed end -- Create a car instance local car = Vehicle . new ( 4 ) car . wheelCount -- 4 car . speed -- 0 -- Drive the car car : drive ( 10 ) car . speed -- 10 Usage When using Rodash classes, private fields should be prefixed with _ to avoid accidental access. A private field should only be accessed by a method of the class itself, though Rodash does not restrict this in code. Public fields are recommended when there is no complex access logic e.g. position.x See _.classWithInterface - recommended for providing runtime type-checking. _.mixin - extend the class with extra methods. _.decorate - include methods that run when an instance of the class is constructed.","title":"class"},{"location":"api/Classes/#classwithinterface","text":"function _ . classWithInterface ( name , interface , decorators ) -- string Create a class called name that implements a specific strict interface which is asserted when any instance is created. Instead of using a constructor, an instance is initialized with a table containing the required fields. If an _init method is present on the instance, this is called afterwards, which has the added benefit over a constructor that self and the instance are well-defined. Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional functionality in the same way _.class does. Parameters name - string interface - string decorators - string Returns string Usage Rodash uses t by Osyris to perform runtime type assertions, which we recommend using during development and production code to catch errors quickly and fail fast. For more information about t , please visit https://github.com/osyrisrblx/t . If you want to instantiate private fields, we recommend using a static factory with a public interface, using _.privatize if appropriate. See _.class _.privatize","title":"classWithInterface"},{"location":"api/Classes/#enum","text":"function _ . enum ( keys ) -- string Create an enumeration from an array string keys , provided in upper snake-case. An Enum is used when a value should only be one of a limited number of possible states. _.makeEnum creates a string enum, which uses a name for each state so it is easy to refer to. For ease of use values in the enum are identical to their key. Enums are frozen and will throw if access to a missing key is attempted, helping to eliminate typos. Symbols are not used so that enum values are serializable. Parameters keys - string - provided in upper snake-case. Returns string","title":"enum"},{"location":"api/Classes/#extend","text":"function _ . extend ( name , constructor , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . The super-constructor can be accessed with Class.constructor . Super methods can be accessed using Class.methodName and should be called with self. Parameters name - string constructor - string - undefined decorators - string Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return _ . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Let s make a Car class which has a special way to generate ids local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) -- Uses the super method to generate a car-specific id function Car : _generateId () self . id = _ . format ( Car {} , Vehicle . _generateId ( self )) end local car = Car . new () car . id -- Car #1: 4 wheels","title":"extend"},{"location":"api/Classes/#extendwithinterface","text":"function _ . extendWithInterface ( name , interface , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . Parameters name - string interface - string decorators - string Returns string Examples local Vehicle = _ . classWithInterface ( Vehicle , { speed = t . number , wheelCount = t . number , color : t . string }) local vehicle = Vehicle . new ({ speed = 5 , wheelCount = 4 , color = red }) _ . pretty ( vehicle ) -- Vehicle {speed = 4, wheelCount = 4, color = red } Usage Interfaces currently silently override super interfaces, even if their types are incompatible. Avoid doing this as more advanced type checking may throw if the types do not unify in the future.","title":"extendWithInterface"},{"location":"api/Classes/#freeze","text":"function _ . freeze ( object ) -- string Mutates object , making attempts to update or accessing missing keys throw ReadonlyKey and MissingKey respectively. Parameters object - string Returns string","title":"freeze"},{"location":"api/Classes/#isa","text":"function _ . isA ( value , Type ) -- string Returns true if value is an instance of type . Type can currently be either an Enum or a Class table. For instances of classes, _.isA will also return true if the instance is an instance of any sub-class. The function will catch any errors thrown during this check, returning false if so. Parameters value - string Type - string Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local car = Vehicle . new ( 4 ) Vehicle . isA ( car ) -- true Vehicle . isA ( 5 ) -- false local toggle = _ . enum ( ON , OFF ) toggle . isA ( ON ) -- true toggle . isA ( 5 ) -- false Usage This is useful if you no nothing about value .","title":"isA"},{"location":"api/Classes/#isinstance","text":"function _ . isInstance ( value ) -- string Returns true if value is an instance of Class or any sub-class. Parameters value - string Returns string Examples local Vehicle = _ . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) local car = Car . new () car . isInstance ( Car ) -- true car . isInstance ( Vehicle ) -- true car . isInstance ( Bike ) -- false","title":"isInstance"},{"location":"api/Classes/#match","text":"function _ . match ( enum , strategies ) -- string Given an enum and strategies , a dictionary of functions keyed by enum values, _.match returns a function that will execute the strategy for any value provided. A strategy for every enum key must be implemented, and this helps prevent missing values from causing problems later on down the line. If the enum is a symbol enum, the value tuple will be unpacked as arguments to the strategy. Parameters enum - string strategies - string Returns string","title":"match"},{"location":"api/Classes/#new","text":"function _ . new () -- string Return a new instance of the class, passing any arguments to the specified constructor. Parameters undefined - string Returns string","title":"new"},{"location":"api/Classes/#symbol","text":"function _ . symbol ( name ) -- string Create a symbol with a specified name . Symbols are useful when you want a value that isn't equal to any other type, for example if you want to store a unique property on an object that won't be accidentally accessed with a simple string lookup. Parameters name - string Returns string","title":"symbol"},{"location":"api/Classes/#tostring","text":"function _ . toString () -- string Return a string representation of the instance. By default this is the name field (or the Class name if this is not defined), but the method can be overwritten. Returns string","title":"toString"},{"location":"api/Functions/","text":"Functions Utility functions and building blocks for functional programming styles. In general, there is more tooling for functions with multiple arguments and return values than unary ones, as this is more lua-flavoured, the curried style feeling more useful in pure languages which provide better support and/or syntactic sugar. Functions bind function _ . bind ( fn , ) -- string Takes a function fn and binds arguments to the head of the fn argument list. Returns a function which executes fn , passing the bound arguments supplied, followed by any dynamic arguments. Parameters fn - string undefined - string Returns string Examples local function damagePlayer ( player , amount ) player : Damage ( amount ) end local damageLocalPlayer = _ . bind ( damagePlayer , game . Players . LocalPlayer ) damageLocalPlayer ( 5 ) bindTail function _ . bindTail ( fn , ) -- string Takes a chainable function fn and binds arguments to the tail of the fn argument list. Returns a function which executes fn , passing a subject ahead of the bound arguments supplied. Parameters fn - string undefined - string Returns string Examples local filterHurtPlayers = _ . bindTail ( _ . filter , function ( player ) return player . Health player . MaxHealth end ) local getName = _ . bindTail ( _ . map , function ( player ) return player . Name end ) local filterHurtNames = _ . compose ( filterHurtPlayers , getName ) filterHurtNames ( game . Players ) -- { Frodo , Boromir } Usage Chainable rodash function feeds are mapped to _.fn , such as _.fn.map(handler) . Chainable call function _ . call ( subject , fn , ) -- string Calls the supplied fn on the subject and any additional arguments, returing the result. Parameters subject - string fn - string undefined - string Returns string Chainable chain function _ . chain ( fns , actor ) -- string Chain takes a dictionary of chainable functions and returns a Chain instance with methods mapped to the input functions. Chaining is useful when you want to simplify operating on data in a common form and perform sequences of operations on some data with a very concise syntax. An actor function can check the value of the data at each step and change how the chain proceeds. Calling a Chain with a subject reduces the chained operations in order on the subject. Parameters fns - string actor - string - called for each result in the chain to determine how the next operation should process it. (default = _.invoke ) Returns string Examples -- Define a simple chain that can operate a list of numbers. -- A chain function is called with the subject being processed as first argument, -- and any arguments passed in the chain as subsequent arguments. local numberChain = _ . chain ({ addN = function ( list , n ) return _ . map ( list , function ( element ) return element + n end ) end , sum = function ( list ) return _ . sum ( list ) end }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- Get the name of a player local function getName ( player ) return player . Name end ) -- Create a chain that filters for hurt players and finds their name local filterHurtNames = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ): map ( getName ) -- Run the chain on the current game players filterHurtNames ( game . Players ) -- { Frodo Baggins , Boromir } -- For fun, let s encapsulate the functionality above by -- defining a chain of operations on players... local players = _ . chain ({ filterHurtPlayers = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ), -- Filter players by getting their name and checking it ends with Baggins filterBaggins = _ . fn : filter ( _ . fn : call ( getName ): endsWith ( Baggins )) }) local hurtHobbits = players : filterHurtPlayers (): filterBaggins () hurtHobbits ( game . Players ) -- {{Name = Frodo Baggins , ...}} local names = _ . fn : map ( getName ) -- Chains are themselves chainable, so you can compose two chains together local filterHurtHobbitNames = _ . compose ( hurtHobbits , names ) filterHurtHobbitNames ( game . Players ) -- { Frodo Baggins } Usage The \"Rodash\" chain: _.chain(_) is aliased to _.fn , so instead of writing _.chain(_):filter you can simply write _.fn:filter , or any other chainable method. A chained function can be made using _.chain or built inductively using other chained methods of _.fn . A chainable method is one that has the subject which is passed through a chain as the first argument, and subsequent arguments See _.chainFn - Makes a function chainable if it returns a chain. _.invoke - the identity actor _.continue - an actor for chains of asynchronous functions _.maybe - an actor for chains of partial functions chainFn function _ . chainFn ( fn ) -- string Wraps a function, making it chainable if it returns a chain itself. This allows you to define custom functions in terms of the arguments they will take when called in a chain, and return a chained function which performs the operation, rather than explicitly taking the subject as first argument. Parameters fn - string Returns string Examples -- In the chain example addN was defined like so: local function addN ( list , n ) return _ . map ( list , function ( element ) return element + n end ) end numberChain = _ . chain ({ addN = addN }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- It is more natural to define addN as a function taking one argument, -- to match the way it is called in the chain: local function addN ( n ) -- Methods on _.fn are themselves chained, so list can be dropped. return _ . fn : map ( function ( element ) return element + n end ) end -- The _.chainFn is used to wrap any functions which return chains. numberChain = _ . chain ({ addN = _ . chainFn ( addN ) }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 See _.chain Chainable compose function _ . compose () -- string Returns a function that calls the argument functions in left-right order on an input, passing the return of the previous function as argument(s) to the next. Parameters undefined - string Returns string Examples local function fry ( item ) return fried .. item end local function cheesify ( item ) return cheesy .. item end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ) -- cheesy fried nachos Usage Useful for when you want to lazily compute something expensive that doesn't change. continue function _ . continue ( actor ) -- string An actor getter which awaits on any promises returned by chain methods, and continues execution when the promise completes. This allows any asynchronous methods to be used in chains without modifying any of the chain's synchronous methods, removing any boilerplate needed to handle promises in the main code body. Can wrap any other actor which handles values after any promise resolution. Parameters actor - string - (default = _.invoke ) The actor to wrap. Returns string Rejects passthrough Examples -- Let s define a function which returns an answer after a delay local getName = function ( player ) return _ . delay ( 1 ): andThen ( _ . returns ( player . Name )) end local players players = _ . chain ( { -- Any chainable function can be used filter = _ . filter , -- A chain which evaluates a promise of the player names mapNames = _ . fn : map ( getName ): parallel (), filterHurt = _ . fn : filter ( function ( player ) return player . Health 100 end ), mapNameIf = _ . chainFn ( function ( expectedName ) -- Methods on self work as expected return players : mapNames (): filter ( _ . fn : endsWith ( expectedName )) end ) }, _ . continue () ) local filterHurtHobbitNames = players : filterHurt (): mapNameIf ( Baggins ) local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Name = Boromir , Health = 0 } } filterHurtHobbitNames ( crew ): await () -- { Frodo Baggins } (some time later) See _.chain debounce function _ . debounce ( fn , delayInSeconds ) -- string Creates a debounced function that delays calling fn until after delayInSeconds seconds have elapsed since the last time the debounced function was attempted to be called. Parameters fn - string delayInSeconds - string Returns string - the debounced function with method :clear() can be called on to cancel any scheduled call. Usage A nice visualisation of debounce vs. throttle , the illustrated point being debounce will only call fn at the end of a spurt of events. Chainable id function _ . id () -- string A simple function that does nothing, but returns its input parameters. Parameters undefined - string Returns string Usage This is typically referred to as the \"identity\" function. invoke function _ . invoke ( fn , ) -- string An actor which calls the supplied fn with the argument tail. Parameters fn - string undefined - string Returns string Usage This is the default actor for _.chain and acts as an identity, meaning it has no effect on the result. isCallable function _ . isCallable ( value ) -- string Return true if the value can be called ie. it is function or a table with a __call entry in its metatable. Parameters value - string Returns string Usage In general this is a much more suitable test than checking purely for a function type. maybe function _ . maybe ( actor ) -- string An actor which cancels execution of a chain if a method returns nil, evaluating the chain as nil. Can wrap any other actor which handles values that are non-nil. Parameters actor - string Returns string Examples -- We can define a chain of Rodash functions that will skip after a nil is returned. local maybeFn = _ . chain ( _ , _ . maybe ()) local getName = function ( player ) return player . Name end local players players = _ . chain ( { -- Any chainable functions can be used call = _ . call , endsWith = _ . endsWith , filterHurt = _ . fn : filter ( function ( player ) return player . Health 100 end ), filterBaggins = _ . chainFn ( function () -- If getName returns nil here, endsWith will be skipped return _ . fn : filter ( maybeFn : call ( getName ): endsWith ( Baggins )) end ) } ) local hurtHobbits = players : filterHurt (): filterBaggins () local mapNames = _ . fn : map ( getName ) local filterHurtBagginsNames = _ . compose ( hurtHobbits , mapNames ) -- Here, one player record doesn t have a Name property, so it is skipped. local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Health = 0 } } memoize function _ . memoize ( fn , serializeArgs ) -- string Like _.once , but caches non-nil results of calls to fn keyed by some serialization of the input arguments to fn . By default, all the args are serialized simply using tostring . Optionally memoize takes function serializeArgs(args, cache) , a function that should return a string key which a result should be cached at for a given signature. Return nil to avoid caching the result. Parameters fn - string serializeArgs - string - (default = _.serialize ) Returns string - the function with method :clear(...) that resets the cache for the argument specified, or :clearAll() to clear the entire cache. Examples local menu = { soup , bread , butter } local heat = _ . memoize ( function ( index ) return hot ... menu [ index ] end ) heat ( 1 ) -- hot soup menu = { caviar } heat ( 1 ) -- hot soup heat ( 2 ) -- nil menu = { beef , potatoes } heat ( 1 ) -- hot soup heat ( 2 ) -- hot potatoes heat : clear ( 1 ) heat ( 1 ) -- hot beef See _.serialize _.serializeDeep if you want to recursively serialize arguments. noop function _ . noop () -- string A simple function that does nothing, and returns nil. Returns string Usage Shorthand for function() end . Chainable once function _ . once ( fn ) -- string Returns a function that when called, only calls fn the first time the function is called. For subsequent calls, the initial return of fn is returned, even if it is nil . Parameters fn - string Returns string - the function with method :clear() that resets the cached value. Throws passthrough - any error thrown when called will cause nil to cache and pass through the error. Examples local fry = _ . once ( function ( item ) return fried .. tiem end ) fry ( sardine ) -- fried sardine fry ( squid ) -- fried sardine fry : clear () fry ( squid ) -- fried squid fry ( owl ) -- fried squid Usage Useful for when you want to lazily compute something expensive that doesn't change. Chainable returns function _ . returns () -- string Returns a function that when called, returns the original input parameters. Parameters undefined - string Returns string Examples findPlayer ( builderman ): andThen ( _ . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones. setInterval function _ . setInterval ( fn , intervalInSeconds , delayInSeconds ) -- string Like _.setTimeout but calls fn after every interval of intervalInSeconds time has passed. Parameters fn - string intervalInSeconds - string delayInSeconds - string - (default = intervalInSeconds ) The delay before the initial call. Returns string - an instance which :clear() can be called on to prevent fn from firing. setTimeout function _ . setTimeout ( fn , delayInSeconds ) -- string Like delay , this calls fn after delayInSeconds time has passed, with the added benefit of being cancelable. Parameters fn - string delayInSeconds - string Returns string - an instance which :clear() can be called on to prevent fn from firing. throttle function _ . throttle ( fn , cooldownInSeconds ) -- string Creates a throttle function that drops any repeat calls within a cooldown period and instead returns the result of the last call. Parameters fn - string cooldownInSeconds - string Returns string Usage A nice visualisation of debounce vs. throttle , the illustrated point being throttle will call fn every period during a spurt of events. throws function _ . throws ( errorMessage ) -- string Returns a function that when called, throws the original message. Parameters errorMessage - string Returns string Examples findPlayer ( builderman ): andThen ( _ . throws ( DaveNotFound )) --! DaveNotFound (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones. unary function _ . unary ( fn ) -- string Returns a function that wraps the input fn but only passes the first argument to it. Parameters fn - string Returns string","title":"Functions"},{"location":"api/Functions/#functions","text":"Utility functions and building blocks for functional programming styles. In general, there is more tooling for functions with multiple arguments and return values than unary ones, as this is more lua-flavoured, the curried style feeling more useful in pure languages which provide better support and/or syntactic sugar.","title":"Functions"},{"location":"api/Functions/#functions_1","text":"","title":"Functions"},{"location":"api/Functions/#bind","text":"function _ . bind ( fn , ) -- string Takes a function fn and binds arguments to the head of the fn argument list. Returns a function which executes fn , passing the bound arguments supplied, followed by any dynamic arguments. Parameters fn - string undefined - string Returns string Examples local function damagePlayer ( player , amount ) player : Damage ( amount ) end local damageLocalPlayer = _ . bind ( damagePlayer , game . Players . LocalPlayer ) damageLocalPlayer ( 5 )","title":"bind"},{"location":"api/Functions/#bindtail","text":"function _ . bindTail ( fn , ) -- string Takes a chainable function fn and binds arguments to the tail of the fn argument list. Returns a function which executes fn , passing a subject ahead of the bound arguments supplied. Parameters fn - string undefined - string Returns string Examples local filterHurtPlayers = _ . bindTail ( _ . filter , function ( player ) return player . Health player . MaxHealth end ) local getName = _ . bindTail ( _ . map , function ( player ) return player . Name end ) local filterHurtNames = _ . compose ( filterHurtPlayers , getName ) filterHurtNames ( game . Players ) -- { Frodo , Boromir } Usage Chainable rodash function feeds are mapped to _.fn , such as _.fn.map(handler) . Chainable","title":"bindTail"},{"location":"api/Functions/#call","text":"function _ . call ( subject , fn , ) -- string Calls the supplied fn on the subject and any additional arguments, returing the result. Parameters subject - string fn - string undefined - string Returns string Chainable","title":"call"},{"location":"api/Functions/#chain","text":"function _ . chain ( fns , actor ) -- string Chain takes a dictionary of chainable functions and returns a Chain instance with methods mapped to the input functions. Chaining is useful when you want to simplify operating on data in a common form and perform sequences of operations on some data with a very concise syntax. An actor function can check the value of the data at each step and change how the chain proceeds. Calling a Chain with a subject reduces the chained operations in order on the subject. Parameters fns - string actor - string - called for each result in the chain to determine how the next operation should process it. (default = _.invoke ) Returns string Examples -- Define a simple chain that can operate a list of numbers. -- A chain function is called with the subject being processed as first argument, -- and any arguments passed in the chain as subsequent arguments. local numberChain = _ . chain ({ addN = function ( list , n ) return _ . map ( list , function ( element ) return element + n end ) end , sum = function ( list ) return _ . sum ( list ) end }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- Get the name of a player local function getName ( player ) return player . Name end ) -- Create a chain that filters for hurt players and finds their name local filterHurtNames = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ): map ( getName ) -- Run the chain on the current game players filterHurtNames ( game . Players ) -- { Frodo Baggins , Boromir } -- For fun, let s encapsulate the functionality above by -- defining a chain of operations on players... local players = _ . chain ({ filterHurtPlayers = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ), -- Filter players by getting their name and checking it ends with Baggins filterBaggins = _ . fn : filter ( _ . fn : call ( getName ): endsWith ( Baggins )) }) local hurtHobbits = players : filterHurtPlayers (): filterBaggins () hurtHobbits ( game . Players ) -- {{Name = Frodo Baggins , ...}} local names = _ . fn : map ( getName ) -- Chains are themselves chainable, so you can compose two chains together local filterHurtHobbitNames = _ . compose ( hurtHobbits , names ) filterHurtHobbitNames ( game . Players ) -- { Frodo Baggins } Usage The \"Rodash\" chain: _.chain(_) is aliased to _.fn , so instead of writing _.chain(_):filter you can simply write _.fn:filter , or any other chainable method. A chained function can be made using _.chain or built inductively using other chained methods of _.fn . A chainable method is one that has the subject which is passed through a chain as the first argument, and subsequent arguments See _.chainFn - Makes a function chainable if it returns a chain. _.invoke - the identity actor _.continue - an actor for chains of asynchronous functions _.maybe - an actor for chains of partial functions","title":"chain"},{"location":"api/Functions/#chainfn","text":"function _ . chainFn ( fn ) -- string Wraps a function, making it chainable if it returns a chain itself. This allows you to define custom functions in terms of the arguments they will take when called in a chain, and return a chained function which performs the operation, rather than explicitly taking the subject as first argument. Parameters fn - string Returns string Examples -- In the chain example addN was defined like so: local function addN ( list , n ) return _ . map ( list , function ( element ) return element + n end ) end numberChain = _ . chain ({ addN = addN }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- It is more natural to define addN as a function taking one argument, -- to match the way it is called in the chain: local function addN ( n ) -- Methods on _.fn are themselves chained, so list can be dropped. return _ . fn : map ( function ( element ) return element + n end ) end -- The _.chainFn is used to wrap any functions which return chains. numberChain = _ . chain ({ addN = _ . chainFn ( addN ) }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 See _.chain Chainable","title":"chainFn"},{"location":"api/Functions/#compose","text":"function _ . compose () -- string Returns a function that calls the argument functions in left-right order on an input, passing the return of the previous function as argument(s) to the next. Parameters undefined - string Returns string Examples local function fry ( item ) return fried .. item end local function cheesify ( item ) return cheesy .. item end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ) -- cheesy fried nachos Usage Useful for when you want to lazily compute something expensive that doesn't change.","title":"compose"},{"location":"api/Functions/#continue","text":"function _ . continue ( actor ) -- string An actor getter which awaits on any promises returned by chain methods, and continues execution when the promise completes. This allows any asynchronous methods to be used in chains without modifying any of the chain's synchronous methods, removing any boilerplate needed to handle promises in the main code body. Can wrap any other actor which handles values after any promise resolution. Parameters actor - string - (default = _.invoke ) The actor to wrap. Returns string Rejects passthrough Examples -- Let s define a function which returns an answer after a delay local getName = function ( player ) return _ . delay ( 1 ): andThen ( _ . returns ( player . Name )) end local players players = _ . chain ( { -- Any chainable function can be used filter = _ . filter , -- A chain which evaluates a promise of the player names mapNames = _ . fn : map ( getName ): parallel (), filterHurt = _ . fn : filter ( function ( player ) return player . Health 100 end ), mapNameIf = _ . chainFn ( function ( expectedName ) -- Methods on self work as expected return players : mapNames (): filter ( _ . fn : endsWith ( expectedName )) end ) }, _ . continue () ) local filterHurtHobbitNames = players : filterHurt (): mapNameIf ( Baggins ) local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Name = Boromir , Health = 0 } } filterHurtHobbitNames ( crew ): await () -- { Frodo Baggins } (some time later) See _.chain","title":"continue"},{"location":"api/Functions/#debounce","text":"function _ . debounce ( fn , delayInSeconds ) -- string Creates a debounced function that delays calling fn until after delayInSeconds seconds have elapsed since the last time the debounced function was attempted to be called. Parameters fn - string delayInSeconds - string Returns string - the debounced function with method :clear() can be called on to cancel any scheduled call. Usage A nice visualisation of debounce vs. throttle , the illustrated point being debounce will only call fn at the end of a spurt of events. Chainable","title":"debounce"},{"location":"api/Functions/#id","text":"function _ . id () -- string A simple function that does nothing, but returns its input parameters. Parameters undefined - string Returns string Usage This is typically referred to as the \"identity\" function.","title":"id"},{"location":"api/Functions/#invoke","text":"function _ . invoke ( fn , ) -- string An actor which calls the supplied fn with the argument tail. Parameters fn - string undefined - string Returns string Usage This is the default actor for _.chain and acts as an identity, meaning it has no effect on the result.","title":"invoke"},{"location":"api/Functions/#iscallable","text":"function _ . isCallable ( value ) -- string Return true if the value can be called ie. it is function or a table with a __call entry in its metatable. Parameters value - string Returns string Usage In general this is a much more suitable test than checking purely for a function type.","title":"isCallable"},{"location":"api/Functions/#maybe","text":"function _ . maybe ( actor ) -- string An actor which cancels execution of a chain if a method returns nil, evaluating the chain as nil. Can wrap any other actor which handles values that are non-nil. Parameters actor - string Returns string Examples -- We can define a chain of Rodash functions that will skip after a nil is returned. local maybeFn = _ . chain ( _ , _ . maybe ()) local getName = function ( player ) return player . Name end local players players = _ . chain ( { -- Any chainable functions can be used call = _ . call , endsWith = _ . endsWith , filterHurt = _ . fn : filter ( function ( player ) return player . Health 100 end ), filterBaggins = _ . chainFn ( function () -- If getName returns nil here, endsWith will be skipped return _ . fn : filter ( maybeFn : call ( getName ): endsWith ( Baggins )) end ) } ) local hurtHobbits = players : filterHurt (): filterBaggins () local mapNames = _ . fn : map ( getName ) local filterHurtBagginsNames = _ . compose ( hurtHobbits , mapNames ) -- Here, one player record doesn t have a Name property, so it is skipped. local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Health = 0 } }","title":"maybe"},{"location":"api/Functions/#memoize","text":"function _ . memoize ( fn , serializeArgs ) -- string Like _.once , but caches non-nil results of calls to fn keyed by some serialization of the input arguments to fn . By default, all the args are serialized simply using tostring . Optionally memoize takes function serializeArgs(args, cache) , a function that should return a string key which a result should be cached at for a given signature. Return nil to avoid caching the result. Parameters fn - string serializeArgs - string - (default = _.serialize ) Returns string - the function with method :clear(...) that resets the cache for the argument specified, or :clearAll() to clear the entire cache. Examples local menu = { soup , bread , butter } local heat = _ . memoize ( function ( index ) return hot ... menu [ index ] end ) heat ( 1 ) -- hot soup menu = { caviar } heat ( 1 ) -- hot soup heat ( 2 ) -- nil menu = { beef , potatoes } heat ( 1 ) -- hot soup heat ( 2 ) -- hot potatoes heat : clear ( 1 ) heat ( 1 ) -- hot beef See _.serialize _.serializeDeep if you want to recursively serialize arguments.","title":"memoize"},{"location":"api/Functions/#noop","text":"function _ . noop () -- string A simple function that does nothing, and returns nil. Returns string Usage Shorthand for function() end . Chainable","title":"noop"},{"location":"api/Functions/#once","text":"function _ . once ( fn ) -- string Returns a function that when called, only calls fn the first time the function is called. For subsequent calls, the initial return of fn is returned, even if it is nil . Parameters fn - string Returns string - the function with method :clear() that resets the cached value. Throws passthrough - any error thrown when called will cause nil to cache and pass through the error. Examples local fry = _ . once ( function ( item ) return fried .. tiem end ) fry ( sardine ) -- fried sardine fry ( squid ) -- fried sardine fry : clear () fry ( squid ) -- fried squid fry ( owl ) -- fried squid Usage Useful for when you want to lazily compute something expensive that doesn't change. Chainable","title":"once"},{"location":"api/Functions/#returns","text":"function _ . returns () -- string Returns a function that when called, returns the original input parameters. Parameters undefined - string Returns string Examples findPlayer ( builderman ): andThen ( _ . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones.","title":"returns"},{"location":"api/Functions/#setinterval","text":"function _ . setInterval ( fn , intervalInSeconds , delayInSeconds ) -- string Like _.setTimeout but calls fn after every interval of intervalInSeconds time has passed. Parameters fn - string intervalInSeconds - string delayInSeconds - string - (default = intervalInSeconds ) The delay before the initial call. Returns string - an instance which :clear() can be called on to prevent fn from firing.","title":"setInterval"},{"location":"api/Functions/#settimeout","text":"function _ . setTimeout ( fn , delayInSeconds ) -- string Like delay , this calls fn after delayInSeconds time has passed, with the added benefit of being cancelable. Parameters fn - string delayInSeconds - string Returns string - an instance which :clear() can be called on to prevent fn from firing.","title":"setTimeout"},{"location":"api/Functions/#throttle","text":"function _ . throttle ( fn , cooldownInSeconds ) -- string Creates a throttle function that drops any repeat calls within a cooldown period and instead returns the result of the last call. Parameters fn - string cooldownInSeconds - string Returns string Usage A nice visualisation of debounce vs. throttle , the illustrated point being throttle will call fn every period during a spurt of events.","title":"throttle"},{"location":"api/Functions/#throws","text":"function _ . throws ( errorMessage ) -- string Returns a function that when called, throws the original message. Parameters errorMessage - string Returns string Examples findPlayer ( builderman ): andThen ( _ . throws ( DaveNotFound )) --! DaveNotFound (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones.","title":"throws"},{"location":"api/Functions/#unary","text":"function _ . unary ( fn ) -- string Returns a function that wraps the input fn but only passes the first argument to it. Parameters fn - string Returns string","title":"unary"},{"location":"api/Strings/","text":"Strings Useful functions to manipulate strings, based on similar implementations in other standard libraries. Functions Chainable camelCase function _ . camelCase ( str ) -- string Convert str to camel-case. Parameters str - string Returns string Examples _ . camelCase ( Pepperoni Pizza ) -- pepperoniPizza _ . camelCase ( --pepperoni-pizza-- ) -- pepperoniPizza _ . camelCase ( __PEPPERONI_PIZZA ) -- pepperoniPizza Chainable capitalize function _ . capitalize ( str ) -- string Capitalize the first letter of str . Parameters str - string Returns string Examples _ . capitalize ( hello mould ) -- Hello mould charToHex function _ . charToHex ( char , format , useBytes ) -- string Converts char into a hex representation Parameters char - string format - string - (optional) a string passed to _.format which formats the hex value of each of the character's code points. useBytes - string - (default = false) whether to use the character's bytes, rather than UTF-8 code points. Returns string Examples _ . charToHex ( ) -- 3C _ . charToHex ( , #{}; ) -- #3C; _ . charToHex ( \ud83d\ude0f ) -- 1F60F _ . charToHex ( \ud83d\ude0f , 0x{} ) -- 0x1F60F _ . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , #x{}; ) -- #x1F937; #x1F3FC; #x200D; #x2640; #xFE0F; _ . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , %{} , true ) -- %F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F debug function _ . debug ( subject , ) -- string This function first calls _.format on the arguments provided and then outputs the response to the debug target, set using _.setDebug . By default, this function does nothing, allowing developers to leave the calls in the source code if that is beneficial. Parameters subject - string - the format match string undefined - string Returns string Usage A common pattern would be to _.setDebug() to alias to print during local development, and call e.g. _.setDebug(_.bind(HttpService.PostAsync, \"https://example.com/log\")) on a production build to allow remote debugging. Chainable decodeHtml function _ . decodeHtml ( str ) -- string The inverse of _.encodeHtml . Converts any HTML entities in str to their corresponding characters. Parameters str - string Returns string Examples _ . decodeHtml ( lt;b gt; #34;Smashed quot; lt;/b gt; apos;Avocado #39; #x1F60F; ) -- [[ b Smashed /b Avocado \ud83d\ude0f]] Chainable decodeUrl function _ . decodeUrl ( str ) -- string The inverse of _.encodeUrl . Parameters str - string Returns string Examples _ . decodeUrl ( https://Egg+Fried%20Rice!? ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURI in JavaScript. Chainable decodeUrlComponent function _ . decodeUrlComponent ( str ) -- string The inverse of _.encodeUrlComponent . Parameters str - string Returns string Throws MalformedInput if str contains characters encoded incorrectly. Examples _ . decodeUrlComponent ( https%3A%2F%2FEgg%2BFried%20Rice!%3F ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURIComponent in JavaScript. Chainable encodeHtml function _ . encodeHtml ( str ) -- string Converts the characters \"' in str to their corresponding HTML entities. Parameters str - string Returns string Examples _ . encodeHtml ( [[Pease Bacon Fish Chips ]] ) -- Peas lt; Bacon gt; quot;Fish quot; amp; apos;Chips apos; encodeQueryString function _ . encodeQueryString ( query ) -- string Takes a query dictionary of key-value pairs and builds a query string that can be concatenated to the end of a url. Parameters query - string Returns string Examples _ . encodeQueryString ({ time = 11 , biscuits = hob nobs , chocolatey = true })) -- ?biscuits=hob+nobs time=11 chocolatey=true Usage A query string which contains duplicate keys with different values is technically valid, but this function doesn't provide a way to produce them. Chainable encodeUrl function _ . encodeUrl ( str ) -- string Encodes str for use as a URL, for example as an entire URL. Parameters str - string Returns string Examples _ . encodeUrl ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https://example.com/Egg+Fried%20Rice!?%1F937%1F3FC%200D%2640%FE0F Usage This method is designed to act like encodeURI in JavaScript. Chainable encodeUrlComponent function _ . encodeUrlComponent ( str ) -- string Encodes str for use in a URL, for example as a query parameter of a URL. Parameters str - string Returns string Examples _ . encodeUrlComponent ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https%3A%2F%2Fexample.com%2FEgg%2BFried%20Rice!%3F%1F937%1F3FC%200D%2640%FE0F Usage This method is designed to act like encodeURIComponent in JavaScript. This is very similar to HttpService.EncodeUrl , but is included for parity and conforms closer to the standard (e.g. EncodeUrl unnecessarily encodes ! ). Chainable endsWith function _ . endsWith ( str , suffix ) -- string Checks if str ends with the string suffix . Parameters str - string suffix - string Returns string Examples _ . endsWith ( Fun Roblox Games , Games ) -- true _ . endsWith ( Bad Roblox Memes , Games ) -- false format function _ . format ( subject , ) -- string This function is a simpler more powerful version of string.format , inspired by format! in Rust. If an instance has a :format() method, this is used instead, passing the format arguments. {} prints the next variable using or tostring . {:?} prints using _.pretty . {:#?} prints using multiline _.pretty . Parameters subject - string - the format match string undefined - string Returns string hexToChar function _ . hexToChar ( hex ) -- string Converts a hex represntation of a character in the character. Parameters hex - string Returns string Throws MalformedInput if char is not a valid encoding. Examples _ . hexToChar ( 1F60F ) -- \ud83d\ude0f _ . hexToChar ( %1F60F ) -- \ud83d\ude0f _ . hexToChar ( #1F60F ) -- \ud83d\ude0f _ . hexToChar ( 0x1F60F ) -- \ud83d\ude0f Chainable kebabCase function _ . kebabCase ( str ) -- string Convert str to kebab-case, making all letters lowercase. Parameters str - string Returns string Examples _ . kebabCase ( strongStilton ) -- strong-stilton _ . kebabCase ( Strong Stilton ) -- strong-stilton _ . kebabCase ( __STRONG_STILTON__ ) -- strong-stilton Usage Chain with :upper() if you need an upper kebab-case string. Chainable leftPad function _ . leftPad ( str , length , prefix ) -- string Makes a string of length from str by repeating characters from prefix at the start of the string. Parameters str - string length - string prefix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , 0 ) -- 02 _ . leftPad ( toast , 10 , :) ) -- :):):toast pretty function _ . pretty ( subject , withMetatable ) -- string Pretty-prints the subject and its associated metatable if withMetatable is true Parameters subject - string withMetatable - string - (default = false) Returns string Chainable rightPad function _ . rightPad ( str , length , suffix ) -- string Makes a string of length from str by repeating characters from suffix at the end of the string. Parameters str - string length - string suffix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , ! ) -- 2! _ . leftPad ( toast , 10 , :) ) -- toast:):): setDebug function _ . setDebug ( fn ) -- string Hooks up any debug methods to invoke fn . By default, _.debug does nothing. Parameters fn - string - (default = print ) Returns string Usage Calling _.setDebug() will simply print all calls to _.debug with formatted arguments. Chainable snakeCase function _ . snakeCase ( str ) -- string Convert str to snake-case, making all letters uppercase. Parameters str - string Returns string Examples _ . snakeCase ( sweetChickenCurry ) -- SWEET_CHICKEN_CURRY _ . snakeCase ( Sweet Chicken Curry ) -- SWEET_CHICKEN__CURRY _ . snakeCase ( --sweet-chicken--curry-- ) -- SWEET_CHICKEN__CURRY Usage Chain with :lower() if you need a lower snake-case string. Chainable splitByPattern function _ . splitByPattern ( str , delimiter ) -- string Splits str into parts based on a pattern delimiter and returns a table of the parts. Parameters str - string delimiter - string - (default = \"\") Returns string Examples _ . splitByPattern ( rice ) -- { r , i , c , e } _ . splitByPattern ( one.two::flour , [.:] ) -- { one , two , , flour } Usage This method is useful only when you need a pattern as a delimiter. Use the Roblox native string.split if you are splitting on a simple string. Chainable startsWith function _ . startsWith ( str , prefix ) -- string Checks if str starts with the string start . Parameters str - string prefix - string Returns string Examples _ . startsWith ( Fun Roblox Games , Fun ) -- true _ . startsWith ( Chess , Fun ) -- false Chainable titleCase function _ . titleCase ( str ) -- string Convert str to title-case, where the first letter of each word is capitalized. Parameters str - string Returns string Examples _ . titleCase ( jello world ) -- Jello World _ . titleCase ( yellow-jello with_sprinkles ) -- Yellow-jello With_sprinkles _ . titleCase ( yellow jello s don\u2019t mellow ) -- Yellow Jello s Dont\u2019t Mellow Usage Dashes, underscores and apostraphes don't break words. Chainable trim function _ . trim ( str ) -- string Removes any spaces from the start and end of str . Parameters str - string Returns string Examples _ . trim ( roast veg ) -- roast veg","title":"Strings"},{"location":"api/Strings/#strings","text":"Useful functions to manipulate strings, based on similar implementations in other standard libraries.","title":"Strings"},{"location":"api/Strings/#functions","text":"Chainable","title":"Functions"},{"location":"api/Strings/#camelcase","text":"function _ . camelCase ( str ) -- string Convert str to camel-case. Parameters str - string Returns string Examples _ . camelCase ( Pepperoni Pizza ) -- pepperoniPizza _ . camelCase ( --pepperoni-pizza-- ) -- pepperoniPizza _ . camelCase ( __PEPPERONI_PIZZA ) -- pepperoniPizza Chainable","title":"camelCase"},{"location":"api/Strings/#capitalize","text":"function _ . capitalize ( str ) -- string Capitalize the first letter of str . Parameters str - string Returns string Examples _ . capitalize ( hello mould ) -- Hello mould","title":"capitalize"},{"location":"api/Strings/#chartohex","text":"function _ . charToHex ( char , format , useBytes ) -- string Converts char into a hex representation Parameters char - string format - string - (optional) a string passed to _.format which formats the hex value of each of the character's code points. useBytes - string - (default = false) whether to use the character's bytes, rather than UTF-8 code points. Returns string Examples _ . charToHex ( ) -- 3C _ . charToHex ( , #{}; ) -- #3C; _ . charToHex ( \ud83d\ude0f ) -- 1F60F _ . charToHex ( \ud83d\ude0f , 0x{} ) -- 0x1F60F _ . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , #x{}; ) -- #x1F937; #x1F3FC; #x200D; #x2640; #xFE0F; _ . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , %{} , true ) -- %F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F","title":"charToHex"},{"location":"api/Strings/#debug","text":"function _ . debug ( subject , ) -- string This function first calls _.format on the arguments provided and then outputs the response to the debug target, set using _.setDebug . By default, this function does nothing, allowing developers to leave the calls in the source code if that is beneficial. Parameters subject - string - the format match string undefined - string Returns string Usage A common pattern would be to _.setDebug() to alias to print during local development, and call e.g. _.setDebug(_.bind(HttpService.PostAsync, \"https://example.com/log\")) on a production build to allow remote debugging. Chainable","title":"debug"},{"location":"api/Strings/#decodehtml","text":"function _ . decodeHtml ( str ) -- string The inverse of _.encodeHtml . Converts any HTML entities in str to their corresponding characters. Parameters str - string Returns string Examples _ . decodeHtml ( lt;b gt; #34;Smashed quot; lt;/b gt; apos;Avocado #39; #x1F60F; ) -- [[ b Smashed /b Avocado \ud83d\ude0f]] Chainable","title":"decodeHtml"},{"location":"api/Strings/#decodeurl","text":"function _ . decodeUrl ( str ) -- string The inverse of _.encodeUrl . Parameters str - string Returns string Examples _ . decodeUrl ( https://Egg+Fried%20Rice!? ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURI in JavaScript. Chainable","title":"decodeUrl"},{"location":"api/Strings/#decodeurlcomponent","text":"function _ . decodeUrlComponent ( str ) -- string The inverse of _.encodeUrlComponent . Parameters str - string Returns string Throws MalformedInput if str contains characters encoded incorrectly. Examples _ . decodeUrlComponent ( https%3A%2F%2FEgg%2BFried%20Rice!%3F ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURIComponent in JavaScript. Chainable","title":"decodeUrlComponent"},{"location":"api/Strings/#encodehtml","text":"function _ . encodeHtml ( str ) -- string Converts the characters \"' in str to their corresponding HTML entities. Parameters str - string Returns string Examples _ . encodeHtml ( [[Pease Bacon Fish Chips ]] ) -- Peas lt; Bacon gt; quot;Fish quot; amp; apos;Chips apos;","title":"encodeHtml"},{"location":"api/Strings/#encodequerystring","text":"function _ . encodeQueryString ( query ) -- string Takes a query dictionary of key-value pairs and builds a query string that can be concatenated to the end of a url. Parameters query - string Returns string Examples _ . encodeQueryString ({ time = 11 , biscuits = hob nobs , chocolatey = true })) -- ?biscuits=hob+nobs time=11 chocolatey=true Usage A query string which contains duplicate keys with different values is technically valid, but this function doesn't provide a way to produce them. Chainable","title":"encodeQueryString"},{"location":"api/Strings/#encodeurl","text":"function _ . encodeUrl ( str ) -- string Encodes str for use as a URL, for example as an entire URL. Parameters str - string Returns string Examples _ . encodeUrl ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https://example.com/Egg+Fried%20Rice!?%1F937%1F3FC%200D%2640%FE0F Usage This method is designed to act like encodeURI in JavaScript. Chainable","title":"encodeUrl"},{"location":"api/Strings/#encodeurlcomponent","text":"function _ . encodeUrlComponent ( str ) -- string Encodes str for use in a URL, for example as a query parameter of a URL. Parameters str - string Returns string Examples _ . encodeUrlComponent ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https%3A%2F%2Fexample.com%2FEgg%2BFried%20Rice!%3F%1F937%1F3FC%200D%2640%FE0F Usage This method is designed to act like encodeURIComponent in JavaScript. This is very similar to HttpService.EncodeUrl , but is included for parity and conforms closer to the standard (e.g. EncodeUrl unnecessarily encodes ! ). Chainable","title":"encodeUrlComponent"},{"location":"api/Strings/#endswith","text":"function _ . endsWith ( str , suffix ) -- string Checks if str ends with the string suffix . Parameters str - string suffix - string Returns string Examples _ . endsWith ( Fun Roblox Games , Games ) -- true _ . endsWith ( Bad Roblox Memes , Games ) -- false","title":"endsWith"},{"location":"api/Strings/#format","text":"function _ . format ( subject , ) -- string This function is a simpler more powerful version of string.format , inspired by format! in Rust. If an instance has a :format() method, this is used instead, passing the format arguments. {} prints the next variable using or tostring . {:?} prints using _.pretty . {:#?} prints using multiline _.pretty . Parameters subject - string - the format match string undefined - string Returns string","title":"format"},{"location":"api/Strings/#hextochar","text":"function _ . hexToChar ( hex ) -- string Converts a hex represntation of a character in the character. Parameters hex - string Returns string Throws MalformedInput if char is not a valid encoding. Examples _ . hexToChar ( 1F60F ) -- \ud83d\ude0f _ . hexToChar ( %1F60F ) -- \ud83d\ude0f _ . hexToChar ( #1F60F ) -- \ud83d\ude0f _ . hexToChar ( 0x1F60F ) -- \ud83d\ude0f Chainable","title":"hexToChar"},{"location":"api/Strings/#kebabcase","text":"function _ . kebabCase ( str ) -- string Convert str to kebab-case, making all letters lowercase. Parameters str - string Returns string Examples _ . kebabCase ( strongStilton ) -- strong-stilton _ . kebabCase ( Strong Stilton ) -- strong-stilton _ . kebabCase ( __STRONG_STILTON__ ) -- strong-stilton Usage Chain with :upper() if you need an upper kebab-case string. Chainable","title":"kebabCase"},{"location":"api/Strings/#leftpad","text":"function _ . leftPad ( str , length , prefix ) -- string Makes a string of length from str by repeating characters from prefix at the start of the string. Parameters str - string length - string prefix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , 0 ) -- 02 _ . leftPad ( toast , 10 , :) ) -- :):):toast","title":"leftPad"},{"location":"api/Strings/#pretty","text":"function _ . pretty ( subject , withMetatable ) -- string Pretty-prints the subject and its associated metatable if withMetatable is true Parameters subject - string withMetatable - string - (default = false) Returns string Chainable","title":"pretty"},{"location":"api/Strings/#rightpad","text":"function _ . rightPad ( str , length , suffix ) -- string Makes a string of length from str by repeating characters from suffix at the end of the string. Parameters str - string length - string suffix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , ! ) -- 2! _ . leftPad ( toast , 10 , :) ) -- toast:):):","title":"rightPad"},{"location":"api/Strings/#setdebug","text":"function _ . setDebug ( fn ) -- string Hooks up any debug methods to invoke fn . By default, _.debug does nothing. Parameters fn - string - (default = print ) Returns string Usage Calling _.setDebug() will simply print all calls to _.debug with formatted arguments. Chainable","title":"setDebug"},{"location":"api/Strings/#snakecase","text":"function _ . snakeCase ( str ) -- string Convert str to snake-case, making all letters uppercase. Parameters str - string Returns string Examples _ . snakeCase ( sweetChickenCurry ) -- SWEET_CHICKEN_CURRY _ . snakeCase ( Sweet Chicken Curry ) -- SWEET_CHICKEN__CURRY _ . snakeCase ( --sweet-chicken--curry-- ) -- SWEET_CHICKEN__CURRY Usage Chain with :lower() if you need a lower snake-case string. Chainable","title":"snakeCase"},{"location":"api/Strings/#splitbypattern","text":"function _ . splitByPattern ( str , delimiter ) -- string Splits str into parts based on a pattern delimiter and returns a table of the parts. Parameters str - string delimiter - string - (default = \"\") Returns string Examples _ . splitByPattern ( rice ) -- { r , i , c , e } _ . splitByPattern ( one.two::flour , [.:] ) -- { one , two , , flour } Usage This method is useful only when you need a pattern as a delimiter. Use the Roblox native string.split if you are splitting on a simple string. Chainable","title":"splitByPattern"},{"location":"api/Strings/#startswith","text":"function _ . startsWith ( str , prefix ) -- string Checks if str starts with the string start . Parameters str - string prefix - string Returns string Examples _ . startsWith ( Fun Roblox Games , Fun ) -- true _ . startsWith ( Chess , Fun ) -- false Chainable","title":"startsWith"},{"location":"api/Strings/#titlecase","text":"function _ . titleCase ( str ) -- string Convert str to title-case, where the first letter of each word is capitalized. Parameters str - string Returns string Examples _ . titleCase ( jello world ) -- Jello World _ . titleCase ( yellow-jello with_sprinkles ) -- Yellow-jello With_sprinkles _ . titleCase ( yellow jello s don\u2019t mellow ) -- Yellow Jello s Dont\u2019t Mellow Usage Dashes, underscores and apostraphes don't break words. Chainable","title":"titleCase"},{"location":"api/Strings/#trim","text":"function _ . trim ( str ) -- string Removes any spaces from the start and end of str . Parameters str - string Returns string Examples _ . trim ( roast veg ) -- roast veg","title":"trim"},{"location":"api/Tables/","text":"Tables A collection of functions that operate on Lua tables. These can operate on arrays, dictionaries and any collection types implemented with tables. Functions can also iterate over custom iterator functions. These functions typically act on immutable tables and return new tables in functional style. Note that mutable arguments in Rodash are explicitly typed as such. Functions all function _ . all ( source , handler ) -- string Return true if handler returns true for every element in source it is called with. If no handler is provided, _.all returns true if every element is non-nil. Parameters source - string handler - string - (default = _.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local allNamesStartWithB = _ . all ( names , function ( name ) return _ . startsWith ( name , B ) end ) allNamesStartWithB -- false any function _ . any ( source , handler ) -- string Return true if handler returns true for at least one element in source it is called with. If no handler is provided, _.any returns true if some element is non-nil. Parameters source - string handler - string - (default = _.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local anyNameStartsWithB = _ . any ( names , function ( name ) return _ . startsWith ( name , B ) end ) anyNameStartsWithB -- true assign function _ . assign ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in later tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = _ . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See _.defaults _.merge clone function _ . clone ( source ) -- string Returns a shallow copy of source . Parameters source - string Returns string Examples local Hermione = { name = Hermione Granger , time = 12 } local PastHermione = _ . clone ( Hermione ) PastHermione . time = 9 Hermione . time -- 12 Usage If you also want to clone children of the table you may want to use or _.cloneDeep but this can be costly. To change behaviour for particular values use _.map with a handler. Alternatively, if working with class instances see _.Clone . See _.cloneDeep _.Clone compact function _ . compact ( source ) -- string Returns an array of elements from a sparse array source with the returned elements provided in original key-order. Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local inOrderNames = _ . compact ( names ) inOrderNames -- { Frodo , Boromir , Bilbo } cycles function _ . cycles ( source , tickets ) -- string Cycles! Parameters source - string tickets - string Returns string deepEqual function _ . deepEqual ( a , b ) -- string Returns true if every element in a recursively matches every element b . For elements which are not tables, they match if they are equal. If they are tables they match if the left is recursively deeply-equal to the right. Parameters a - string b - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } local car2 = { speed = 10 , wheels = 4 , lightsOn = { indicators = false , headlights = false } } _ . deepEqual ( car , {}) -- false _ . deepEqual ( car , car ) -- true _ . deepEqual ( car , _ . clone ( car )) -- true _ . deepEqual ( car , _ . cloneDeep ( car )) -- true _ . deepEqual ( car , car2 ) -- false See _.isSubset _.shallowEqual defaultSerializer function _ . defaultSerializer ( input ) -- string A function which provides a simple, shallow string representation of a value. Parameters input - string Returns string defaults function _ . defaults ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in earlier tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = _ . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } Bilbo = { team = yellow } } ]] See _.assign _.merge entries function _ . entries ( source ) -- string Returns an array of all the entries of elements in source . Each entry is a tuple (key, value) . Parameters source - string Returns string Examples _ . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {{ Frodo , 1}, { Boromir , 2}, { Bilbo , 3}} (in some order) filter function _ . filter ( source , handler ) -- string Returns an array of any values in source that the handler function returned true for, in order of iteration. Parameters source - string handler - string Returns string Examples local myTools = game . Players . LocalPlayer . Backpack : GetChildren () local mySpoons = _ . filter ( myTools , function ( tool ) return _ . endsWith ( tool . Name , Spoon ) end ) mySpoons -- {SilverSpoon, TableSpoon} See _.filterKeys if you would like to filter but preserve table keys filterKeys function _ . filterKeys ( source , handler ) -- string Returns a table of any elements in source that the handler function returned true for, preserving the key and value of every accepted element. Parameters source - string handler - string Returns string Examples local ingredients = { veg = carrot , sauce = tomato , herb = basil } local carrotsAndHerbs = _ . filterKeys ( ingredients , function ( value , key ) return value == carrot or key == herb end ) carrotsAndHerbs -- {veg = carrot , herb = basil } find function _ . find ( source , handler ) -- string Picks a value from the table that handler returns true for. As tables do not have ordered keys, do not rely on returning any particular value. Parameters source - string handler - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local nameWithB = _ . find ( names , function ( name ) return _ . startsWith ( name , B ) end ) nameWithB -- Bilbo , 8 (or Boromir , 3) -- Or use a chain: local nameWithF = _ . find ( names , _ . fn : startsWith ( name , B )) nameWithF -- Frodo , 1 -- Or find the key of a specific value: local _ , key = _ . find ( names , _ . fn : matches ( Bilbo )) key -- 8 Usage If you need to find the first value of an array that matches, use _.first . See _.first flatMap function _ . flatMap ( source , handler ) -- string Like _.mapValues but handler must return an array. These elements are then insterted into the the resulting array returned. You can return an empty array {} from handler to avoid inserting anything for a particular element. Parameters source - string handler - string Returns string Examples local tools = _ . flatMap ( game . Players : GetChildren (), function ( player ) return player . Backpack : GetChildren () end ) tools -- {Spoon, Ring, Sting, Book} Chainable get function _ . get ( source , key , ) -- string Get a child or descendant of a table, returning nil if any errors are generated. Parameters source - string key - string - The key of the child. undefined - string Returns string Examples local upperTorso = _ . get ( game . Players , LocalPlayer , Character , UpperTorso ) upperTorso -- Part (if player s character and its UpperTorso are defined) -- You can also bind a lookup to get later on: local getUpperTorso = _ . bindTail ( _ . get , Character , UpperTorso ) getUpperTorso ( players . LocalPlayer ) -- Part groupBy function _ . groupBy ( source , handler ) -- string Like _.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = _ . mapKeys ( playerSet , function ( name ) return _ . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true} includes function _ . includes ( source , item ) -- string Returns true if item exists as a value in the source table. Parameters source - string item - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } _ . includes ( names , Boromir ) -- true _ . includes ( names , 1 ) -- false invert function _ . invert ( source ) -- string Returns a table with elements from source with their keys and values flipped. Parameters source - string Returns string Examples local teams = { red = Frodo , blue = Bilbo , yellow = Boromir } local players = _ . invert ( teams ) players -- {Frodo = red , Bilbo = blue , Boromir = yellow } isArray function _ . isArray ( source ) -- string Returns true is source is made up only of natural keys 1..n . Parameters source - string Returns string Examples _ . isArray ({ 1 , 2 , 3 }) -- true _ . isArray ({ a = 1 , b = 2 , c = 3 }) -- false -- Treating sparse arrays as natural arrays will only complicate things: _ . isArray ({ 1 , 2 , nil , nil , 3 }) -- false _ . isArray ( _ . compact ({ 1 , 2 , nil , nil , 3 })) -- true isEmpty function _ . isEmpty ( source ) -- string Returns true if source has no keys. Parameters source - string Returns string Examples _ . isEmpty ({}) -- true _ . isEmpty ({ false }) -- false _ . isEmpty ({ a = 1 }) -- false isSubset function _ . isSubset ( a , b , references ) -- string Returns true if all the values in a match corresponding values in b recursively. For elements which are not tables, they match if they are equal. If they are tables they match if the right is a subset of the left. , (T, any - bool) Parameters a - string b - string references - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } _ . isSubset ( car , {}) -- true _ . isSubset ( car , car ) -- true _ . isSubset ( car , { speed = 10 , lightsOn = { indicators = true }}) -- true _ . isSubset ( car , { speed = 12 }) -- false _ . isSubset ({}, car ) -- false keyBy function _ . keyBy ( source , handler ) -- string Return Parameters source - string handler - string Returns string keyBy function _ . keyBy ( source , handler ) -- string Like _.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = _ . keyBy ( playerSet , function ( name ) return _ . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true} keys function _ . keys ( source ) -- string Returns an array of all the keys of the elements in source . Parameters source - string Returns string Examples _ . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- { Frodo , Boromir , Bilbo } (in some order) len function _ . len ( source ) -- string Returns the number of elements in source . Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } _ . len ( names ) -- 3 map function _ . map ( source , handler ) -- string Return new table from source with each value at the same key, but replaced by the return from the handler function called for each value and key in the table. Parameters source - string handler - string Returns string Examples local playerNames = _ . map ( game . Players : GetChildren (), function ( player ) return player . Name end ) playerNames -- { Frodo Baggins , Bilbo Baggins , Boromir } -- nil values naturally do not translate to keys: local balls = { { color : red , amount : 0 }, { color : blue , amount : 10 }, { color : yellow , amount : 12 } } local foundColors = _ . map ( balls , function ( ball ) return ball . amount 0 and ball . color or nil end ) foundColors -- { blue , yellow } local numbers = { 1 , 1 , 2 , 3 , 5 } local nextNumbers = _ . map ( numbers , function ( value , key ) return value + ( numbers [ key - 1 ] or 0 ) end ) nextNumbers -- {1, 2, 3, 5, 8} mapValues function _ . mapValues ( source , handler ) -- string Like _.map , but returns an array of the transformed values in the order that they are iterated over, dropping the original keys. Parameters source - string handler - string Returns string Examples local ingredients = { veg = carrot , sauce = tomato , herb = basil } local list = _ . mapValues ( function ( value ) return _ . format ( {} x2 , value ) end ) list -- { carrot x2 , tomato x2 , basil x2 } (in some order) merge function _ . merge ( target , ) -- string Mutates target by iterating recursively through elements of the subsequent arguments in order and inserting or replacing the values in target with each element preserving keys. If any values are both tables, these are merged recursively using _.merge . Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local mergedInfo = _ . merge ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See _.assign _.defaults one function _ . one ( source ) -- string Returns an element from source , if it has one. Parameters source - string Returns string Examples _ . one ({}) -- nil _ . one ({ a = 1 , b = 2 , c = 3 }) -- b, 2 (or any another element) privatize function _ . privatize ( source ) -- string Returns a copy of source , ensuring each key starts with an underscore _ . Keys which are already prefixed with an underscore are left unchanged., (T{} - T{}) Parameters source - string Returns string Examples local privates = _ . privatize ({ [ 1 ] = 1 , public = 2 , _private = 3 }) privates -- {_1 = 1, _public = 2, _private = 3} serialize function _ . serialize ( source , serializer , keySerializer , cycleIds ) -- string Returns a string representation of source including all elements with sorted keys. _.serialize preserves the properties of being unique, stable and cycle-safe if the serializer functions provided also obey these properties. Parameters source - string serializer - string keySerializer - string cycleIds - string Returns string Examples _ . serialize ({ 1 , 2 , 3 }) -- {1,2,3} _ . serialize ({ a = 1 , b = true , c = hello }) -- {a:1,b:true,c: hello } _ . serialize ({ a = function () end , b = { a = table }) -- {a: function: 0x... ,b= table: 0x... } Usage Use _.serialize when you need a representation of a table which doesn't need to be human-readable, or you need to customize the way serialization works. _.pretty is more appropriate when you need a human-readable string. See _.serializeDeep _.defaultSerializer _.pretty serializeDeep function _ . serializeDeep ( source , serializer , keySerializer , cycleIds ) -- string Like _.serialize , but if a child element is a table it is serialized recursively. Returns a string representation of source including all elements with sorted keys. This function preserves uniqueness, stability and cycle-safety. Parameters source - string serializer - string keySerializer - string cycleIds - string Returns string See _.serialize _.defaultSerializer shallowEqual function _ . shallowEqual ( left , right ) -- string Returns true if left and right are equal, or if they are tables and the elements in one are present and have equal values to those in the other. Parameters left - string right - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } _ . shallowEqual ( car , {}) -- false _ . shallowEqual ( car , car ) -- true _ . shallowEqual ( car , _ . clone ( car )) -- true _ . shallowEqual ( car , _ . cloneDeep ( car )) -- false Based on https : // developmentarc . gitbooks . io / react - indepth / content / life_cycle / update / using_should_component_update . html See _.deepEqual unique function _ . unique ( source ) -- string Returns an array of the values in source , without any repetitions. Values are considered equal if the have the same key representation. Parameters source - string Returns string Examples local list = { 1 , 2 , 2 , 3 , 5 , 1 } _ . unique ( list ) -- {1, 2, 3, 5} (or another order) values function _ . values ( source ) -- string Returns an array of all the values of the elements in source . Parameters source - string Returns string Examples _ . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {1, 2, 3} (in some order) without function _ . without ( source , value ) -- string Returns an array of elements in source with any elements of value removed. Parameters source - string value - string Returns string Examples local points = { 0 , 10 , 3 , 0 , 5 } local nonZero = _ . without ( points , 0 ) nonZero -- {10, 3, 5} local ingredients = { veg = carrot , sauce = tomato , herb = basil } local withoutCarrots = _ . without ( ingredients , carrot ) withoutCarrots -- { tomato , basil } (in some order)","title":"Tables"},{"location":"api/Tables/#tables","text":"A collection of functions that operate on Lua tables. These can operate on arrays, dictionaries and any collection types implemented with tables. Functions can also iterate over custom iterator functions. These functions typically act on immutable tables and return new tables in functional style. Note that mutable arguments in Rodash are explicitly typed as such.","title":"Tables"},{"location":"api/Tables/#functions","text":"","title":"Functions"},{"location":"api/Tables/#all","text":"function _ . all ( source , handler ) -- string Return true if handler returns true for every element in source it is called with. If no handler is provided, _.all returns true if every element is non-nil. Parameters source - string handler - string - (default = _.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local allNamesStartWithB = _ . all ( names , function ( name ) return _ . startsWith ( name , B ) end ) allNamesStartWithB -- false","title":"all"},{"location":"api/Tables/#any","text":"function _ . any ( source , handler ) -- string Return true if handler returns true for at least one element in source it is called with. If no handler is provided, _.any returns true if some element is non-nil. Parameters source - string handler - string - (default = _.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local anyNameStartsWithB = _ . any ( names , function ( name ) return _ . startsWith ( name , B ) end ) anyNameStartsWithB -- true","title":"any"},{"location":"api/Tables/#assign","text":"function _ . assign ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in later tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = _ . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See _.defaults _.merge","title":"assign"},{"location":"api/Tables/#clone","text":"function _ . clone ( source ) -- string Returns a shallow copy of source . Parameters source - string Returns string Examples local Hermione = { name = Hermione Granger , time = 12 } local PastHermione = _ . clone ( Hermione ) PastHermione . time = 9 Hermione . time -- 12 Usage If you also want to clone children of the table you may want to use or _.cloneDeep but this can be costly. To change behaviour for particular values use _.map with a handler. Alternatively, if working with class instances see _.Clone . See _.cloneDeep _.Clone","title":"clone"},{"location":"api/Tables/#compact","text":"function _ . compact ( source ) -- string Returns an array of elements from a sparse array source with the returned elements provided in original key-order. Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local inOrderNames = _ . compact ( names ) inOrderNames -- { Frodo , Boromir , Bilbo }","title":"compact"},{"location":"api/Tables/#cycles","text":"function _ . cycles ( source , tickets ) -- string Cycles! Parameters source - string tickets - string Returns string","title":"cycles"},{"location":"api/Tables/#deepequal","text":"function _ . deepEqual ( a , b ) -- string Returns true if every element in a recursively matches every element b . For elements which are not tables, they match if they are equal. If they are tables they match if the left is recursively deeply-equal to the right. Parameters a - string b - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } local car2 = { speed = 10 , wheels = 4 , lightsOn = { indicators = false , headlights = false } } _ . deepEqual ( car , {}) -- false _ . deepEqual ( car , car ) -- true _ . deepEqual ( car , _ . clone ( car )) -- true _ . deepEqual ( car , _ . cloneDeep ( car )) -- true _ . deepEqual ( car , car2 ) -- false See _.isSubset _.shallowEqual","title":"deepEqual"},{"location":"api/Tables/#defaultserializer","text":"function _ . defaultSerializer ( input ) -- string A function which provides a simple, shallow string representation of a value. Parameters input - string Returns string","title":"defaultSerializer"},{"location":"api/Tables/#defaults","text":"function _ . defaults ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in earlier tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = _ . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } Bilbo = { team = yellow } } ]] See _.assign _.merge","title":"defaults"},{"location":"api/Tables/#entries","text":"function _ . entries ( source ) -- string Returns an array of all the entries of elements in source . Each entry is a tuple (key, value) . Parameters source - string Returns string Examples _ . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {{ Frodo , 1}, { Boromir , 2}, { Bilbo , 3}} (in some order)","title":"entries"},{"location":"api/Tables/#filter","text":"function _ . filter ( source , handler ) -- string Returns an array of any values in source that the handler function returned true for, in order of iteration. Parameters source - string handler - string Returns string Examples local myTools = game . Players . LocalPlayer . Backpack : GetChildren () local mySpoons = _ . filter ( myTools , function ( tool ) return _ . endsWith ( tool . Name , Spoon ) end ) mySpoons -- {SilverSpoon, TableSpoon} See _.filterKeys if you would like to filter but preserve table keys","title":"filter"},{"location":"api/Tables/#filterkeys","text":"function _ . filterKeys ( source , handler ) -- string Returns a table of any elements in source that the handler function returned true for, preserving the key and value of every accepted element. Parameters source - string handler - string Returns string Examples local ingredients = { veg = carrot , sauce = tomato , herb = basil } local carrotsAndHerbs = _ . filterKeys ( ingredients , function ( value , key ) return value == carrot or key == herb end ) carrotsAndHerbs -- {veg = carrot , herb = basil }","title":"filterKeys"},{"location":"api/Tables/#find","text":"function _ . find ( source , handler ) -- string Picks a value from the table that handler returns true for. As tables do not have ordered keys, do not rely on returning any particular value. Parameters source - string handler - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local nameWithB = _ . find ( names , function ( name ) return _ . startsWith ( name , B ) end ) nameWithB -- Bilbo , 8 (or Boromir , 3) -- Or use a chain: local nameWithF = _ . find ( names , _ . fn : startsWith ( name , B )) nameWithF -- Frodo , 1 -- Or find the key of a specific value: local _ , key = _ . find ( names , _ . fn : matches ( Bilbo )) key -- 8 Usage If you need to find the first value of an array that matches, use _.first . See _.first","title":"find"},{"location":"api/Tables/#flatmap","text":"function _ . flatMap ( source , handler ) -- string Like _.mapValues but handler must return an array. These elements are then insterted into the the resulting array returned. You can return an empty array {} from handler to avoid inserting anything for a particular element. Parameters source - string handler - string Returns string Examples local tools = _ . flatMap ( game . Players : GetChildren (), function ( player ) return player . Backpack : GetChildren () end ) tools -- {Spoon, Ring, Sting, Book} Chainable","title":"flatMap"},{"location":"api/Tables/#get","text":"function _ . get ( source , key , ) -- string Get a child or descendant of a table, returning nil if any errors are generated. Parameters source - string key - string - The key of the child. undefined - string Returns string Examples local upperTorso = _ . get ( game . Players , LocalPlayer , Character , UpperTorso ) upperTorso -- Part (if player s character and its UpperTorso are defined) -- You can also bind a lookup to get later on: local getUpperTorso = _ . bindTail ( _ . get , Character , UpperTorso ) getUpperTorso ( players . LocalPlayer ) -- Part","title":"get"},{"location":"api/Tables/#groupby","text":"function _ . groupBy ( source , handler ) -- string Like _.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = _ . mapKeys ( playerSet , function ( name ) return _ . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true}","title":"groupBy"},{"location":"api/Tables/#includes","text":"function _ . includes ( source , item ) -- string Returns true if item exists as a value in the source table. Parameters source - string item - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } _ . includes ( names , Boromir ) -- true _ . includes ( names , 1 ) -- false","title":"includes"},{"location":"api/Tables/#invert","text":"function _ . invert ( source ) -- string Returns a table with elements from source with their keys and values flipped. Parameters source - string Returns string Examples local teams = { red = Frodo , blue = Bilbo , yellow = Boromir } local players = _ . invert ( teams ) players -- {Frodo = red , Bilbo = blue , Boromir = yellow }","title":"invert"},{"location":"api/Tables/#isarray","text":"function _ . isArray ( source ) -- string Returns true is source is made up only of natural keys 1..n . Parameters source - string Returns string Examples _ . isArray ({ 1 , 2 , 3 }) -- true _ . isArray ({ a = 1 , b = 2 , c = 3 }) -- false -- Treating sparse arrays as natural arrays will only complicate things: _ . isArray ({ 1 , 2 , nil , nil , 3 }) -- false _ . isArray ( _ . compact ({ 1 , 2 , nil , nil , 3 })) -- true","title":"isArray"},{"location":"api/Tables/#isempty","text":"function _ . isEmpty ( source ) -- string Returns true if source has no keys. Parameters source - string Returns string Examples _ . isEmpty ({}) -- true _ . isEmpty ({ false }) -- false _ . isEmpty ({ a = 1 }) -- false","title":"isEmpty"},{"location":"api/Tables/#issubset","text":"function _ . isSubset ( a , b , references ) -- string Returns true if all the values in a match corresponding values in b recursively. For elements which are not tables, they match if they are equal. If they are tables they match if the right is a subset of the left. , (T, any - bool) Parameters a - string b - string references - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } _ . isSubset ( car , {}) -- true _ . isSubset ( car , car ) -- true _ . isSubset ( car , { speed = 10 , lightsOn = { indicators = true }}) -- true _ . isSubset ( car , { speed = 12 }) -- false _ . isSubset ({}, car ) -- false","title":"isSubset"},{"location":"api/Tables/#keyby","text":"function _ . keyBy ( source , handler ) -- string Return Parameters source - string handler - string Returns string","title":"keyBy"},{"location":"api/Tables/#keyby_1","text":"function _ . keyBy ( source , handler ) -- string Like _.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = _ . keyBy ( playerSet , function ( name ) return _ . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true}","title":"keyBy"},{"location":"api/Tables/#keys","text":"function _ . keys ( source ) -- string Returns an array of all the keys of the elements in source . Parameters source - string Returns string Examples _ . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- { Frodo , Boromir , Bilbo } (in some order)","title":"keys"},{"location":"api/Tables/#len","text":"function _ . len ( source ) -- string Returns the number of elements in source . Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } _ . len ( names ) -- 3","title":"len"},{"location":"api/Tables/#map","text":"function _ . map ( source , handler ) -- string Return new table from source with each value at the same key, but replaced by the return from the handler function called for each value and key in the table. Parameters source - string handler - string Returns string Examples local playerNames = _ . map ( game . Players : GetChildren (), function ( player ) return player . Name end ) playerNames -- { Frodo Baggins , Bilbo Baggins , Boromir } -- nil values naturally do not translate to keys: local balls = { { color : red , amount : 0 }, { color : blue , amount : 10 }, { color : yellow , amount : 12 } } local foundColors = _ . map ( balls , function ( ball ) return ball . amount 0 and ball . color or nil end ) foundColors -- { blue , yellow } local numbers = { 1 , 1 , 2 , 3 , 5 } local nextNumbers = _ . map ( numbers , function ( value , key ) return value + ( numbers [ key - 1 ] or 0 ) end ) nextNumbers -- {1, 2, 3, 5, 8}","title":"map"},{"location":"api/Tables/#mapvalues","text":"function _ . mapValues ( source , handler ) -- string Like _.map , but returns an array of the transformed values in the order that they are iterated over, dropping the original keys. Parameters source - string handler - string Returns string Examples local ingredients = { veg = carrot , sauce = tomato , herb = basil } local list = _ . mapValues ( function ( value ) return _ . format ( {} x2 , value ) end ) list -- { carrot x2 , tomato x2 , basil x2 } (in some order)","title":"mapValues"},{"location":"api/Tables/#merge","text":"function _ . merge ( target , ) -- string Mutates target by iterating recursively through elements of the subsequent arguments in order and inserting or replacing the values in target with each element preserving keys. If any values are both tables, these are merged recursively using _.merge . Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local mergedInfo = _ . merge ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See _.assign _.defaults","title":"merge"},{"location":"api/Tables/#one","text":"function _ . one ( source ) -- string Returns an element from source , if it has one. Parameters source - string Returns string Examples _ . one ({}) -- nil _ . one ({ a = 1 , b = 2 , c = 3 }) -- b, 2 (or any another element)","title":"one"},{"location":"api/Tables/#privatize","text":"function _ . privatize ( source ) -- string Returns a copy of source , ensuring each key starts with an underscore _ . Keys which are already prefixed with an underscore are left unchanged., (T{} - T{}) Parameters source - string Returns string Examples local privates = _ . privatize ({ [ 1 ] = 1 , public = 2 , _private = 3 }) privates -- {_1 = 1, _public = 2, _private = 3}","title":"privatize"},{"location":"api/Tables/#serialize","text":"function _ . serialize ( source , serializer , keySerializer , cycleIds ) -- string Returns a string representation of source including all elements with sorted keys. _.serialize preserves the properties of being unique, stable and cycle-safe if the serializer functions provided also obey these properties. Parameters source - string serializer - string keySerializer - string cycleIds - string Returns string Examples _ . serialize ({ 1 , 2 , 3 }) -- {1,2,3} _ . serialize ({ a = 1 , b = true , c = hello }) -- {a:1,b:true,c: hello } _ . serialize ({ a = function () end , b = { a = table }) -- {a: function: 0x... ,b= table: 0x... } Usage Use _.serialize when you need a representation of a table which doesn't need to be human-readable, or you need to customize the way serialization works. _.pretty is more appropriate when you need a human-readable string. See _.serializeDeep _.defaultSerializer _.pretty","title":"serialize"},{"location":"api/Tables/#serializedeep","text":"function _ . serializeDeep ( source , serializer , keySerializer , cycleIds ) -- string Like _.serialize , but if a child element is a table it is serialized recursively. Returns a string representation of source including all elements with sorted keys. This function preserves uniqueness, stability and cycle-safety. Parameters source - string serializer - string keySerializer - string cycleIds - string Returns string See _.serialize _.defaultSerializer","title":"serializeDeep"},{"location":"api/Tables/#shallowequal","text":"function _ . shallowEqual ( left , right ) -- string Returns true if left and right are equal, or if they are tables and the elements in one are present and have equal values to those in the other. Parameters left - string right - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } _ . shallowEqual ( car , {}) -- false _ . shallowEqual ( car , car ) -- true _ . shallowEqual ( car , _ . clone ( car )) -- true _ . shallowEqual ( car , _ . cloneDeep ( car )) -- false Based on https : // developmentarc . gitbooks . io / react - indepth / content / life_cycle / update / using_should_component_update . html See _.deepEqual","title":"shallowEqual"},{"location":"api/Tables/#unique","text":"function _ . unique ( source ) -- string Returns an array of the values in source , without any repetitions. Values are considered equal if the have the same key representation. Parameters source - string Returns string Examples local list = { 1 , 2 , 2 , 3 , 5 , 1 } _ . unique ( list ) -- {1, 2, 3, 5} (or another order)","title":"unique"},{"location":"api/Tables/#values","text":"function _ . values ( source ) -- string Returns an array of all the values of the elements in source . Parameters source - string Returns string Examples _ . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {1, 2, 3} (in some order)","title":"values"},{"location":"api/Tables/#without","text":"function _ . without ( source , value ) -- string Returns an array of elements in source with any elements of value removed. Parameters source - string value - string Returns string Examples local points = { 0 , 10 , 3 , 0 , 5 } local nonZero = _ . without ( points , 0 ) nonZero -- {10, 3, 5} local ingredients = { veg = carrot , sauce = tomato , herb = basil } local withoutCarrots = _ . without ( ingredients , carrot ) withoutCarrots -- { tomato , basil } (in some order)","title":"without"},{"location":"guide/arrays/","text":"Handling arrays How to Arrays are great!","title":"Arrays"},{"location":"guide/arrays/#handling-arrays","text":"","title":"Handling arrays"},{"location":"guide/arrays/#how-to","text":"Arrays are great!","title":"How to"}]}