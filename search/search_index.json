{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rodash is a collection of functions designed to aid everyday game programming in Roblox. It borrows ideas from lodash in JS, some simpler functionality of Penlight and standalone helper scripts in circulation among the Roblox community. Usage local _ = require ( game . ReplicatedStorage . Rodash ) function onlyLocalPlayerHasSpoon () local playersWithSpoon = _ . filter ( game . Players : GetChildren (), function ( player ) _ . debug ( {} items: {:#?} , _ . len ( player . Backpack : GetChildren ()), player . Backpack ) return _ . some ( player . Backpack , function ( tool ) return _ . endsWith ( tool . Name , Spoon ) end ) end ) return _ . matches ( playersWithSpoon , { game . Players . LocalPlayer }) end Importing If you prefer not to reuse _ , you can also import the library under a different name, or a specific module: local _r = require(game.ReplicatedStorage.Rodash) local Tables = require(game.ReplicatedStorage.Rodash.Tables) Design Principles The Rodash design principles make it quick and easy to use the library to write concise operations, or incrementally simplify existing Roblox code. Functions: Avoid abstractions , working on native lua types to avoid enforcing specific coding styles Only do one thing by avoiding parameter overloading or flags Enforce type safety to avoid silent error propagation Avoid duplication , mimicking existing functionality or aliasing other functions Maintain backwards compatibility with older versions of the library Installation There are currently two ways to install Rodash: Method 1. Model File (Roblox Studio) Download the rbxm model from the Github releases page . Insert the module into Studio and place it in ReplicatedStorage Method 2. Filesystem Clone this repo using git clone git@github.com:CodeKingdomsTeam/rodash.git in a suitable directory Rename the src folder to Robase Use rojo to sync the files into a place Discussion If you have any queries or feedback, please join the discussion on the Studio+ discord server!","title":"Home"},{"location":"#usage","text":"local _ = require ( game . ReplicatedStorage . Rodash ) function onlyLocalPlayerHasSpoon () local playersWithSpoon = _ . filter ( game . Players : GetChildren (), function ( player ) _ . debug ( {} items: {:#?} , _ . len ( player . Backpack : GetChildren ()), player . Backpack ) return _ . some ( player . Backpack , function ( tool ) return _ . endsWith ( tool . Name , Spoon ) end ) end ) return _ . matches ( playersWithSpoon , { game . Players . LocalPlayer }) end","title":"Usage"},{"location":"#importing","text":"If you prefer not to reuse _ , you can also import the library under a different name, or a specific module: local _r = require(game.ReplicatedStorage.Rodash) local Tables = require(game.ReplicatedStorage.Rodash.Tables)","title":"Importing"},{"location":"#design-principles","text":"The Rodash design principles make it quick and easy to use the library to write concise operations, or incrementally simplify existing Roblox code. Functions: Avoid abstractions , working on native lua types to avoid enforcing specific coding styles Only do one thing by avoiding parameter overloading or flags Enforce type safety to avoid silent error propagation Avoid duplication , mimicking existing functionality or aliasing other functions Maintain backwards compatibility with older versions of the library","title":"Design Principles"},{"location":"#installation","text":"There are currently two ways to install Rodash:","title":"Installation"},{"location":"#method-1-model-file-roblox-studio","text":"Download the rbxm model from the Github releases page . Insert the module into Studio and place it in ReplicatedStorage","title":"Method 1. Model File (Roblox Studio)"},{"location":"#method-2-filesystem","text":"Clone this repo using git clone git@github.com:CodeKingdomsTeam/rodash.git in a suitable directory Rename the src folder to Robase Use rojo to sync the files into a place","title":"Method 2. Filesystem"},{"location":"#discussion","text":"If you have any queries or feedback, please join the discussion on the Studio+ discord server!","title":"Discussion"},{"location":"api/Async/","text":"Async Building upon the functionality of Roblox Lua Promise and borrowing ideas from Bluebird , these functions improve the experience of working with asynchronous code in Roblox. Functions async function _ . async ( fn ) -- string Returns a promise for a function which may yield. async calls the the function in a coroutine and resolves with the output of the function after any asynchronous actions, and rejects if the function throws an error. Parameters fn - string Returns string Rejects passthrough Examples local fetch = _ . async ( function ( url ) local HttpService = game : GetService ( HttpService ) return HttpService : GetAsync ( url ) end ) _ . props ({ main = fetch ( http://example.com/burger ), side = fetch ( http://example.com/fries ) }): andThen ( function ( meal ) print ( Meal , _ . pretty ( meal )) end ) -- {burger = Cheeseburger , fries = Curly fries } (ideal response) Usage Used alongside promise:await , the _.async function forms an equivalence with the async await pattern in languages like JS. asyncAll function _ . asyncAll ( dictionary ) -- string Wraps any functions in dictionary with _.async , returning a new dictionary containing functions that return promises when called rather than yielding. Parameters dictionary - string Returns string Examples local buyDinner = _ . async ( function () local http = _ . asyncAll ( game : GetService ( HttpService )) local order = _ . props ({ main = http : GetAsync ( http://example.com/burger ), side = http : GetAsync ( http://example.com/fries ) }) return http : PostAsync ( http://example.com/purchase , order : await ()) end ) buyDinner (): await () -- Purchased! (some time later) await function _ . await ( value ) -- string Yields completion of a promise promise:await() , but returns immediately with the value if it isn't a promise. Parameters value - string Returns string Examples local heat = function ( item ) return _ . delay ( 1 ). returns ( hot .. item ) end local recipe = { wrap , heat ( steak ), heat ( rice )} local burrito = _ . map ( recipe , _ . await ) _ . debug ( {:#?} , burrito ) -- { wrap , hot steak , hot rice } (2 seconds) delay function _ . delay ( delayInSeconds ) -- string Returns a promise which resolves after the given delayInSeconds. Parameters delayInSeconds - string Returns string Examples _ . delay ( 1 ): andThen ( function () print ( Delivered ) end ) -- Delivered (1 second later) finally function _ . finally ( promise , fn ) -- string Returns a promise which completes after the promise input has completed, regardless of whether it has resolved or rejected. Parameters promise - string fn - string - function(ok, result) Returns string Examples local getHunger = _ . async ( function ( player ) if player . health == 0 then error ( Player is dead! ) else return game . ReplicatedStorage . GetHunger : InvokeServer ( player ) end end ) local localPlayer = game . Players . LocalPlayer local isHungry = getHunger ( localPlayer ): finally ( function ( isAlive , result ) return isAlive and result 5 end ) never function _ . never () -- string Returns a promise which never resolves or rejects. Returns string Usage Useful in combination with _.race where a resolution or rejection should be ignored. parallel function _ . parallel ( array ) -- string Given an array of values, this function returns a promise which resolves once all of the array elements have resolved, or rejects if any of the array elements reject. Parameters array - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local meal = _ . parallel ({ heat ( cheese ), tomato }) meal : await () -- { hot-cheese , tomato } (1 second later) Usage This function is like Promise.all but allows objects in the array which aren't promises. These are considered resolved immediately. Promises that return nil values will cause the return array to be sparse. props function _ . props ( dictionary ) -- string Given a dictionary of values, this function returns a promise which resolves once all of the values in the dictionary have resolved, or rejects if any of them are promises that reject. Parameters dictionary - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local toastie = _ . props ({ bread = brown , filling = heat ( cheese ) }) toastie : await () -- {bread = brown , filling = hot-cheese } (1 second later) Usage Values which are not promises are considered resolved immediately. race function _ . race ( array , n ) -- string Returns a promise which completes after the first promise in the array input completes, or first n promises if specified. If any promise rejects, race rejects with the first rejection. Parameters array - string n - string - the number of promises required (default = 1) Returns string - an array containing the first n resolutions, in the order that they resolved. Usage OutOfBoundsError - if the number of required promises is greater than the input length. Rejects passthrough Usage Promises which return nil values are ignored due to the in-order constraint. The size of array must be equal to or larger than n . resolve function _ . resolve () -- string Like Promise.resolve but can take any number of arguments. Parameters undefined - string Returns string Examples local function mash ( veg ) return _ . resolve ( mashed , veg ) end mash ( potato ): andThen ( function ( style , veg ) _ . debug ( {} was {} , veg , style ) end ) -- potato was mashed retryWithBackoff function _ . retryWithBackoff ( getPromise , backoffOptions ) -- string Try running a function which returns a promise and retry if the function throws and error or the promise rejects. The retry behaviour can be adapted using backoffOptions, which can customize the maximum number of retries and the backoff timing of the form [0, x^attemptNumber] + y where x is an exponent that produces a random exponential delay and y is a constant delay. Backoff Options Option Type Description maxTries int how many tries (including the first one) the function should be called retryExponentInSeconds number customize the backoff exponent retryConstantInSeconds number customize the backoff constant randomStream Random use a Roblox \"Random\" instance to control the backoff shouldRetry(response) T - bool called if maxTries 1 to determine whether a retry should occur onRetry(waitTime, errorMessage) (number, string) - nil a hook for when a retry is triggered, with the delay before retry and error message which caused the failure onDone(response, durationInSeconds) (T, number) - nil a hook for when the promise resolves onFail(errorMessage) string - nil a hook for when the promise has failed and no more retries are allowed Parameters getPromise - string backoffOptions - string Returns string Rejects passthrough series function _ . series () -- string Like _.compose but takes functions that can return a promise. Returns a promise that resolves once all functions have resolved. Like compose, functions receive the resolution of the previous promise as argument(s). Parameters undefined - string Returns string Examples local function fry ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( fried .. item )) end local function cheesify ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( cheesy .. item )) end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ): await () -- cheesy fried nachos (after 2s) timeout function _ . timeout ( promise , deadlineInSeconds , timeoutMessage ) -- string Resolves to the result of promise if it resolves before the deadline, otherwise rejects with an error, which can be optionally customized. Parameters promise - string deadlineInSeconds - string timeoutMessage - string - (default = \"TimeoutError\") Returns string Rejects TimeoutError - or timeoutMessage Examples let eatGreens = function () return _ . never end _ . timeout ( eatGreens (), 10 , TasteError ): await () -- throws TasteError (after 10s)","title":"Async"},{"location":"api/Async/#async","text":"Building upon the functionality of Roblox Lua Promise and borrowing ideas from Bluebird , these functions improve the experience of working with asynchronous code in Roblox.","title":"Async"},{"location":"api/Async/#functions","text":"","title":"Functions"},{"location":"api/Async/#async_1","text":"function _ . async ( fn ) -- string Returns a promise for a function which may yield. async calls the the function in a coroutine and resolves with the output of the function after any asynchronous actions, and rejects if the function throws an error. Parameters fn - string Returns string Rejects passthrough Examples local fetch = _ . async ( function ( url ) local HttpService = game : GetService ( HttpService ) return HttpService : GetAsync ( url ) end ) _ . props ({ main = fetch ( http://example.com/burger ), side = fetch ( http://example.com/fries ) }): andThen ( function ( meal ) print ( Meal , _ . pretty ( meal )) end ) -- {burger = Cheeseburger , fries = Curly fries } (ideal response) Usage Used alongside promise:await , the _.async function forms an equivalence with the async await pattern in languages like JS.","title":"async"},{"location":"api/Async/#asyncall","text":"function _ . asyncAll ( dictionary ) -- string Wraps any functions in dictionary with _.async , returning a new dictionary containing functions that return promises when called rather than yielding. Parameters dictionary - string Returns string Examples local buyDinner = _ . async ( function () local http = _ . asyncAll ( game : GetService ( HttpService )) local order = _ . props ({ main = http : GetAsync ( http://example.com/burger ), side = http : GetAsync ( http://example.com/fries ) }) return http : PostAsync ( http://example.com/purchase , order : await ()) end ) buyDinner (): await () -- Purchased! (some time later)","title":"asyncAll"},{"location":"api/Async/#await","text":"function _ . await ( value ) -- string Yields completion of a promise promise:await() , but returns immediately with the value if it isn't a promise. Parameters value - string Returns string Examples local heat = function ( item ) return _ . delay ( 1 ). returns ( hot .. item ) end local recipe = { wrap , heat ( steak ), heat ( rice )} local burrito = _ . map ( recipe , _ . await ) _ . debug ( {:#?} , burrito ) -- { wrap , hot steak , hot rice } (2 seconds)","title":"await"},{"location":"api/Async/#delay","text":"function _ . delay ( delayInSeconds ) -- string Returns a promise which resolves after the given delayInSeconds. Parameters delayInSeconds - string Returns string Examples _ . delay ( 1 ): andThen ( function () print ( Delivered ) end ) -- Delivered (1 second later)","title":"delay"},{"location":"api/Async/#finally","text":"function _ . finally ( promise , fn ) -- string Returns a promise which completes after the promise input has completed, regardless of whether it has resolved or rejected. Parameters promise - string fn - string - function(ok, result) Returns string Examples local getHunger = _ . async ( function ( player ) if player . health == 0 then error ( Player is dead! ) else return game . ReplicatedStorage . GetHunger : InvokeServer ( player ) end end ) local localPlayer = game . Players . LocalPlayer local isHungry = getHunger ( localPlayer ): finally ( function ( isAlive , result ) return isAlive and result 5 end )","title":"finally"},{"location":"api/Async/#never","text":"function _ . never () -- string Returns a promise which never resolves or rejects. Returns string Usage Useful in combination with _.race where a resolution or rejection should be ignored.","title":"never"},{"location":"api/Async/#parallel","text":"function _ . parallel ( array ) -- string Given an array of values, this function returns a promise which resolves once all of the array elements have resolved, or rejects if any of the array elements reject. Parameters array - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local meal = _ . parallel ({ heat ( cheese ), tomato }) meal : await () -- { hot-cheese , tomato } (1 second later) Usage This function is like Promise.all but allows objects in the array which aren't promises. These are considered resolved immediately. Promises that return nil values will cause the return array to be sparse.","title":"parallel"},{"location":"api/Async/#props","text":"function _ . props ( dictionary ) -- string Given a dictionary of values, this function returns a promise which resolves once all of the values in the dictionary have resolved, or rejects if any of them are promises that reject. Parameters dictionary - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = _ . parallel ({ item , _ . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local toastie = _ . props ({ bread = brown , filling = heat ( cheese ) }) toastie : await () -- {bread = brown , filling = hot-cheese } (1 second later) Usage Values which are not promises are considered resolved immediately.","title":"props"},{"location":"api/Async/#race","text":"function _ . race ( array , n ) -- string Returns a promise which completes after the first promise in the array input completes, or first n promises if specified. If any promise rejects, race rejects with the first rejection. Parameters array - string n - string - the number of promises required (default = 1) Returns string - an array containing the first n resolutions, in the order that they resolved. Usage OutOfBoundsError - if the number of required promises is greater than the input length. Rejects passthrough Usage Promises which return nil values are ignored due to the in-order constraint. The size of array must be equal to or larger than n .","title":"race"},{"location":"api/Async/#resolve","text":"function _ . resolve () -- string Like Promise.resolve but can take any number of arguments. Parameters undefined - string Returns string Examples local function mash ( veg ) return _ . resolve ( mashed , veg ) end mash ( potato ): andThen ( function ( style , veg ) _ . debug ( {} was {} , veg , style ) end ) -- potato was mashed","title":"resolve"},{"location":"api/Async/#retrywithbackoff","text":"function _ . retryWithBackoff ( getPromise , backoffOptions ) -- string Try running a function which returns a promise and retry if the function throws and error or the promise rejects. The retry behaviour can be adapted using backoffOptions, which can customize the maximum number of retries and the backoff timing of the form [0, x^attemptNumber] + y where x is an exponent that produces a random exponential delay and y is a constant delay.","title":"retryWithBackoff"},{"location":"api/Async/#backoff-options","text":"Option Type Description maxTries int how many tries (including the first one) the function should be called retryExponentInSeconds number customize the backoff exponent retryConstantInSeconds number customize the backoff constant randomStream Random use a Roblox \"Random\" instance to control the backoff shouldRetry(response) T - bool called if maxTries 1 to determine whether a retry should occur onRetry(waitTime, errorMessage) (number, string) - nil a hook for when a retry is triggered, with the delay before retry and error message which caused the failure onDone(response, durationInSeconds) (T, number) - nil a hook for when the promise resolves onFail(errorMessage) string - nil a hook for when the promise has failed and no more retries are allowed Parameters getPromise - string backoffOptions - string Returns string Rejects passthrough","title":"Backoff Options"},{"location":"api/Async/#series","text":"function _ . series () -- string Like _.compose but takes functions that can return a promise. Returns a promise that resolves once all functions have resolved. Like compose, functions receive the resolution of the previous promise as argument(s). Parameters undefined - string Returns string Examples local function fry ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( fried .. item )) end local function cheesify ( item ) return _ . delay ( 1 ): andThen ( _ . returns ( cheesy .. item )) end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ): await () -- cheesy fried nachos (after 2s)","title":"series"},{"location":"api/Async/#timeout","text":"function _ . timeout ( promise , deadlineInSeconds , timeoutMessage ) -- string Resolves to the result of promise if it resolves before the deadline, otherwise rejects with an error, which can be optionally customized. Parameters promise - string deadlineInSeconds - string timeoutMessage - string - (default = \"TimeoutError\") Returns string Rejects TimeoutError - or timeoutMessage Examples let eatGreens = function () return _ . never end _ . timeout ( eatGreens (), 10 , TasteError ): await () -- throws TasteError (after 10s)","title":"timeout"},{"location":"api/Classes/","text":"Classes Functions applySwitchStrategyForEnum function _ . applySwitchStrategyForEnum ( enum , enumValue , strategies , ) -- string Parameters enum - string enumValue - string strategies - string undefined - string Returns string extend function _ . extend ( name , subConstructor ) -- string Parameters name - string subConstructor - string Returns string extendWithInterface function _ . extendWithInterface ( name , interface ) -- string Parameters name - string interface - string Returns string isA function _ . isA ( instance , classOrEnum ) -- string Parameters instance - string classOrEnum - string Returns string isInstance function _ . isInstance ( value ) -- string Parameters value - string Returns string makeClass function _ . makeClass ( name , constructor ) -- string Parameters name - string constructor - string - undefined Returns string makeClassWithInterface function _ . makeClassWithInterface ( name , interface ) -- string Parameters name - string interface - string Returns string makeEnum function _ . makeEnum ( keys ) -- string Parameters keys - string Returns string makeFinal function _ . makeFinal ( object ) -- string Parameters object - string Returns string makeSymbol function _ . makeSymbol ( name ) -- string Parameters name - string Returns string new function _ . new () -- string Parameters undefined - string Returns string toString function _ . toString () -- string Returns string","title":"Classes"},{"location":"api/Classes/#classes","text":"","title":"Classes"},{"location":"api/Classes/#functions","text":"","title":"Functions"},{"location":"api/Classes/#applyswitchstrategyforenum","text":"function _ . applySwitchStrategyForEnum ( enum , enumValue , strategies , ) -- string Parameters enum - string enumValue - string strategies - string undefined - string Returns string","title":"applySwitchStrategyForEnum"},{"location":"api/Classes/#extend","text":"function _ . extend ( name , subConstructor ) -- string Parameters name - string subConstructor - string Returns string","title":"extend"},{"location":"api/Classes/#extendwithinterface","text":"function _ . extendWithInterface ( name , interface ) -- string Parameters name - string interface - string Returns string","title":"extendWithInterface"},{"location":"api/Classes/#isa","text":"function _ . isA ( instance , classOrEnum ) -- string Parameters instance - string classOrEnum - string Returns string","title":"isA"},{"location":"api/Classes/#isinstance","text":"function _ . isInstance ( value ) -- string Parameters value - string Returns string","title":"isInstance"},{"location":"api/Classes/#makeclass","text":"function _ . makeClass ( name , constructor ) -- string Parameters name - string constructor - string - undefined Returns string","title":"makeClass"},{"location":"api/Classes/#makeclasswithinterface","text":"function _ . makeClassWithInterface ( name , interface ) -- string Parameters name - string interface - string Returns string","title":"makeClassWithInterface"},{"location":"api/Classes/#makeenum","text":"function _ . makeEnum ( keys ) -- string Parameters keys - string Returns string","title":"makeEnum"},{"location":"api/Classes/#makefinal","text":"function _ . makeFinal ( object ) -- string Parameters object - string Returns string","title":"makeFinal"},{"location":"api/Classes/#makesymbol","text":"function _ . makeSymbol ( name ) -- string Parameters name - string Returns string","title":"makeSymbol"},{"location":"api/Classes/#new","text":"function _ . new () -- string Parameters undefined - string Returns string","title":"new"},{"location":"api/Classes/#tostring","text":"function _ . toString () -- string Returns string","title":"toString"},{"location":"api/Functions/","text":"Functions A collection of useful utility functions and building blocks for functional programming styles. Functions bind function _ . bind ( fn , ) -- string Takes a function fn and binds arguments to the head of the fn argument list. Returns a function which executes fn , passing the bound arguments supplied, followed by any dynamic arguments. Parameters fn - string undefined - string Returns string Examples local function damagePlayer ( player , amount ) player : Damage ( amount ) end local damageLocalPlayer = _ . bind ( damagePlayer , game . Players . LocalPlayer ) damageLocalPlayer ( 5 ) Chainable call function _ . call ( subject , fn , ) -- string Calls the supplied fn on the subject and any additional arguments, returing the result. Parameters subject - string fn - string undefined - string Returns string Chainable chain function _ . chain ( fns , actor ) -- string Chain takes an optional dictionary of chainable functions and returns a Chain instance with methods mapped to the input functions. Calling a Chain with a subject reduces the chained operations in order on the subject. The \"Rodash\" chain _.chain(_) is aliased to _.fn . Parameters fns - string actor - string - called for each result in the chain to determine how the next operation should process it. (default = _.invoke ) Returns string Examples -- Get the name of a player local function getName ( player ) return player . Name end ) -- Create a chain that filters for hurt players and finds their name local hurtNames = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ): map ( getName ) -- Run the chain on the current game players hurtNames ( game . Players ) -- { Frodo Baggins , Boromir } -- For fun, let s encapsulate the functionality above by -- defining a chain of operations on players... local players = _ . chain ({ isHurt = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ), -- Filter players by getting their name and checking it ends with Baggins isBaggins = _ . fn : filter ( _ . fn : call ( getName ): endsWith ( Baggins )) }) local hurtHobbits = players : isHurt (): isBaggins () local names = _ . fn : map ( getName ) -- Chains are themselves chainable, so you can compose two chains together local hurtHobbitNames = _ . compose ( hurtHobbits , names ) hurtHobbitNames ( game . Players ) -- { Frodo Baggins } Usage A chained function can be made using _.chain or built inductively using other chained methods of _.fn . chainAsync function _ . chainAsync ( fns , actor ) -- string Like _.chain , but returns a promise, unboxing any returned promises before proceeding. Parameters fns - string actor - string Returns string Chainable compose function _ . compose () -- string Returns a function that calls the argument functions in left-right order, passing the return of the previous function as argument(s) to the next. Parameters undefined - string Returns string Examples local function fry ( item ) return fried .. item end local function cheesify ( item ) return cheesy .. item end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ) -- cheesy fried nachos Usage Useful for when you want to lazily compute something expensive that doesn't change. debounce function _ . debounce ( fn , delayInSeconds ) -- string Creates a debounced function that delays calling fn until after delayInSeconds seconds have elapsed since the last time the debounced function was attempted to be called. Parameters fn - string delayInSeconds - string Returns string - the debounced function with method :clear() can be called on to cancel any scheduled call. Usage A nice visualisation of debounce vs. throttle , the illustrated point being debounce will only call fn at the end of a spurt of events. feed function _ . feed ( fn , ) -- string Takes a chainable function fn and binds arguments to the tail of the fn argument list. Returns a function which executes fn , passing a subject ahead of the bound arguments supplied. Parameters fn - string undefined - string Returns string Examples local isHurt = _ . feed ( _ . filter , function ( player ) return player . Health player . MaxHealth end ) local getName = _ . feed ( _ . map , function ( player ) return player . Name end ) local getHurtNames = _ . compose ( isHurt , getName ) getHurtNames ( game . Players ) -- { Frodo , Boromir } Usage Chainable rodash function feeds are mapped to _.fn , such as _.fn.map(handler) . Chainable id function _ . id () -- string A simple function that does nothing, but returns its input parameters. Parameters undefined - string Returns string invoke function _ . invoke ( fn , ) -- string Calls the supplied fn with the argument tail. Parameters fn - string undefined - string Returns string isCallable function _ . isCallable ( value ) -- string Return true if the value can be called ie. it is function or a table with a __call entry in its metatable. Parameters value - string Returns string Usage In general this is a much more suitable test than checking purely for a function type. memoize function _ . memoize ( fn , serializeArgs ) -- string Like _.once , but caches non-nil results of calls to fn keyed by some serialization of the input arguments to fn . By default, args are serialized simply using tostring . Optionally memoize takes function serializeArgs(args, cache) , a function that should return a string key which a result should be cached at for a given signature. Return nil to avoid caching the result. Parameters fn - string serializeArgs - string - (default = _.serialize ) Returns string - the function with method :clear(...) that resets the cache for the argument specified, or :clearAll() to clear the entire cache. Examples local menu = { soup , bread , butter } local heat = _ . memoize ( function ( index ) return hot ... menu [ index ] end ) heat ( 1 ) -- hot soup menu = { caviar } heat ( 1 ) -- hot soup heat ( 2 ) -- nil menu = { beef , potatoes } heat ( 1 ) -- hot soup heat ( 2 ) -- hot potatoes heat : clear ( 1 ) heat ( 1 ) -- hot beef Usage Use _.serializeDeep or _.chain(_.serializeDeep, depth) for deeper key serialization. noop function _ . noop () -- string A simple function that does nothing, and returns nil. Returns string Usage Shorthand for function() end . once function _ . once ( fn ) -- string Returns a function that when called, only calls fn the first time the function is called. For subsequent calls, the initial return of fn is returned. Parameters fn - string Returns string - the function with method :clear() that resets the cached value. Examples local fry = _ . once ( function ( item ) return fried .. tiem end ) fry ( sardine ) -- fried sardine fry ( squid ) -- fried sardine fry ( owl ) -- fried sardine Usage Useful for when you want to lazily compute something expensive that doesn't change. returns function _ . returns () -- string Returns a function that when called, returns the original input parameters. Parameters undefined - string Returns string Examples findPlayer ( builderman ): andThen ( _ . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones. setInterval function _ . setInterval ( fn , intervalInSeconds , delayInSeconds ) -- string Like _.setTimeout but calls fn after every interval of intervalInSeconds time has passed. Parameters fn - string intervalInSeconds - string delayInSeconds - string - (default = intervalInSeconds ) The delay before the initial fire. Returns string - an instance which :clear() can be called on to prevent fn from firing. setTimeout function _ . setTimeout ( fn , delayInSeconds ) -- string Like delay , this calls fn after delayInSeconds time has passed, with the added benefit of being cancelable. Parameters fn - string delayInSeconds - string Returns string - an instance which :clear() can be called on to prevent fn from firing. throttle function _ . throttle ( fn , cooldownInSeconds ) -- string Creates a throttle function that drops any repeat calls within a cooldown period and instead returns the result of the last call. Parameters fn - string cooldownInSeconds - string Returns string Usage A nice visualisation of debounce vs. throttle , the illustrated point being throttle will call fn every period during a spurt of events. throws function _ . throws ( errorMessage ) -- string Returns a function that when called, throws the original message. Parameters errorMessage - string Returns string Examples findPlayer ( builderman ): andThen ( _ . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones. unary function _ . unary ( fn ) -- string Returns a function that wraps the input fn but only passes the first argument to it. Parameters fn - string Returns string","title":"Functions"},{"location":"api/Functions/#functions","text":"A collection of useful utility functions and building blocks for functional programming styles.","title":"Functions"},{"location":"api/Functions/#functions_1","text":"","title":"Functions"},{"location":"api/Functions/#bind","text":"function _ . bind ( fn , ) -- string Takes a function fn and binds arguments to the head of the fn argument list. Returns a function which executes fn , passing the bound arguments supplied, followed by any dynamic arguments. Parameters fn - string undefined - string Returns string Examples local function damagePlayer ( player , amount ) player : Damage ( amount ) end local damageLocalPlayer = _ . bind ( damagePlayer , game . Players . LocalPlayer ) damageLocalPlayer ( 5 ) Chainable","title":"bind"},{"location":"api/Functions/#call","text":"function _ . call ( subject , fn , ) -- string Calls the supplied fn on the subject and any additional arguments, returing the result. Parameters subject - string fn - string undefined - string Returns string Chainable","title":"call"},{"location":"api/Functions/#chain","text":"function _ . chain ( fns , actor ) -- string Chain takes an optional dictionary of chainable functions and returns a Chain instance with methods mapped to the input functions. Calling a Chain with a subject reduces the chained operations in order on the subject. The \"Rodash\" chain _.chain(_) is aliased to _.fn . Parameters fns - string actor - string - called for each result in the chain to determine how the next operation should process it. (default = _.invoke ) Returns string Examples -- Get the name of a player local function getName ( player ) return player . Name end ) -- Create a chain that filters for hurt players and finds their name local hurtNames = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ): map ( getName ) -- Run the chain on the current game players hurtNames ( game . Players ) -- { Frodo Baggins , Boromir } -- For fun, let s encapsulate the functionality above by -- defining a chain of operations on players... local players = _ . chain ({ isHurt = _ . fn : filter ( function ( player ) return player . Health player . MaxHealth end ), -- Filter players by getting their name and checking it ends with Baggins isBaggins = _ . fn : filter ( _ . fn : call ( getName ): endsWith ( Baggins )) }) local hurtHobbits = players : isHurt (): isBaggins () local names = _ . fn : map ( getName ) -- Chains are themselves chainable, so you can compose two chains together local hurtHobbitNames = _ . compose ( hurtHobbits , names ) hurtHobbitNames ( game . Players ) -- { Frodo Baggins } Usage A chained function can be made using _.chain or built inductively using other chained methods of _.fn .","title":"chain"},{"location":"api/Functions/#chainasync","text":"function _ . chainAsync ( fns , actor ) -- string Like _.chain , but returns a promise, unboxing any returned promises before proceeding. Parameters fns - string actor - string Returns string Chainable","title":"chainAsync"},{"location":"api/Functions/#compose","text":"function _ . compose () -- string Returns a function that calls the argument functions in left-right order, passing the return of the previous function as argument(s) to the next. Parameters undefined - string Returns string Examples local function fry ( item ) return fried .. item end local function cheesify ( item ) return cheesy .. item end local prepare = _ . compose ( fry , cheesify ) prepare ( nachos ) -- cheesy fried nachos Usage Useful for when you want to lazily compute something expensive that doesn't change.","title":"compose"},{"location":"api/Functions/#debounce","text":"function _ . debounce ( fn , delayInSeconds ) -- string Creates a debounced function that delays calling fn until after delayInSeconds seconds have elapsed since the last time the debounced function was attempted to be called. Parameters fn - string delayInSeconds - string Returns string - the debounced function with method :clear() can be called on to cancel any scheduled call. Usage A nice visualisation of debounce vs. throttle , the illustrated point being debounce will only call fn at the end of a spurt of events.","title":"debounce"},{"location":"api/Functions/#feed","text":"function _ . feed ( fn , ) -- string Takes a chainable function fn and binds arguments to the tail of the fn argument list. Returns a function which executes fn , passing a subject ahead of the bound arguments supplied. Parameters fn - string undefined - string Returns string Examples local isHurt = _ . feed ( _ . filter , function ( player ) return player . Health player . MaxHealth end ) local getName = _ . feed ( _ . map , function ( player ) return player . Name end ) local getHurtNames = _ . compose ( isHurt , getName ) getHurtNames ( game . Players ) -- { Frodo , Boromir } Usage Chainable rodash function feeds are mapped to _.fn , such as _.fn.map(handler) . Chainable","title":"feed"},{"location":"api/Functions/#id","text":"function _ . id () -- string A simple function that does nothing, but returns its input parameters. Parameters undefined - string Returns string","title":"id"},{"location":"api/Functions/#invoke","text":"function _ . invoke ( fn , ) -- string Calls the supplied fn with the argument tail. Parameters fn - string undefined - string Returns string","title":"invoke"},{"location":"api/Functions/#iscallable","text":"function _ . isCallable ( value ) -- string Return true if the value can be called ie. it is function or a table with a __call entry in its metatable. Parameters value - string Returns string Usage In general this is a much more suitable test than checking purely for a function type.","title":"isCallable"},{"location":"api/Functions/#memoize","text":"function _ . memoize ( fn , serializeArgs ) -- string Like _.once , but caches non-nil results of calls to fn keyed by some serialization of the input arguments to fn . By default, args are serialized simply using tostring . Optionally memoize takes function serializeArgs(args, cache) , a function that should return a string key which a result should be cached at for a given signature. Return nil to avoid caching the result. Parameters fn - string serializeArgs - string - (default = _.serialize ) Returns string - the function with method :clear(...) that resets the cache for the argument specified, or :clearAll() to clear the entire cache. Examples local menu = { soup , bread , butter } local heat = _ . memoize ( function ( index ) return hot ... menu [ index ] end ) heat ( 1 ) -- hot soup menu = { caviar } heat ( 1 ) -- hot soup heat ( 2 ) -- nil menu = { beef , potatoes } heat ( 1 ) -- hot soup heat ( 2 ) -- hot potatoes heat : clear ( 1 ) heat ( 1 ) -- hot beef Usage Use _.serializeDeep or _.chain(_.serializeDeep, depth) for deeper key serialization.","title":"memoize"},{"location":"api/Functions/#noop","text":"function _ . noop () -- string A simple function that does nothing, and returns nil. Returns string Usage Shorthand for function() end .","title":"noop"},{"location":"api/Functions/#once","text":"function _ . once ( fn ) -- string Returns a function that when called, only calls fn the first time the function is called. For subsequent calls, the initial return of fn is returned. Parameters fn - string Returns string - the function with method :clear() that resets the cached value. Examples local fry = _ . once ( function ( item ) return fried .. tiem end ) fry ( sardine ) -- fried sardine fry ( squid ) -- fried sardine fry ( owl ) -- fried sardine Usage Useful for when you want to lazily compute something expensive that doesn't change.","title":"once"},{"location":"api/Functions/#returns","text":"function _ . returns () -- string Returns a function that when called, returns the original input parameters. Parameters undefined - string Returns string Examples findPlayer ( builderman ): andThen ( _ . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones.","title":"returns"},{"location":"api/Functions/#setinterval","text":"function _ . setInterval ( fn , intervalInSeconds , delayInSeconds ) -- string Like _.setTimeout but calls fn after every interval of intervalInSeconds time has passed. Parameters fn - string intervalInSeconds - string delayInSeconds - string - (default = intervalInSeconds ) The delay before the initial fire. Returns string - an instance which :clear() can be called on to prevent fn from firing.","title":"setInterval"},{"location":"api/Functions/#settimeout","text":"function _ . setTimeout ( fn , delayInSeconds ) -- string Like delay , this calls fn after delayInSeconds time has passed, with the added benefit of being cancelable. Parameters fn - string delayInSeconds - string Returns string - an instance which :clear() can be called on to prevent fn from firing.","title":"setTimeout"},{"location":"api/Functions/#throttle","text":"function _ . throttle ( fn , cooldownInSeconds ) -- string Creates a throttle function that drops any repeat calls within a cooldown period and instead returns the result of the last call. Parameters fn - string cooldownInSeconds - string Returns string Usage A nice visualisation of debounce vs. throttle , the illustrated point being throttle will call fn every period during a spurt of events.","title":"throttle"},{"location":"api/Functions/#throws","text":"function _ . throws ( errorMessage ) -- string Returns a function that when called, throws the original message. Parameters errorMessage - string Returns string Examples findPlayer ( builderman ): andThen ( _ . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones.","title":"throws"},{"location":"api/Functions/#unary","text":"function _ . unary ( fn ) -- string Returns a function that wraps the input fn but only passes the first argument to it. Parameters fn - string Returns string","title":"unary"},{"location":"api/Strings/","text":"Strings Useful functions to manipulate strings, based on similar implementations in other standard libraries. Functions Chainable camelCase function _ . camelCase ( str ) -- string Convert str to camel-case. Parameters str - string Returns string Examples _ . camelCase ( Pepperoni Pizza ) -- pepperoniPizza _ . camelCase ( --pepperoni-pizza-- ) -- pepperoniPizza _ . camelCase ( __PEPPERONI_PIZZA ) -- pepperoniPizza Chainable capitalize function _ . capitalize ( str ) -- string Capitalize the first letter of str . Parameters str - string Returns string Examples _ . capitalize ( hello mould ) -- Hello mould charToHex function _ . charToHex ( char ) -- string Converts char into its hex representation Parameters char - string Returns string Examples _ . charToHex ( _ ) -- %5F debug function _ . debug ( subject , ) -- string This function first calls _.format on the arguments provided and then outputs the response to the debug target, set using _.setDebug . By default, this function does nothing, allowing developers to leave the calls in the source code if that is beneficial. Parameters subject - string - the format match string undefined - string Returns string Usage A common pattern would be to _.setDebug() to alias to print during local development, and call e.g. _.setDebug(_.bind(HttpService.PostAsync, \"https://example.com/log\")) on a production build to allow remote debugging. Chainable decodeHtml function _ . decodeHtml ( str ) -- string The inverse of _.encodeHtml . Converts any encodeHtmld HTML entities in str to their corresponding characters. Parameters str - string Returns string Examples _ . decodeHtml ( #34;Smashed quot; apos;Avocado #39; ) -- [[ Smashed Avocado ]] chainable decodeUrl function _ . decodeUrl ( str ) -- string The inverse of _.encodeUrl Parameters str - string Returns string Examples _ . decodeUrl ( https://Egg+Fried%20Rice!? ) -- https://Egg+Fried Rice!? chainable decodeUrlComponent function _ . decodeUrlComponent ( str ) -- string The inverse of _.encodeUrlComponent Parameters str - string Returns string Examples _ . decodeUrlComponent ( https%3A%2F%2FEgg%2BFried%20Rice!%3F ) -- https://Egg+Fried Rice!? Chainable encodeHtml function _ . encodeHtml ( str ) -- string Converts the characters \"' in str to their corresponding HTML entities. Parameters str - string Returns string Examples _ . encodeHtml ( a Fish Chips /a ) -- lt;a gt;Fish amp; Chips lt;/a gt; encodeQueryString function _ . encodeQueryString ( query ) -- string Takes a query dictionary of key-value pairs and build a query string that can be concatenated to the end of a url. Parameters query - string Returns string Examples Strings . encodeQueryString ({ time = 11 , biscuits = hob nobs , chocolatey = true })) -- ?biscuits=hob+nobs time=11 chocolatey=true chainable encodeUrl function _ . encodeUrl ( str ) -- string Encodes str for use as a url, for example as an entire url. Parameters str - string Returns string Examples _ . encodeUrl ( https://Egg+Fried Rice!? ) -- https://Egg+Fried%20Rice!? chainable encodeUrlComponent function _ . encodeUrlComponent ( str ) -- string Encodes str for use in a url, for example as a query parameter of a url. Parameters str - string Returns string Examples _ . encodeUrlComponent ( https://Egg+Fried Rice!? ) -- https%3A%2F%2FEgg%2BFried%20Rice!%3F Chainable endsWith function _ . endsWith ( str , suffix ) -- string Checks if str ends with the string suffix . Parameters str - string suffix - string Returns string Examples _ . endsWith ( Fun Roblox Games , Games ) -- true _ . endsWith ( Bad Roblox Memes , Games ) -- false format function _ . format ( subject , ) -- string This function is a simpler more powerful version of string.format , inspired by format! in Rust. If an instance has a :format() method, this is used instead, passing the format arguments. {} prints the next variable using or tostring . {:?} prints using _.serializeDeep . {:#?} prints using _.pretty . Parameters subject - string - the format match string undefined - string Returns string hexToChar function _ . hexToChar ( char ) -- string Converts char into its hex representation Parameters char - string Returns string Examples _ . charToHex ( %5F ) -- _ _ . charToHex ( 5F ) -- _ Chainable kebabCase function _ . kebabCase ( str ) -- string Convert str to kebab-case, making all letters lowercase. Parameters str - string Returns string Examples _ . kebabCase ( strongStilton ) -- strong-stilton _ . kebabCase ( Strong Stilton ) -- strong-stilton _ . kebabCase ( __STRONG_STILTON__ ) -- strong-stilton Usage Chain with :upper() if you need an upper kebab-case string. Chainable leftPad function _ . leftPad ( str , length , prefix ) -- string Makes a string of length from str by repeating characters from prefix at the start of the string. Parameters str - string length - string prefix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , 0 ) -- 02 _ . leftPad ( toast , 10 , :) ) -- :):):toast pretty function _ . pretty ( subject , withMetatable ) -- string Pretty-prints the subject and its associated metatable if withMetatable is true Parameters subject - string withMetatable - string - (default = false) Returns string Chainable rightPad function _ . rightPad ( str , length , suffix ) -- string Makes a string of length from str by repeating characters from suffix at the end of the string. Parameters str - string length - string suffix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , ! ) -- 2! _ . leftPad ( toast , 10 , :) ) -- toast:):): setDebug function _ . setDebug ( fn ) -- string Hooks up any debug methods to invoke fn , which by default does nothing. Parameters fn - string - (default = print ) Returns string Chainable snakeCase function _ . snakeCase ( str ) -- string Convert str to snake-case, making all letters uppercase. Parameters str - string Returns string Examples _ . snakeCase ( sweetChickenCurry ) -- SWEET_CHICKEN_CURRY _ . snakeCase ( Sweet Chicken Curry ) -- SWEET_CHICKEN__CURRY _ . snakeCase ( --sweet-chicken--curry-- ) -- SWEET_CHICKEN__CURRY Usage Chain with :lower() if you need a lower snake-case string. Chainable splitByPattern function _ . splitByPattern ( str , delimiter ) -- string Splits str into parts based on a pattern delimiter and returns a table of the parts. Parameters str - string delimiter - string - (default = \"\") Returns string Examples _ . splitByPattern ( rice ) -- { r , i , c , e } _ . splitByPattern ( one.two::flour , [.:] ) -- { one , two , , flour } Usage This method is useful only when you need a pattern as a delimiter. Use the Roblox native string.split if you are splitting on a simple string. Chainable startsWith function _ . startsWith ( str , prefix ) -- string Checks if str starts with the string prefix . Parameters str - string prefix - string Returns string Examples _ . startsWith ( Fun Roblox Games , Fun ) -- true _ . startsWith ( Minecraft Games , Fun ) -- false Chainable titleCase function _ . titleCase ( str ) -- string Convert str to title-case, where the first letter of each word is capitalized. Parameters str - string Returns string Examples _ . titleCase ( jello world ) -- Jello World _ . titleCase ( yellow-jello with_sprinkles ) -- Yellow-jello With_sprinkles _ . titleCase ( yellow jello s don\u2019t mellow ) -- Yellow Jello s Dont\u2019t Mellow Usage Dashes, underscores and apostraphes don't break words. Chainable trim function _ . trim ( str ) -- string Removes any spaces from the start and end of str . Parameters str - string Returns string Examples _ . trim ( roast veg ) -- roast veg","title":"Strings"},{"location":"api/Strings/#strings","text":"Useful functions to manipulate strings, based on similar implementations in other standard libraries.","title":"Strings"},{"location":"api/Strings/#functions","text":"Chainable","title":"Functions"},{"location":"api/Strings/#camelcase","text":"function _ . camelCase ( str ) -- string Convert str to camel-case. Parameters str - string Returns string Examples _ . camelCase ( Pepperoni Pizza ) -- pepperoniPizza _ . camelCase ( --pepperoni-pizza-- ) -- pepperoniPizza _ . camelCase ( __PEPPERONI_PIZZA ) -- pepperoniPizza Chainable","title":"camelCase"},{"location":"api/Strings/#capitalize","text":"function _ . capitalize ( str ) -- string Capitalize the first letter of str . Parameters str - string Returns string Examples _ . capitalize ( hello mould ) -- Hello mould","title":"capitalize"},{"location":"api/Strings/#chartohex","text":"function _ . charToHex ( char ) -- string Converts char into its hex representation Parameters char - string Returns string Examples _ . charToHex ( _ ) -- %5F","title":"charToHex"},{"location":"api/Strings/#debug","text":"function _ . debug ( subject , ) -- string This function first calls _.format on the arguments provided and then outputs the response to the debug target, set using _.setDebug . By default, this function does nothing, allowing developers to leave the calls in the source code if that is beneficial. Parameters subject - string - the format match string undefined - string Returns string Usage A common pattern would be to _.setDebug() to alias to print during local development, and call e.g. _.setDebug(_.bind(HttpService.PostAsync, \"https://example.com/log\")) on a production build to allow remote debugging. Chainable","title":"debug"},{"location":"api/Strings/#decodehtml","text":"function _ . decodeHtml ( str ) -- string The inverse of _.encodeHtml . Converts any encodeHtmld HTML entities in str to their corresponding characters. Parameters str - string Returns string Examples _ . decodeHtml ( #34;Smashed quot; apos;Avocado #39; ) -- [[ Smashed Avocado ]] chainable","title":"decodeHtml"},{"location":"api/Strings/#decodeurl","text":"function _ . decodeUrl ( str ) -- string The inverse of _.encodeUrl Parameters str - string Returns string Examples _ . decodeUrl ( https://Egg+Fried%20Rice!? ) -- https://Egg+Fried Rice!? chainable","title":"decodeUrl"},{"location":"api/Strings/#decodeurlcomponent","text":"function _ . decodeUrlComponent ( str ) -- string The inverse of _.encodeUrlComponent Parameters str - string Returns string Examples _ . decodeUrlComponent ( https%3A%2F%2FEgg%2BFried%20Rice!%3F ) -- https://Egg+Fried Rice!? Chainable","title":"decodeUrlComponent"},{"location":"api/Strings/#encodehtml","text":"function _ . encodeHtml ( str ) -- string Converts the characters \"' in str to their corresponding HTML entities. Parameters str - string Returns string Examples _ . encodeHtml ( a Fish Chips /a ) -- lt;a gt;Fish amp; Chips lt;/a gt;","title":"encodeHtml"},{"location":"api/Strings/#encodequerystring","text":"function _ . encodeQueryString ( query ) -- string Takes a query dictionary of key-value pairs and build a query string that can be concatenated to the end of a url. Parameters query - string Returns string Examples Strings . encodeQueryString ({ time = 11 , biscuits = hob nobs , chocolatey = true })) -- ?biscuits=hob+nobs time=11 chocolatey=true chainable","title":"encodeQueryString"},{"location":"api/Strings/#encodeurl","text":"function _ . encodeUrl ( str ) -- string Encodes str for use as a url, for example as an entire url. Parameters str - string Returns string Examples _ . encodeUrl ( https://Egg+Fried Rice!? ) -- https://Egg+Fried%20Rice!? chainable","title":"encodeUrl"},{"location":"api/Strings/#encodeurlcomponent","text":"function _ . encodeUrlComponent ( str ) -- string Encodes str for use in a url, for example as a query parameter of a url. Parameters str - string Returns string Examples _ . encodeUrlComponent ( https://Egg+Fried Rice!? ) -- https%3A%2F%2FEgg%2BFried%20Rice!%3F Chainable","title":"encodeUrlComponent"},{"location":"api/Strings/#endswith","text":"function _ . endsWith ( str , suffix ) -- string Checks if str ends with the string suffix . Parameters str - string suffix - string Returns string Examples _ . endsWith ( Fun Roblox Games , Games ) -- true _ . endsWith ( Bad Roblox Memes , Games ) -- false","title":"endsWith"},{"location":"api/Strings/#format","text":"function _ . format ( subject , ) -- string This function is a simpler more powerful version of string.format , inspired by format! in Rust. If an instance has a :format() method, this is used instead, passing the format arguments. {} prints the next variable using or tostring . {:?} prints using _.serializeDeep . {:#?} prints using _.pretty . Parameters subject - string - the format match string undefined - string Returns string","title":"format"},{"location":"api/Strings/#hextochar","text":"function _ . hexToChar ( char ) -- string Converts char into its hex representation Parameters char - string Returns string Examples _ . charToHex ( %5F ) -- _ _ . charToHex ( 5F ) -- _ Chainable","title":"hexToChar"},{"location":"api/Strings/#kebabcase","text":"function _ . kebabCase ( str ) -- string Convert str to kebab-case, making all letters lowercase. Parameters str - string Returns string Examples _ . kebabCase ( strongStilton ) -- strong-stilton _ . kebabCase ( Strong Stilton ) -- strong-stilton _ . kebabCase ( __STRONG_STILTON__ ) -- strong-stilton Usage Chain with :upper() if you need an upper kebab-case string. Chainable","title":"kebabCase"},{"location":"api/Strings/#leftpad","text":"function _ . leftPad ( str , length , prefix ) -- string Makes a string of length from str by repeating characters from prefix at the start of the string. Parameters str - string length - string prefix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , 0 ) -- 02 _ . leftPad ( toast , 10 , :) ) -- :):):toast","title":"leftPad"},{"location":"api/Strings/#pretty","text":"function _ . pretty ( subject , withMetatable ) -- string Pretty-prints the subject and its associated metatable if withMetatable is true Parameters subject - string withMetatable - string - (default = false) Returns string Chainable","title":"pretty"},{"location":"api/Strings/#rightpad","text":"function _ . rightPad ( str , length , suffix ) -- string Makes a string of length from str by repeating characters from suffix at the end of the string. Parameters str - string length - string suffix - string - (default = \" \" ) Returns string Examples _ . leftPad ( toast , 6 ) -- toast _ . leftPad ( 2 , 2 , ! ) -- 2! _ . leftPad ( toast , 10 , :) ) -- toast:):):","title":"rightPad"},{"location":"api/Strings/#setdebug","text":"function _ . setDebug ( fn ) -- string Hooks up any debug methods to invoke fn , which by default does nothing. Parameters fn - string - (default = print ) Returns string Chainable","title":"setDebug"},{"location":"api/Strings/#snakecase","text":"function _ . snakeCase ( str ) -- string Convert str to snake-case, making all letters uppercase. Parameters str - string Returns string Examples _ . snakeCase ( sweetChickenCurry ) -- SWEET_CHICKEN_CURRY _ . snakeCase ( Sweet Chicken Curry ) -- SWEET_CHICKEN__CURRY _ . snakeCase ( --sweet-chicken--curry-- ) -- SWEET_CHICKEN__CURRY Usage Chain with :lower() if you need a lower snake-case string. Chainable","title":"snakeCase"},{"location":"api/Strings/#splitbypattern","text":"function _ . splitByPattern ( str , delimiter ) -- string Splits str into parts based on a pattern delimiter and returns a table of the parts. Parameters str - string delimiter - string - (default = \"\") Returns string Examples _ . splitByPattern ( rice ) -- { r , i , c , e } _ . splitByPattern ( one.two::flour , [.:] ) -- { one , two , , flour } Usage This method is useful only when you need a pattern as a delimiter. Use the Roblox native string.split if you are splitting on a simple string. Chainable","title":"splitByPattern"},{"location":"api/Strings/#startswith","text":"function _ . startsWith ( str , prefix ) -- string Checks if str starts with the string prefix . Parameters str - string prefix - string Returns string Examples _ . startsWith ( Fun Roblox Games , Fun ) -- true _ . startsWith ( Minecraft Games , Fun ) -- false Chainable","title":"startsWith"},{"location":"api/Strings/#titlecase","text":"function _ . titleCase ( str ) -- string Convert str to title-case, where the first letter of each word is capitalized. Parameters str - string Returns string Examples _ . titleCase ( jello world ) -- Jello World _ . titleCase ( yellow-jello with_sprinkles ) -- Yellow-jello With_sprinkles _ . titleCase ( yellow jello s don\u2019t mellow ) -- Yellow Jello s Dont\u2019t Mellow Usage Dashes, underscores and apostraphes don't break words. Chainable","title":"titleCase"},{"location":"api/Strings/#trim","text":"function _ . trim ( str ) -- string Removes any spaces from the start and end of str . Parameters str - string Returns string Examples _ . trim ( roast veg ) -- roast veg","title":"trim"},{"location":"api/Tables/","text":"Tables Tables is a library to handle tables. There are some reasons for this: Great docs Some custom Examples For example: There are two ways to do this Right? Functions all function _ . all ( source , handler ) -- string Wow Parameters source - string handler - string Returns string any function _ . any ( source , handler ) -- string Parameters source - string handler - string Returns string append function _ . append () -- string Parameters undefined - string Returns string assign function _ . assign ( target , ) -- string Parameters target - string undefined - string Returns string clone function _ . clone ( tbl ) -- string Parameters tbl - string Returns string compact function _ . compact ( source ) -- string Parameters source - string Returns string deepEquals function _ . deepEquals ( a , b ) -- string Parameters a - string b - string Returns string defaults function _ . defaults ( target , ) -- string Parameters target - string undefined - string Returns string entries function _ . entries ( source ) -- string Parameters source - string Returns string filter function _ . filter ( source , handler ) -- string Parameters source - string handler - string Returns string filterKeys function _ . filterKeys ( source , handler ) -- string Parameters source - string handler - string Returns string filterKeysMap function _ . filterKeysMap ( source , handler ) -- string Parameters source - string handler - string Returns string find function _ . find ( source , handler ) -- string Parameters source - string handler - string Returns string findKey function _ . findKey ( source , handler ) -- string Parameters source - string handler - string Returns string flatMap function _ . flatMap ( source , handler ) -- string Parameters source - string handler - string Returns string groupBy function _ . groupBy ( source , handler ) -- string Summary ends with a period. This extracts the shortest common substring from the strings s1 and s2 function M.common_substring(s1,s2) several lines. Parameters source - string handler - string Returns string includes function _ . includes ( source , item ) -- string Parameters source - string item - string Returns string insertMany function _ . insertMany ( target , items ) -- string Parameters target - string items - string Returns string invert function _ . invert ( source ) -- string Parameters source - string Returns string isOrdered function _ . isOrdered ( source ) -- string Parameters source - string Returns string isSubset function _ . isSubset ( a , b ) -- string Parameters a - string b - string Returns string keyBy function _ . keyBy ( source , handler ) -- string Parameters source - string handler - string Returns string keyOf function _ . keyOf ( source , value ) -- string Parameters source - string value - string Returns string keys function _ . keys ( source ) -- string Parameters source - string Returns string len function _ . len ( table ) -- string Parameters table - string Returns string map function _ . map ( source , handler ) -- string Parameters source - string handler - string Returns string mapKeys function _ . mapKeys ( source , handler ) -- string Parameters source - string handler - string Returns string mapValues function _ . mapValues ( source , handler ) -- string Parameters source - string handler - string Returns string merge function _ . merge ( target , ) -- string Parameters target - string undefined - string Returns string omitBy function _ . omitBy ( source , handler ) -- string Parameters source - string handler - string Returns string reduce function _ . reduce ( source , handler , init ) -- string Parameters source - string handler - string init - string Returns string reverse function _ . reverse ( source ) -- string Summary ends with a period. Some description, can be over several lines. local test = {} Parameters source - string Returns string serialize function _ . serialize ( source , serializer ) -- string Parameters source - string serializer - string Returns string shallowEqual function _ . shallowEqual ( left , right ) -- string Based on https://developmentarc.gitbooks.io/react-indepth/content/life_cycle/update/using_should_component_update.html Parameters left - string right - string Returns string shuffle function _ . shuffle ( source ) -- string Parameters source - string Returns string slice function _ . slice ( source , first , last , step ) -- string Parameters source - string first - string last - string step - string Returns string sort function _ . sort ( input , comparator ) -- string Parameters input - string comparator - string Returns string sum function _ . sum ( source ) -- string Parameters source - string Returns string values function _ . values ( source ) -- string Parameters source - string Returns string without function _ . without ( source , element ) -- string Parameters source - string element - string Returns string","title":"Tables"},{"location":"api/Tables/#tables","text":"Tables is a library to handle tables. There are some reasons for this: Great docs Some custom","title":"Tables"},{"location":"api/Tables/#examples","text":"For example: There are two ways to do this Right?","title":"Examples"},{"location":"api/Tables/#functions","text":"","title":"Functions"},{"location":"api/Tables/#all","text":"function _ . all ( source , handler ) -- string Wow Parameters source - string handler - string Returns string","title":"all"},{"location":"api/Tables/#any","text":"function _ . any ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"any"},{"location":"api/Tables/#append","text":"function _ . append () -- string Parameters undefined - string Returns string","title":"append"},{"location":"api/Tables/#assign","text":"function _ . assign ( target , ) -- string Parameters target - string undefined - string Returns string","title":"assign"},{"location":"api/Tables/#clone","text":"function _ . clone ( tbl ) -- string Parameters tbl - string Returns string","title":"clone"},{"location":"api/Tables/#compact","text":"function _ . compact ( source ) -- string Parameters source - string Returns string","title":"compact"},{"location":"api/Tables/#deepequals","text":"function _ . deepEquals ( a , b ) -- string Parameters a - string b - string Returns string","title":"deepEquals"},{"location":"api/Tables/#defaults","text":"function _ . defaults ( target , ) -- string Parameters target - string undefined - string Returns string","title":"defaults"},{"location":"api/Tables/#entries","text":"function _ . entries ( source ) -- string Parameters source - string Returns string","title":"entries"},{"location":"api/Tables/#filter","text":"function _ . filter ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"filter"},{"location":"api/Tables/#filterkeys","text":"function _ . filterKeys ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"filterKeys"},{"location":"api/Tables/#filterkeysmap","text":"function _ . filterKeysMap ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"filterKeysMap"},{"location":"api/Tables/#find","text":"function _ . find ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"find"},{"location":"api/Tables/#findkey","text":"function _ . findKey ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"findKey"},{"location":"api/Tables/#flatmap","text":"function _ . flatMap ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"flatMap"},{"location":"api/Tables/#groupby","text":"function _ . groupBy ( source , handler ) -- string Summary ends with a period. This extracts the shortest common substring from the strings s1 and s2 function M.common_substring(s1,s2) several lines. Parameters source - string handler - string Returns string","title":"groupBy"},{"location":"api/Tables/#includes","text":"function _ . includes ( source , item ) -- string Parameters source - string item - string Returns string","title":"includes"},{"location":"api/Tables/#insertmany","text":"function _ . insertMany ( target , items ) -- string Parameters target - string items - string Returns string","title":"insertMany"},{"location":"api/Tables/#invert","text":"function _ . invert ( source ) -- string Parameters source - string Returns string","title":"invert"},{"location":"api/Tables/#isordered","text":"function _ . isOrdered ( source ) -- string Parameters source - string Returns string","title":"isOrdered"},{"location":"api/Tables/#issubset","text":"function _ . isSubset ( a , b ) -- string Parameters a - string b - string Returns string","title":"isSubset"},{"location":"api/Tables/#keyby","text":"function _ . keyBy ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"keyBy"},{"location":"api/Tables/#keyof","text":"function _ . keyOf ( source , value ) -- string Parameters source - string value - string Returns string","title":"keyOf"},{"location":"api/Tables/#keys","text":"function _ . keys ( source ) -- string Parameters source - string Returns string","title":"keys"},{"location":"api/Tables/#len","text":"function _ . len ( table ) -- string Parameters table - string Returns string","title":"len"},{"location":"api/Tables/#map","text":"function _ . map ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"map"},{"location":"api/Tables/#mapkeys","text":"function _ . mapKeys ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"mapKeys"},{"location":"api/Tables/#mapvalues","text":"function _ . mapValues ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"mapValues"},{"location":"api/Tables/#merge","text":"function _ . merge ( target , ) -- string Parameters target - string undefined - string Returns string","title":"merge"},{"location":"api/Tables/#omitby","text":"function _ . omitBy ( source , handler ) -- string Parameters source - string handler - string Returns string","title":"omitBy"},{"location":"api/Tables/#reduce","text":"function _ . reduce ( source , handler , init ) -- string Parameters source - string handler - string init - string Returns string","title":"reduce"},{"location":"api/Tables/#reverse","text":"function _ . reverse ( source ) -- string Summary ends with a period. Some description, can be over several lines. local test = {} Parameters source - string Returns string","title":"reverse"},{"location":"api/Tables/#serialize","text":"function _ . serialize ( source , serializer ) -- string Parameters source - string serializer - string Returns string","title":"serialize"},{"location":"api/Tables/#shallowequal","text":"function _ . shallowEqual ( left , right ) -- string Based on https://developmentarc.gitbooks.io/react-indepth/content/life_cycle/update/using_should_component_update.html Parameters left - string right - string Returns string","title":"shallowEqual"},{"location":"api/Tables/#shuffle","text":"function _ . shuffle ( source ) -- string Parameters source - string Returns string","title":"shuffle"},{"location":"api/Tables/#slice","text":"function _ . slice ( source , first , last , step ) -- string Parameters source - string first - string last - string step - string Returns string","title":"slice"},{"location":"api/Tables/#sort","text":"function _ . sort ( input , comparator ) -- string Parameters input - string comparator - string Returns string","title":"sort"},{"location":"api/Tables/#sum","text":"function _ . sum ( source ) -- string Parameters source - string Returns string","title":"sum"},{"location":"api/Tables/#values","text":"function _ . values ( source ) -- string Parameters source - string Returns string","title":"values"},{"location":"api/Tables/#without","text":"function _ . without ( source , element ) -- string Parameters source - string element - string Returns string","title":"without"},{"location":"guide/arrays/","text":"Handling arrays How to Arrays are great!","title":"Arrays"},{"location":"guide/arrays/#handling-arrays","text":"","title":"Handling arrays"},{"location":"guide/arrays/#how-to","text":"Arrays are great!","title":"How to"}]}