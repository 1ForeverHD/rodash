{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rodash is a collection of functions designed to aid everyday game programming in Roblox. It borrows ideas from lodash in JS, some simpler functionality of Penlight and standalone helper scripts in circulation among the Roblox community. See the Getting Started page for examples of how you can use Rodash. Installation Download the latest rbxmx model from the Github releases page . Drag the model file from your Downloads folder into a Roblox Studio project. Open the Packages folder which is created and drag Rodash and its siblings into ReplicatedStorage . Then require Rodash in any of your scripts: local dash = require(game.ReplicatedStorage.Rodash) local list = { cheese } dash.append(list, { nachos }, {}, { chillies , bbq sauce }) list -- { cheese , nachos , chillies , bbq sauce } If you prefer, you can alias specific Rodash functions yourself: local Rodash = require(game.ReplicatedStorage.Rodash) local append = Rodash.append Discussion If you have any queries or feedback, please join the discussion on the Studio+ discord server! Design Principles The Rodash design principles make it quick and easy to use the library to write concise operations, or incrementally simplify existing Roblox code. Functions: Avoid abstractions , working on native lua types to avoid enforcing specific coding styles Only do one thing by avoiding parameter overloading or flags Enforce type safety to avoid silent error propagation Prefer immutability to promote functional design and reduce race conditions Avoid duplication , mimicking existing functionality or aliasing other functions Maintain backwards compatibility with older versions of the library","title":"Home"},{"location":"#installation","text":"Download the latest rbxmx model from the Github releases page . Drag the model file from your Downloads folder into a Roblox Studio project. Open the Packages folder which is created and drag Rodash and its siblings into ReplicatedStorage . Then require Rodash in any of your scripts: local dash = require(game.ReplicatedStorage.Rodash) local list = { cheese } dash.append(list, { nachos }, {}, { chillies , bbq sauce }) list -- { cheese , nachos , chillies , bbq sauce } If you prefer, you can alias specific Rodash functions yourself: local Rodash = require(game.ReplicatedStorage.Rodash) local append = Rodash.append","title":"Installation"},{"location":"#discussion","text":"If you have any queries or feedback, please join the discussion on the Studio+ discord server!","title":"Discussion"},{"location":"#design-principles","text":"The Rodash design principles make it quick and easy to use the library to write concise operations, or incrementally simplify existing Roblox code. Functions: Avoid abstractions , working on native lua types to avoid enforcing specific coding styles Only do one thing by avoiding parameter overloading or flags Enforce type safety to avoid silent error propagation Prefer immutability to promote functional design and reduce race conditions Avoid duplication , mimicking existing functionality or aliasing other functions Maintain backwards compatibility with older versions of the library","title":"Design Principles"},{"location":"getting-started/","text":"To understand how Rodash can be helpful in your game, here is an example code snippet which periodically prints the names of players online. We'll simplify it by using Rodash functions: spawn ( function () while true do local playerNames = {} for player in pairs ( game . Players : GetChildren ()) do table.insert ( playerNames , player . Name ) end local nameList = table.concat ( playerNames , , ) print ( string.format ( Players online = %s: %s ), # playerNames , nameList ) wait ( 1 ) end end ) Running a piece of code periodically is simplest with dash.setInterval : local dash = require ( game . ReplicatedStorage . Rodash ) dash . setInterval ( function () local playerNames = {} for player in pairs ( game . Players : GetChildren ()) do table.insert ( playerNames , player . Name ) end local nameList = table.concat ( playerNames , , ) print ( string.format ( Players online = %s: %s ), # playerNames , nameList ) end ) You can also cancel an interval when you need to, or use dash.setTimeout if you want to run a function after a delay that you can cancel. A cleaner way to get the player names from the list of players is using map : local dash = require ( game . ReplicatedStorage . Rodash ) dash . setInterval ( function () local playerNames = dash . map ( game . Players : GetChildren (), function ( name ) return player . Name end ) local nameList = table.concat ( playerNames , , ) print ( string.format ( Players online = %s: %s ), # playerNames , nameList ) end ) Rodash has lots of different methods to operate on tables and arrays. Some other examples are dash.filter, dash.find, dash.groupBy and dash.slice. You can use common functions which act on a subject by using dash.fn, or you can make your own using dash.chain: local dash = require ( game . ReplicatedStorage . Rodash ) local fn = dash . fn dash . setInterval ( function () local playerNames = dash . map ( game . Players : GetChildren (), fn : get ( Name )) local nameList = table.concat ( playerNames , , ) print ( string.format ( Players online = %s: %s ), # playerNames , nameList ) end , 1 ) It's often useful to separate functions from the data they act on as these can be used in multiple ways. We can make getting the names of some objects a more general function and then call it on the players: local dash = require ( game . ReplicatedStorage . Rodash ) local fn = dash . fn dash . setInterval ( function () local getNames = fn : map ( fn : get ( Name )) local playerNames = getNames ( game . Players : GetChildren ()) local nameList = table.concat ( playerNames , , ) print ( string.format ( Players online = %s: %s ), # playerNames , nameList ) end , 1 ) Rodash dash.format and dash.pretty can be used to quickly print values that you need from Lua. Here, we can quickly get the length of the playerNames array, and then print the array: local dash = require ( game . ReplicatedStorage . Rodash ) local fn = dash . fn dash . setInterval ( function () local getNames = fn : map ( fn : get ( Name )) local playerNames = getNames ( game . Players : GetChildren ()) print ( dash . format ( Players online = {#}: {1:#?} , playerNames )) end , 1 ) For example, this might print Players online = 1: {\"builderman\"} every second.","title":"Getting Started"},{"location":"glossary/","text":"Glossary all any append assign async asyncAll await bind bindTail call camelCase capitalize chain chainFn charToHex class Class.__le Class.__lt Class._init Class.clone Class.equals Class.extend Class.extendWithInterface Class.isInstance Class.new Class.toString classWithInterface clone Cloneable cloneDeep compact compose continue debounce debug decodeHtml decodeUrl decodeUrlComponent decorate deepEqual defaultComparator defaults defaultSerializer delay encodeHtml encodeQueryString encodeUrl encodeUrlComponent endsWith entries enum filter finalize finally find first flatMap format formatValue freeze get groupBy hexToChar id includes invert invoke isA isArray isCallable isEmpty isPromise isSubset iterator kebabCase keyBy keys last leftPad len map mapValues match maybe memoize merge mixin never noop occurences once one parallel parallelAll PartialOrd pretty privatize race reduce resolve retryWithBackoff returns reverse rightPad serialize serializeDeep series set setDebug setInterval setTimeout ShallowEq shallowEqual shuffle slice snakeCase sort splitOn startsWith sum symbol throttle throws timeout titleCase ToString trim unary unique values without","title":"Glossary"},{"location":"glossary/#glossary","text":"all any append assign async asyncAll await bind bindTail call camelCase capitalize chain chainFn charToHex class Class.__le Class.__lt Class._init Class.clone Class.equals Class.extend Class.extendWithInterface Class.isInstance Class.new Class.toString classWithInterface clone Cloneable cloneDeep compact compose continue debounce debug decodeHtml decodeUrl decodeUrlComponent decorate deepEqual defaultComparator defaults defaultSerializer delay encodeHtml encodeQueryString encodeUrl encodeUrlComponent endsWith entries enum filter finalize finally find first flatMap format formatValue freeze get groupBy hexToChar id includes invert invoke isA isArray isCallable isEmpty isPromise isSubset iterator kebabCase keyBy keys last leftPad len map mapValues match maybe memoize merge mixin never noop occurences once one parallel parallelAll PartialOrd pretty privatize race reduce resolve retryWithBackoff returns reverse rightPad serialize serializeDeep series set setDebug setInterval setTimeout ShallowEq shallowEqual shuffle slice snakeCase sort splitOn startsWith sum symbol throttle throws timeout titleCase ToString trim unary unique values without","title":"Glossary"},{"location":"api/Arrays/","text":"Arrays A collection of functions that operate specifically on arrays, defined as tables with just keys 1..n . -- Examples of valid arrays: {} { red , green , blue } { winter , { is = coming }, [ 3 ] = again } { 1966 , nil , nil } -- Examples of invalid arrays: { 1994 , nil , 2002 } { you = { know , nothing }} {[ 5 ] = gold rings } 42 Functions can also iterate over custom iterator functions which provide elements with natural keys 1..n . Functions append function dash . append ( target , ) -- string Inserts into target the elements from all subsequent arguments in order. Parameters target - string undefined - string Returns string Examples dash . append ({}, { 1 , 2 , 3 }, { 4 , 5 , 6 }) -- {1, 2, 3, 4, 5, 6} dash . append ({ 1 , 2 , 3 }) -- {1, 2, 3} local list = { cheese } dash . append ( list , { nachos }, {}, { chillies }) list -- { cheese , nachos , chillies } defaultComparator function dash . defaultComparator ( a , b ) -- string The default comparator is used by dash.sort and can sort elements of different types, in the order: boolean, number, string, function, CFunction, userdata, and table. Elements which cannot be sorted naturally will be sorted by their string value. Parameters a - string b - string Returns string See dash.sort first function dash . first ( source , predicate ) -- string Returns the earliest value from the array that predicate returns true for. If the predicate is not specified, dash.first simply returns the first element of the array. Parameters source - string predicate - string - (default = dash.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } dash . first ( names ) -- Boromir , 1 -- Find a particular value: local firstNameWithF = dash . first ( names , function ( name ) return dash . startsWith ( name , F ) end ) firstNameWithF -- Frodo , 2 -- What about a value whcih doesn t exist? local firstNameWithC = dash . first ( names , function ( name ) return dash . startsWith ( name , C ) end ) firstNameWithC -- nil -- Find the index of a value: local _ , index = dash . first ( names , dash . fn : matches ( Bilbo )) index -- 2 Usage If you need to find a value in a table which isn't an array, use dash.find . See dash.find last function dash . last ( source , predicate ) -- string Returns the last value from the array that predicate returns true for. If the predicate is not specified, dash.last simply returns the last element of the array. Parameters source - string predicate - string - (default = dash.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } dash . last ( names ) -- Bilbo , 3 local lastNameWithB = dash . last ( names , dash . fn : startsWith ( B )) lastNameWithB -- Bilbo , 3 local _ , key = dash . last ( names , dash . fn : matches ( Frodo )) key -- 2 See dash.find dash.first reduce function dash . reduce ( source , handler , initial ) -- string Runs the handler on each element of source in turn, passing the result of the previous call (or initial for the first element) as the first argument, and the current element as a value and key as subsequent arguments. Parameters source - string handler - string initial - string Returns string Examples local sum = dash . reduce ({ 1 , 2 , 3 }, function ( result , value ) return result + value end , 0 ) sum -- 6 local recipe = { first = cheese , second = nachos , third = chillies } local unzipRecipe = dash . reduce ( recipe , function ( result , value , key ) table.insert ( result [ 1 ], key ) table.insert ( result [ 2 ], value ) return result end , {{}, {}}) -- (in some order) unzipRecipe -- {{ first , third , second }, { cheese , chillies , nachos }} reverse function dash . reverse ( source ) -- string Swaps the order of elements in source . Parameters source - string Returns string Examples dash . reverse ({ 1 , 2 , 4 , 3 , 5 }) -- {5, 3, 4, 2, 1} shuffle function dash . shuffle ( source ) -- string Returns a new array with the order of the values from source randomized. Parameters source - string Returns string Examples local teamColors = { red , red , red , blue , blue , blue } -- (in some order) dash . shuffle ( teamColors ) -- { blue , blue , red , blue , red , red } slice function dash . slice ( source , first , last , step ) -- string Returns a copied portion of the source . Parameters source - string first - string - (default = 1) The index of the first element to include. last - string - (default = #source ) The index of the last element to include. step - string - (default = 1) What amount to step the index by during iteration. Returns string Examples dash . slice ({ 10 , 20 , 30 , 40 }) -- {10, 20, 30, 40} dash . slice ({ 10 , 20 , 30 , 40 }, 2 ) -- {20, 30, 40} dash . slice ({ 10 , 20 , 30 , 40 }, 2 , 3 ) -- {20, 30} dash . slice ({ 10 , 20 , 30 , 40 }, 2 , 4 , 2 ) -- {20, 40} sort function dash . sort ( input , comparator ) -- string Returns a sorted array from the input array, based on a comparator function. Unlike table.sort , the comparator to dash.sort is optional, but it can also be defined to a numeric weight or nil as well as a boolean. Parameters input - string comparator - string - (optional) should return true or n 0 if the first element should be Returns string Examples dash . sort ({ 2 , 5 , 3 }) -- {2, 3, 5} dash . sort ({ use , the , force , Luke }) -- { Luke , force , the , use } sum function dash . sum ( source ) -- string Sums all the values in the source array. Parameters source - string Returns string Examples dash . sum ({ 1 , 2 , 3 }) -- 6","title":"Arrays"},{"location":"api/Arrays/#arrays","text":"A collection of functions that operate specifically on arrays, defined as tables with just keys 1..n . -- Examples of valid arrays: {} { red , green , blue } { winter , { is = coming }, [ 3 ] = again } { 1966 , nil , nil } -- Examples of invalid arrays: { 1994 , nil , 2002 } { you = { know , nothing }} {[ 5 ] = gold rings } 42 Functions can also iterate over custom iterator functions which provide elements with natural keys 1..n .","title":"Arrays"},{"location":"api/Arrays/#functions","text":"","title":"Functions"},{"location":"api/Arrays/#append","text":"function dash . append ( target , ) -- string Inserts into target the elements from all subsequent arguments in order. Parameters target - string undefined - string Returns string Examples dash . append ({}, { 1 , 2 , 3 }, { 4 , 5 , 6 }) -- {1, 2, 3, 4, 5, 6} dash . append ({ 1 , 2 , 3 }) -- {1, 2, 3} local list = { cheese } dash . append ( list , { nachos }, {}, { chillies }) list -- { cheese , nachos , chillies }","title":"append"},{"location":"api/Arrays/#defaultcomparator","text":"function dash . defaultComparator ( a , b ) -- string The default comparator is used by dash.sort and can sort elements of different types, in the order: boolean, number, string, function, CFunction, userdata, and table. Elements which cannot be sorted naturally will be sorted by their string value. Parameters a - string b - string Returns string See dash.sort","title":"defaultComparator"},{"location":"api/Arrays/#first","text":"function dash . first ( source , predicate ) -- string Returns the earliest value from the array that predicate returns true for. If the predicate is not specified, dash.first simply returns the first element of the array. Parameters source - string predicate - string - (default = dash.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } dash . first ( names ) -- Boromir , 1 -- Find a particular value: local firstNameWithF = dash . first ( names , function ( name ) return dash . startsWith ( name , F ) end ) firstNameWithF -- Frodo , 2 -- What about a value whcih doesn t exist? local firstNameWithC = dash . first ( names , function ( name ) return dash . startsWith ( name , C ) end ) firstNameWithC -- nil -- Find the index of a value: local _ , index = dash . first ( names , dash . fn : matches ( Bilbo )) index -- 2 Usage If you need to find a value in a table which isn't an array, use dash.find . See dash.find","title":"first"},{"location":"api/Arrays/#last","text":"function dash . last ( source , predicate ) -- string Returns the last value from the array that predicate returns true for. If the predicate is not specified, dash.last simply returns the last element of the array. Parameters source - string predicate - string - (default = dash.returns(true) ) Returns string Examples local names = { Boromir , Frodo , Bilbo } dash . last ( names ) -- Bilbo , 3 local lastNameWithB = dash . last ( names , dash . fn : startsWith ( B )) lastNameWithB -- Bilbo , 3 local _ , key = dash . last ( names , dash . fn : matches ( Frodo )) key -- 2 See dash.find dash.first","title":"last"},{"location":"api/Arrays/#reduce","text":"function dash . reduce ( source , handler , initial ) -- string Runs the handler on each element of source in turn, passing the result of the previous call (or initial for the first element) as the first argument, and the current element as a value and key as subsequent arguments. Parameters source - string handler - string initial - string Returns string Examples local sum = dash . reduce ({ 1 , 2 , 3 }, function ( result , value ) return result + value end , 0 ) sum -- 6 local recipe = { first = cheese , second = nachos , third = chillies } local unzipRecipe = dash . reduce ( recipe , function ( result , value , key ) table.insert ( result [ 1 ], key ) table.insert ( result [ 2 ], value ) return result end , {{}, {}}) -- (in some order) unzipRecipe -- {{ first , third , second }, { cheese , chillies , nachos }}","title":"reduce"},{"location":"api/Arrays/#reverse","text":"function dash . reverse ( source ) -- string Swaps the order of elements in source . Parameters source - string Returns string Examples dash . reverse ({ 1 , 2 , 4 , 3 , 5 }) -- {5, 3, 4, 2, 1}","title":"reverse"},{"location":"api/Arrays/#shuffle","text":"function dash . shuffle ( source ) -- string Returns a new array with the order of the values from source randomized. Parameters source - string Returns string Examples local teamColors = { red , red , red , blue , blue , blue } -- (in some order) dash . shuffle ( teamColors ) -- { blue , blue , red , blue , red , red }","title":"shuffle"},{"location":"api/Arrays/#slice","text":"function dash . slice ( source , first , last , step ) -- string Returns a copied portion of the source . Parameters source - string first - string - (default = 1) The index of the first element to include. last - string - (default = #source ) The index of the last element to include. step - string - (default = 1) What amount to step the index by during iteration. Returns string Examples dash . slice ({ 10 , 20 , 30 , 40 }) -- {10, 20, 30, 40} dash . slice ({ 10 , 20 , 30 , 40 }, 2 ) -- {20, 30, 40} dash . slice ({ 10 , 20 , 30 , 40 }, 2 , 3 ) -- {20, 30} dash . slice ({ 10 , 20 , 30 , 40 }, 2 , 4 , 2 ) -- {20, 40}","title":"slice"},{"location":"api/Arrays/#sort","text":"function dash . sort ( input , comparator ) -- string Returns a sorted array from the input array, based on a comparator function. Unlike table.sort , the comparator to dash.sort is optional, but it can also be defined to a numeric weight or nil as well as a boolean. Parameters input - string comparator - string - (optional) should return true or n 0 if the first element should be Returns string Examples dash . sort ({ 2 , 5 , 3 }) -- {2, 3, 5} dash . sort ({ use , the , force , Luke }) -- { Luke , force , the , use }","title":"sort"},{"location":"api/Arrays/#sum","text":"function dash . sum ( source ) -- string Sums all the values in the source array. Parameters source - string Returns string Examples dash . sum ({ 1 , 2 , 3 }) -- 6","title":"sum"},{"location":"api/Async/","text":"Async Building upon the functionality of Roblox Lua Promise and borrowing ideas from Bluebird , these functions improve the experience of working with asynchronous code in Roblox. Functions async function dash . async ( fn ) -- string Wraps a function which may yield in a promise. When run, async calls the the function in a coroutine and resolves with the output of the function after any asynchronous actions, and rejects if the function throws an error. Parameters fn - string Returns string Rejects passthrough Examples local fetch = dash . async ( function ( url ) local HttpService = game : GetService ( HttpService ) return HttpService : GetAsync ( url ) end ) dash . parallelAll ({ main = fetch ( http://example.com/burger ), side = fetch ( http://example.com/fries ) }): andThen ( function ( meal ) print ( Meal , dash . pretty ( meal )) end ) -- Meal {burger = Cheeseburger , fries = Curly fries } (ideal response) Usage With promise:await the dash.async function can be used just like the async-await pattern in languages like JS. asyncAll function dash . asyncAll ( dictionary ) -- string Wraps any functions in dictionary with dash.async , returning a new dictionary containing functions that return promises when called rather than yielding. Parameters dictionary - string Returns string Examples local buyDinner = dash . async ( function () local http = dash . asyncAll ( game : GetService ( HttpService )) local order = dash . parallelAll ({ main = http : GetAsync ( http://example.com/burger ), side = http : GetAsync ( http://example.com/fries ) }) return http : PostAsync ( http://example.com/purchase , order : await ()) end ) buyDinner (): await () -- Purchased! (some time later) await function dash . await ( value ) -- string Yields completion of a promise promise:await() , but returns immediately with the value if it isn't a promise. Parameters value - string Returns string Examples local heat = function ( item ) return dash . delay ( 1 ). returns ( hot .. item ) end local recipe = { wrap , heat ( steak ), heat ( rice )} local burrito = dash . map ( recipe , dash . await ) dash . debug ( {:#?} , burrito ) -- { wrap , hot steak , hot rice } (2 seconds) delay function dash . delay ( delayInSeconds ) -- string Returns a promise which resolves after the given delayInSeconds. Parameters delayInSeconds - string Returns string Examples dash . delay ( 1 ): andThen ( function () print ( Delivered ) end ) -- Delivered (1 second later) finally function dash . finally ( promise , fn ) -- string Returns a promise which completes after the promise input has completed, regardless of whether it has resolved or rejected. Parameters promise - string fn - string - function(ok, result) Returns string Examples local getHunger = dash . async ( function ( player ) if player . health == 0 then error ( Player is dead! ) else return game . ReplicatedStorage . GetHunger : InvokeServer ( player ) end end ) local localPlayer = game . Players . LocalPlayer local isHungry = getHunger ( localPlayer ): finally ( function ( isAlive , result ) return isAlive and result 5 end ) isPromise function dash . isPromise ( value ) -- string Wraps Promise.is but catches any errors thrown in attempting to ascertain if value is a promise, which will occur if the value throws when trying to access missing keys. Parameters value - string Returns string never function dash . never () -- string Returns a promise which never resolves or rejects. Returns string Usage Useful in combination with dash.race where a resolution or rejection should be ignored. parallel function dash . parallel ( array ) -- string Given an array of values, this function returns a promise which resolves once all of the array elements have resolved, or rejects if any of the array elements reject. Parameters array - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = dash . parallel ({ item , dash . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local meal = dash . parallel ({ heat ( cheese ), tomato }) meal : await () -- { hot-cheese , tomato } (1 second later) Usage This function is like Promise.all but allows objects in the array which aren't promises. These are considered resolved immediately. Promises that return nil values will cause the return array to be sparse. parallelAll function dash . parallelAll ( dictionary ) -- string Given a dictionary of values, this function returns a promise which resolves once all of the values in the dictionary have resolved, or rejects if any of them are promises that reject. Parameters dictionary - string Returns string - a dictionary mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = dash . parallel ({ item , dash . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local toastie = dash . parallelAll ({ bread = brown , filling = heat ( cheese ) }) toastie : await () -- {bread = brown , filling = hot-cheese } (1 second later) Usage Values which are not promises are considered resolved immediately. race function dash . race ( array , n ) -- string Returns a promise which completes after the first promise in the array input completes, or first n promises if specified. If any promise rejects, race rejects with the first rejection. Parameters array - string n - string - the number of promises required (default = 1) Returns string - an array containing the first n resolutions, in the order that they resolved. Throws OutOfBoundsError - if the number of required promises is greater than the input length. Rejects passthrough Usage Promises which return nil values are ignored due to the in-order constraint. The size of array must be equal to or larger than n . resolve function dash . resolve () -- string Like Promise.resolve but can take any number of arguments. Parameters undefined - string Returns string Examples local function mash ( veg ) return dash . resolve ( mashed , veg ) end mash ( potato ): andThen ( function ( style , veg ) dash . debug ( {} was {} , veg , style ) end ) -- potato was mashed Usage As dash.resolve(promise) -- promise , this function can also be used to ensure a value is a promise. retryWithBackoff function dash . retryWithBackoff ( getPromise , backoffOptions ) -- string Try running a function which returns a promise and retry if the function throws and error or the promise rejects. The retry behaviour can be adapted using backoffOptions, which can customize the maximum number of retries and the backoff timing of the form [0, x^attemptNumber] + y where x is an exponent that produces a random exponential delay and y is a constant delay. Backoff Options Option Type Description maxTries int how many tries (including the first one) the function should be called retryExponentInSeconds number customize the backoff exponent retryConstantInSeconds number customize the backoff constant randomStream Random use a Roblox \"Random\" instance to control the backoff shouldRetry(response) T - bool called if maxTries 1 to determine whether a retry should occur onRetry(waitTime, errorMessage) (number, string) - nil a hook for when a retry is triggered, with the delay before retry and error message which caused the failure onDone(response, durationInSeconds) (T, number) - nil a hook for when the promise resolves onFail(errorMessage) string - nil a hook for when the promise has failed and no more retries are allowed Parameters getPromise - string backoffOptions - string Returns string Rejects passthrough series function dash . series () -- string Like dash.compose but takes functions that can return a promise. Returns a promise that resolves once all functions have resolved. Like compose, functions receive the resolution of the previous promise as argument(s). Parameters undefined - string Returns string Examples local function fry ( item ) return dash . delay ( 1 ): andThen ( dash . returns ( fried .. item )) end local function cheesify ( item ) return dash . delay ( 1 ): andThen ( dash . returns ( cheesy .. item )) end local prepare = dash . compose ( fry , cheesify ) prepare ( nachos ): await () -- cheesy fried nachos (after 2s) timeout function dash . timeout ( promise , deadlineInSeconds , timeoutMessage ) -- string Resolves to the result of promise if it resolves before the deadline, otherwise rejects with an error, which can be optionally customized. Parameters promise - string deadlineInSeconds - string timeoutMessage - string - (default = \"TimeoutError\") Returns string Rejects TimeoutError - or timeoutMessage Examples let eatGreens = function () return dash . never end dash . timeout ( eatGreens (), 10 , TasteError ): await () -- throws TasteError (after 10s)","title":"Async"},{"location":"api/Async/#async","text":"Building upon the functionality of Roblox Lua Promise and borrowing ideas from Bluebird , these functions improve the experience of working with asynchronous code in Roblox.","title":"Async"},{"location":"api/Async/#functions","text":"","title":"Functions"},{"location":"api/Async/#async_1","text":"function dash . async ( fn ) -- string Wraps a function which may yield in a promise. When run, async calls the the function in a coroutine and resolves with the output of the function after any asynchronous actions, and rejects if the function throws an error. Parameters fn - string Returns string Rejects passthrough Examples local fetch = dash . async ( function ( url ) local HttpService = game : GetService ( HttpService ) return HttpService : GetAsync ( url ) end ) dash . parallelAll ({ main = fetch ( http://example.com/burger ), side = fetch ( http://example.com/fries ) }): andThen ( function ( meal ) print ( Meal , dash . pretty ( meal )) end ) -- Meal {burger = Cheeseburger , fries = Curly fries } (ideal response) Usage With promise:await the dash.async function can be used just like the async-await pattern in languages like JS.","title":"async"},{"location":"api/Async/#asyncall","text":"function dash . asyncAll ( dictionary ) -- string Wraps any functions in dictionary with dash.async , returning a new dictionary containing functions that return promises when called rather than yielding. Parameters dictionary - string Returns string Examples local buyDinner = dash . async ( function () local http = dash . asyncAll ( game : GetService ( HttpService )) local order = dash . parallelAll ({ main = http : GetAsync ( http://example.com/burger ), side = http : GetAsync ( http://example.com/fries ) }) return http : PostAsync ( http://example.com/purchase , order : await ()) end ) buyDinner (): await () -- Purchased! (some time later)","title":"asyncAll"},{"location":"api/Async/#await","text":"function dash . await ( value ) -- string Yields completion of a promise promise:await() , but returns immediately with the value if it isn't a promise. Parameters value - string Returns string Examples local heat = function ( item ) return dash . delay ( 1 ). returns ( hot .. item ) end local recipe = { wrap , heat ( steak ), heat ( rice )} local burrito = dash . map ( recipe , dash . await ) dash . debug ( {:#?} , burrito ) -- { wrap , hot steak , hot rice } (2 seconds)","title":"await"},{"location":"api/Async/#delay","text":"function dash . delay ( delayInSeconds ) -- string Returns a promise which resolves after the given delayInSeconds. Parameters delayInSeconds - string Returns string Examples dash . delay ( 1 ): andThen ( function () print ( Delivered ) end ) -- Delivered (1 second later)","title":"delay"},{"location":"api/Async/#finally","text":"function dash . finally ( promise , fn ) -- string Returns a promise which completes after the promise input has completed, regardless of whether it has resolved or rejected. Parameters promise - string fn - string - function(ok, result) Returns string Examples local getHunger = dash . async ( function ( player ) if player . health == 0 then error ( Player is dead! ) else return game . ReplicatedStorage . GetHunger : InvokeServer ( player ) end end ) local localPlayer = game . Players . LocalPlayer local isHungry = getHunger ( localPlayer ): finally ( function ( isAlive , result ) return isAlive and result 5 end )","title":"finally"},{"location":"api/Async/#ispromise","text":"function dash . isPromise ( value ) -- string Wraps Promise.is but catches any errors thrown in attempting to ascertain if value is a promise, which will occur if the value throws when trying to access missing keys. Parameters value - string Returns string","title":"isPromise"},{"location":"api/Async/#never","text":"function dash . never () -- string Returns a promise which never resolves or rejects. Returns string Usage Useful in combination with dash.race where a resolution or rejection should be ignored.","title":"never"},{"location":"api/Async/#parallel","text":"function dash . parallel ( array ) -- string Given an array of values, this function returns a promise which resolves once all of the array elements have resolved, or rejects if any of the array elements reject. Parameters array - string Returns string - an array mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = dash . parallel ({ item , dash . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local meal = dash . parallel ({ heat ( cheese ), tomato }) meal : await () -- { hot-cheese , tomato } (1 second later) Usage This function is like Promise.all but allows objects in the array which aren't promises. These are considered resolved immediately. Promises that return nil values will cause the return array to be sparse.","title":"parallel"},{"location":"api/Async/#parallelall","text":"function dash . parallelAll ( dictionary ) -- string Given a dictionary of values, this function returns a promise which resolves once all of the values in the dictionary have resolved, or rejects if any of them are promises that reject. Parameters dictionary - string Returns string - a dictionary mapping the input to resolved elements. Rejects passthrough Examples local heat = function ( item ) local oven = dash . parallel ({ item , dash . delay ( 1 )}) return oven : andThen ( function ( result ) return hot- .. result [ 1 ] end ) end local toastie = dash . parallelAll ({ bread = brown , filling = heat ( cheese ) }) toastie : await () -- {bread = brown , filling = hot-cheese } (1 second later) Usage Values which are not promises are considered resolved immediately.","title":"parallelAll"},{"location":"api/Async/#race","text":"function dash . race ( array , n ) -- string Returns a promise which completes after the first promise in the array input completes, or first n promises if specified. If any promise rejects, race rejects with the first rejection. Parameters array - string n - string - the number of promises required (default = 1) Returns string - an array containing the first n resolutions, in the order that they resolved. Throws OutOfBoundsError - if the number of required promises is greater than the input length. Rejects passthrough Usage Promises which return nil values are ignored due to the in-order constraint. The size of array must be equal to or larger than n .","title":"race"},{"location":"api/Async/#resolve","text":"function dash . resolve () -- string Like Promise.resolve but can take any number of arguments. Parameters undefined - string Returns string Examples local function mash ( veg ) return dash . resolve ( mashed , veg ) end mash ( potato ): andThen ( function ( style , veg ) dash . debug ( {} was {} , veg , style ) end ) -- potato was mashed Usage As dash.resolve(promise) -- promise , this function can also be used to ensure a value is a promise.","title":"resolve"},{"location":"api/Async/#retrywithbackoff","text":"function dash . retryWithBackoff ( getPromise , backoffOptions ) -- string Try running a function which returns a promise and retry if the function throws and error or the promise rejects. The retry behaviour can be adapted using backoffOptions, which can customize the maximum number of retries and the backoff timing of the form [0, x^attemptNumber] + y where x is an exponent that produces a random exponential delay and y is a constant delay.","title":"retryWithBackoff"},{"location":"api/Async/#backoff-options","text":"Option Type Description maxTries int how many tries (including the first one) the function should be called retryExponentInSeconds number customize the backoff exponent retryConstantInSeconds number customize the backoff constant randomStream Random use a Roblox \"Random\" instance to control the backoff shouldRetry(response) T - bool called if maxTries 1 to determine whether a retry should occur onRetry(waitTime, errorMessage) (number, string) - nil a hook for when a retry is triggered, with the delay before retry and error message which caused the failure onDone(response, durationInSeconds) (T, number) - nil a hook for when the promise resolves onFail(errorMessage) string - nil a hook for when the promise has failed and no more retries are allowed Parameters getPromise - string backoffOptions - string Returns string Rejects passthrough","title":"Backoff Options"},{"location":"api/Async/#series","text":"function dash . series () -- string Like dash.compose but takes functions that can return a promise. Returns a promise that resolves once all functions have resolved. Like compose, functions receive the resolution of the previous promise as argument(s). Parameters undefined - string Returns string Examples local function fry ( item ) return dash . delay ( 1 ): andThen ( dash . returns ( fried .. item )) end local function cheesify ( item ) return dash . delay ( 1 ): andThen ( dash . returns ( cheesy .. item )) end local prepare = dash . compose ( fry , cheesify ) prepare ( nachos ): await () -- cheesy fried nachos (after 2s)","title":"series"},{"location":"api/Async/#timeout","text":"function dash . timeout ( promise , deadlineInSeconds , timeoutMessage ) -- string Resolves to the result of promise if it resolves before the deadline, otherwise rejects with an error, which can be optionally customized. Parameters promise - string deadlineInSeconds - string timeoutMessage - string - (default = \"TimeoutError\") Returns string Rejects TimeoutError - or timeoutMessage Examples let eatGreens = function () return dash . never end dash . timeout ( eatGreens (), 10 , TasteError ): await () -- throws TasteError (after 10s)","title":"timeout"},{"location":"api/Classes/","text":"Classes These tools provide implementations of and functions for higher-order abstractions such as classes, enumerations and symbols. Functions Cloneable function dash . Cloneable ( Class ) -- string A decorator which derives a :clone() method for the Class that returns a shallow clone of the instance when called that has the same metatable as the instance it is called on. Parameters Class - string Returns string Examples local Car = Classes . class ( Car , function ( speed ) return { speed = speed } end , { dash . Cloneable } ) function Car : brake () self . speed = 0 end local car = Car . new ( 5 ) local carClone = car : clone () print ( carClone . speed ) -- 5 carClone : brake () print ( carClone . speed ) -- 0 print ( car . speed ) -- 5 PartialOrd function dash . PartialOrd ( keys ) -- string A decorator which derives an order for the Class , meaning instances of the class can be compared using , = , and = . To do this, it compares values of the two instances at the same keys, as defined by the order of the keys passed in. Parameters keys - string - (default = a sorted array of all the instance's keys) Returns string Examples local Car = Classes . class ( Car , function ( speed ) return { speed = speed } end , { dash . PartialOrd } ) function Car : brake () self . speed = 0 end local fastCar = Car . new ( 500 ) local fastCar2 = Car . new ( 500 ) local slowCar = Car . new ( 5 ) print ( fastCar == fastCar2 ) -- true print ( fastCar == slowCar ) -- false ShallowEq function dash . ShallowEq ( Class ) -- string A decorator which derives the equality operator for the Class so that any instances of the class which are shallow equal will be considered equal. Parameters Class - string Returns string Examples local Car = Classes . class ( Car , function ( speed ) return { speed = speed } end , { dash . ShallowEq } ) function Car : brake () self . speed = 0 end local fastCar = Car . new ( 500 ) local fastCar2 = Car . new ( 500 ) local slowCar = Car . new ( 5 ) print ( fastCar == fastCar2 ) -- true print ( fastCar == slowCar ) -- false ToString function dash . ToString ( keys ) -- string Parameters keys - string Returns string __le function dash . __le ( other ) -- string Parameters other - string Returns string __le function dash . __le ( other ) -- string Returns true if self is considered less than or equal to other . This replaces the = operator on instances of this class, and can be overridden to provide a custom implementation. Parameters other - string Returns string __lt function dash . __lt ( other ) -- string Parameters other - string Returns string __lt function dash . __lt ( other ) -- string Returns true if self is considered less than other . This replaces the operator on instances of this class, and can be overridden to provide a custom implementation. Parameters other - string Returns string _init function dash . _init () -- string Run after the instance has been properly initialized, allowing methods on the instance to be used. Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . _id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return dash . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Return the id if the instance is represented as a string function Vehicle : toString () return self . _id end local car = Vehicle . new ( 4 ) tostring ( car ) -- #1: 4 wheels class function dash . class ( name , constructor , decorators ) -- string Create a class called name with the specified constructor . The constructor should return a plain table which will be turned into an instance of Class from a call to Class.new(...) . Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional methods and functionality you may need. Specifically you can: Add standard functionality to the class e.g. dash.Cloneable , dash.ShallowEq Mixin an implementation of an interface e.g. dash.mixin( fns ) Decorate fields or functions e.g. dash.decorate(dash.freeze) Parameters name - string constructor - string - (default = dash.returns({}) ) decorators - string - (default = {} ) Returns string Examples -- Create a simple Vehicle class local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) function Vehicle : drive ( speed ) self . speed = speed end -- Create a car instance local car = Vehicle . new ( 4 ) car . wheelCount -- 4 car . speed -- 0 -- Drive the car car : drive ( 10 ) car . speed -- 10 Usage When using Rodash classes, private fields should be prefixed with _ to avoid accidental access. A private field should only be accessed by a method of the class itself, though Rodash does not restrict this in code. Public fields are recommended when there is no complex access logic e.g. position.x See dash.classWithInterface - recommended for providing runtime type-checking. dash.mixin - extend the class with extra methods. dash.decorate - include methods that run when an instance of the class is constructed. classWithInterface function dash . classWithInterface ( name , interface , decorators ) -- string Create a class called name that implements a specific strict interface which is asserted when any instance is created. Instead of using a constructor, an instance is initialized with a table containing the required fields. If an _init method is present on the instance, this is called afterwards, which has the added benefit over a constructor that self and the instance are well-defined. Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional functionality in the same way dash.class does. Parameters name - string interface - string decorators - string Returns string Usage Rodash uses t by Osyris to perform runtime type assertions, which we recommend using during development and production code to catch errors quickly and fail fast. For more information about t , please visit https://github.com/osyrisrblx/t . If you want to instantiate private fields, we recommend using a static factory with a public interface, using dash.privatize if appropriate. See dash.class dash.privatize clone function dash . clone () -- string Returns string decorate function dash . decorate ( fn ) -- string A decorator which runs fn on each instance of the class that is created, returning the result of the function as the class instance. Parameters fn - string Returns string Examples local Frozen = dash . decorate ( dash . freeze ) local StaticCar = dash . class ( StaticCar , function ( speed ) return { speed = speed } end , { Frozen }) function StaticCar : brake () self . speed = 0 end local car = Car . new ( 5 ) print ( car . speed ) -- 5 car : brake () --! ReadonlyKey: s Usage Include the return value of this function in the decorators argument when creating a class. enum function dash . enum ( keys ) -- string Create an enumeration from an array string keys , provided in upper snake-case. An Enum is used when a value should only be one of a limited number of possible states. dash.enum creates a string enum, which uses a name for each state so it is easy to refer to. For ease of use values in the enum are identical to their key. Enums are frozen and will throw if access to a missing key is attempted, helping to eliminate typos. Symbols are not used so that enum values are serializable. Parameters keys - string - provided in upper snake-case. Returns string Examples local TOGGLE = dash . enum ( ON , OFF ) local switch = TOGGLE . ON if switch == TOGGLE . ON then game . Workspace . RoomLight . Brightness = 1 else game . Workspace . RoomLight . Brightness = 0 end See dash.match equals function dash . equals ( other ) -- string Parameters other - string Returns string equals function dash . equals ( other ) -- string Parameters other - string Returns string equals function dash . equals ( other ) -- string Returns true if self is considered equal to other . This replaces the == operator on instances of this class, and can be overridden to provide a custom implementation. Parameters other - string Returns string extend function dash . extend ( name , constructor , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . The super-constructor can be accessed with Class.constructor . Super methods can be accessed using Class.methodName and should be called with self. Parameters name - string constructor - string - undefined decorators - string Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return dash . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Let s make a Car class which has a special way to generate ids local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) -- Uses the super method to generate a car-specific id function Car : _generateId () self . id = dash . format ( Car {} , Vehicle . _generateId ( self )) end local car = Car . new () car . id -- Car #1: 4 wheels extendWithInterface function dash . extendWithInterface ( name , interface , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . Parameters name - string interface - string decorators - string Returns string Examples local Vehicle = dash . classWithInterface ( Vehicle , { speed = t . number , wheelCount = t . number , color : t . string }) local vehicle = Vehicle . new ({ speed = 5 , wheelCount = 4 , color = red }) dash . pretty ( vehicle ) -- Vehicle {speed = 4, wheelCount = 4, color = red } Usage Interfaces currently silently override super interfaces, even if their types are incompatible. Avoid doing this as more advanced type checking may throw if the types do not unify in the future. finalize function dash . finalize ( object ) -- string dash.finalize takes object and makes updating or accessing missing keys throw FinalObject . Parameters object - string Returns string Examples local drink = { mixer = coke , spirit = rum } dash . finalize ( drink ) drink . mixer = soda drink . mixer -- soda print ( drink . syrup ) --! FinalObject: Attempt to read missing key syrup to final object drink . syrup = peach --! FinalObject: Attempt to add key mixer on final object freeze function dash . freeze ( object ) -- string dash.freeze takes object and returns a new read-only version which prevents any values from being changed. Unfortunately you cannot iterate using pairs or ipairs on frozen objects because Lua 5.1 does not support overwriting these in metatables. However, you can use dash.iterator to get an iterator Iterating functions in Rodash such as dash.map , dash.filter etc. can iterate over frozen objects without this. If you want to treat the objects as arrays use dash.iterator(frozenObjet, true) explicitly. Parameters object - string Returns string Examples local drink = dash . freeze ({ mixer = coke , spirit = rum }) print ( drink . mixer ) -- coke drink . mixer = soda --! ReadonlyKey: Attempt to write to a frozen key mixer print ( drink . syrup ) -- nil drink . syrup = peach --! ReadonlyKey: Attempt to write to a frozen key peach See dash.iterator isA function dash . isA ( value , Type ) -- string Returns true if value is an instance of type . Type can currently be either an Enum or a Class table. For instances of classes, dash.isA will also return true if the instance is an instance of any sub-class. The function will catch any errors thrown during this check, returning false if so. Parameters value - string Type - string Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local car = Vehicle . new ( 4 ) Vehicle . isA ( car ) -- true Vehicle . isA ( 5 ) -- false local TOGGLE = dash . enum ( ON , OFF ) TOGGLE . isA ( ON ) -- true TOGGLE . isA ( 5 ) -- false Usage This is useful if you no nothing about value . isInstance function dash . isInstance ( value ) -- string Returns true if value is an instance of Class or any sub-class. Parameters value - string Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) local car = Car . new () car . isInstance ( Car ) -- true car . isInstance ( Vehicle ) -- true car . isInstance ( Bike ) -- false match function dash . match ( enum , strategies ) -- string Given an enum and strategies , a dictionary of functions keyed by enum values, dash.match returns a function that will execute the strategy for any value provided. A strategy for every enum key must be implemented, and this helps prevent missing values from causing problems later on down the line. Parameters enum - string strategies - string Returns string Examples local TOGGLE = dash . enum ( ON , OFF ) local setLightTo = dash . match ( TOGGLE , { ON = function ( light ) light . Brightness = 1 end , OFF = function ( light ) light . Brightness = 0 end }) -- This can be used to turn any light on or off: setLightTo ( TOGGLE . ON , game . Workspace . RoomLight ) -- Light turns on -- But will catch an invalid enum value: setLightTo ( Dim , game . Workspace . RoomLight ) --! BadInput: enumValue must be an instance of enum mixin function dash . mixin ( fns ) -- string A decorator which adds a dictionary of functions to a Class table. Parameters fns - string Returns string Examples local CanBrake = { brake = function ( self ) self . speed = 0 end } local Car = dash . class ( Car , function ( speed ) return { speed = speed } end , { dash . mixin ( CanBrake )}) local car = Car . new ( 5 ) print ( car . speed ) -- 5 car : brake () print ( car . speed ) -- 0 Usage Include the return value of this function in the decorators argument when creating a class. new function dash . new () -- string Return a new instance of the class, passing any arguments to the specified constructor. Parameters undefined - string Returns string new function dash . new () -- string Parameters undefined - string Returns string symbol function dash . symbol ( name ) -- string Create a symbol with a specified name . Symbols are useful when you want a value that isn't equal to any other type, for example if you want to store a unique property on an object that won't be accidentally accessed with a simple string lookup. Parameters name - string Returns string toString function dash . toString () -- string Return a string representation of the instance. By default this is the name field (or the Class name if this is not defined), but the method can be overridden. Returns string toString function dash . toString () -- string Returns string","title":"Classes"},{"location":"api/Classes/#classes","text":"These tools provide implementations of and functions for higher-order abstractions such as classes, enumerations and symbols.","title":"Classes"},{"location":"api/Classes/#functions","text":"","title":"Functions"},{"location":"api/Classes/#cloneable","text":"function dash . Cloneable ( Class ) -- string A decorator which derives a :clone() method for the Class that returns a shallow clone of the instance when called that has the same metatable as the instance it is called on. Parameters Class - string Returns string Examples local Car = Classes . class ( Car , function ( speed ) return { speed = speed } end , { dash . Cloneable } ) function Car : brake () self . speed = 0 end local car = Car . new ( 5 ) local carClone = car : clone () print ( carClone . speed ) -- 5 carClone : brake () print ( carClone . speed ) -- 0 print ( car . speed ) -- 5","title":"Cloneable"},{"location":"api/Classes/#partialord","text":"function dash . PartialOrd ( keys ) -- string A decorator which derives an order for the Class , meaning instances of the class can be compared using , = , and = . To do this, it compares values of the two instances at the same keys, as defined by the order of the keys passed in. Parameters keys - string - (default = a sorted array of all the instance's keys) Returns string Examples local Car = Classes . class ( Car , function ( speed ) return { speed = speed } end , { dash . PartialOrd } ) function Car : brake () self . speed = 0 end local fastCar = Car . new ( 500 ) local fastCar2 = Car . new ( 500 ) local slowCar = Car . new ( 5 ) print ( fastCar == fastCar2 ) -- true print ( fastCar == slowCar ) -- false","title":"PartialOrd"},{"location":"api/Classes/#shalloweq","text":"function dash . ShallowEq ( Class ) -- string A decorator which derives the equality operator for the Class so that any instances of the class which are shallow equal will be considered equal. Parameters Class - string Returns string Examples local Car = Classes . class ( Car , function ( speed ) return { speed = speed } end , { dash . ShallowEq } ) function Car : brake () self . speed = 0 end local fastCar = Car . new ( 500 ) local fastCar2 = Car . new ( 500 ) local slowCar = Car . new ( 5 ) print ( fastCar == fastCar2 ) -- true print ( fastCar == slowCar ) -- false","title":"ShallowEq"},{"location":"api/Classes/#tostring","text":"function dash . ToString ( keys ) -- string Parameters keys - string Returns string","title":"ToString"},{"location":"api/Classes/#__le","text":"function dash . __le ( other ) -- string Parameters other - string Returns string","title":"__le"},{"location":"api/Classes/#__le_1","text":"function dash . __le ( other ) -- string Returns true if self is considered less than or equal to other . This replaces the = operator on instances of this class, and can be overridden to provide a custom implementation. Parameters other - string Returns string","title":"__le"},{"location":"api/Classes/#__lt","text":"function dash . __lt ( other ) -- string Parameters other - string Returns string","title":"__lt"},{"location":"api/Classes/#__lt_1","text":"function dash . __lt ( other ) -- string Returns true if self is considered less than other . This replaces the operator on instances of this class, and can be overridden to provide a custom implementation. Parameters other - string Returns string","title":"__lt"},{"location":"api/Classes/#_init","text":"function dash . _init () -- string Run after the instance has been properly initialized, allowing methods on the instance to be used. Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . _id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return dash . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Return the id if the instance is represented as a string function Vehicle : toString () return self . _id end local car = Vehicle . new ( 4 ) tostring ( car ) -- #1: 4 wheels","title":"_init"},{"location":"api/Classes/#class","text":"function dash . class ( name , constructor , decorators ) -- string Create a class called name with the specified constructor . The constructor should return a plain table which will be turned into an instance of Class from a call to Class.new(...) . Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional methods and functionality you may need. Specifically you can: Add standard functionality to the class e.g. dash.Cloneable , dash.ShallowEq Mixin an implementation of an interface e.g. dash.mixin( fns ) Decorate fields or functions e.g. dash.decorate(dash.freeze) Parameters name - string constructor - string - (default = dash.returns({}) ) decorators - string - (default = {} ) Returns string Examples -- Create a simple Vehicle class local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) function Vehicle : drive ( speed ) self . speed = speed end -- Create a car instance local car = Vehicle . new ( 4 ) car . wheelCount -- 4 car . speed -- 0 -- Drive the car car : drive ( 10 ) car . speed -- 10 Usage When using Rodash classes, private fields should be prefixed with _ to avoid accidental access. A private field should only be accessed by a method of the class itself, though Rodash does not restrict this in code. Public fields are recommended when there is no complex access logic e.g. position.x See dash.classWithInterface - recommended for providing runtime type-checking. dash.mixin - extend the class with extra methods. dash.decorate - include methods that run when an instance of the class is constructed.","title":"class"},{"location":"api/Classes/#classwithinterface","text":"function dash . classWithInterface ( name , interface , decorators ) -- string Create a class called name that implements a specific strict interface which is asserted when any instance is created. Instead of using a constructor, an instance is initialized with a table containing the required fields. If an _init method is present on the instance, this is called afterwards, which has the added benefit over a constructor that self and the instance are well-defined. Optionally, you may provide an array of decorators which compose and reduce the Class, adding additional functionality in the same way dash.class does. Parameters name - string interface - string decorators - string Returns string Usage Rodash uses t by Osyris to perform runtime type assertions, which we recommend using during development and production code to catch errors quickly and fail fast. For more information about t , please visit https://github.com/osyrisrblx/t . If you want to instantiate private fields, we recommend using a static factory with a public interface, using dash.privatize if appropriate. See dash.class dash.privatize","title":"classWithInterface"},{"location":"api/Classes/#clone","text":"function dash . clone () -- string Returns string","title":"clone"},{"location":"api/Classes/#decorate","text":"function dash . decorate ( fn ) -- string A decorator which runs fn on each instance of the class that is created, returning the result of the function as the class instance. Parameters fn - string Returns string Examples local Frozen = dash . decorate ( dash . freeze ) local StaticCar = dash . class ( StaticCar , function ( speed ) return { speed = speed } end , { Frozen }) function StaticCar : brake () self . speed = 0 end local car = Car . new ( 5 ) print ( car . speed ) -- 5 car : brake () --! ReadonlyKey: s Usage Include the return value of this function in the decorators argument when creating a class.","title":"decorate"},{"location":"api/Classes/#enum","text":"function dash . enum ( keys ) -- string Create an enumeration from an array string keys , provided in upper snake-case. An Enum is used when a value should only be one of a limited number of possible states. dash.enum creates a string enum, which uses a name for each state so it is easy to refer to. For ease of use values in the enum are identical to their key. Enums are frozen and will throw if access to a missing key is attempted, helping to eliminate typos. Symbols are not used so that enum values are serializable. Parameters keys - string - provided in upper snake-case. Returns string Examples local TOGGLE = dash . enum ( ON , OFF ) local switch = TOGGLE . ON if switch == TOGGLE . ON then game . Workspace . RoomLight . Brightness = 1 else game . Workspace . RoomLight . Brightness = 0 end See dash.match","title":"enum"},{"location":"api/Classes/#equals","text":"function dash . equals ( other ) -- string Parameters other - string Returns string","title":"equals"},{"location":"api/Classes/#equals_1","text":"function dash . equals ( other ) -- string Parameters other - string Returns string","title":"equals"},{"location":"api/Classes/#equals_2","text":"function dash . equals ( other ) -- string Returns true if self is considered equal to other . This replaces the == operator on instances of this class, and can be overridden to provide a custom implementation. Parameters other - string Returns string","title":"equals"},{"location":"api/Classes/#extend","text":"function dash . extend ( name , constructor , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . The super-constructor can be accessed with Class.constructor . Super methods can be accessed using Class.methodName and should be called with self. Parameters name - string constructor - string - undefined decorators - string Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) -- Let s define a static private function to generate a unique id for each vehicle. function Vehicle . _getNextId () Vehicle . _nextId = Vehicle . _nextId + 1 return Vehicle . _nextId end Vehicle . _nextId = 0 -- A general purpose init function may call other helper methods function Vehicle : _init () self . id = self : _generateId () end -- Assign an id to the new instance function Vehicle : _generateId () return dash . format ( #{}: {} wheels , Vehicle . _getNextId (), self . wheelCount ) end -- Let s make a Car class which has a special way to generate ids local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) -- Uses the super method to generate a car-specific id function Car : _generateId () self . id = dash . format ( Car {} , Vehicle . _generateId ( self )) end local car = Car . new () car . id -- Car #1: 4 wheels","title":"extend"},{"location":"api/Classes/#extendwithinterface","text":"function dash . extendWithInterface ( name , interface , decorators ) -- string Create a subclass of Class with a new name that inherits the metatable of Class , optionally overriding the constructor and providing additional decorators . Parameters name - string interface - string decorators - string Returns string Examples local Vehicle = dash . classWithInterface ( Vehicle , { speed = t . number , wheelCount = t . number , color : t . string }) local vehicle = Vehicle . new ({ speed = 5 , wheelCount = 4 , color = red }) dash . pretty ( vehicle ) -- Vehicle {speed = 4, wheelCount = 4, color = red } Usage Interfaces currently silently override super interfaces, even if their types are incompatible. Avoid doing this as more advanced type checking may throw if the types do not unify in the future.","title":"extendWithInterface"},{"location":"api/Classes/#finalize","text":"function dash . finalize ( object ) -- string dash.finalize takes object and makes updating or accessing missing keys throw FinalObject . Parameters object - string Returns string Examples local drink = { mixer = coke , spirit = rum } dash . finalize ( drink ) drink . mixer = soda drink . mixer -- soda print ( drink . syrup ) --! FinalObject: Attempt to read missing key syrup to final object drink . syrup = peach --! FinalObject: Attempt to add key mixer on final object","title":"finalize"},{"location":"api/Classes/#freeze","text":"function dash . freeze ( object ) -- string dash.freeze takes object and returns a new read-only version which prevents any values from being changed. Unfortunately you cannot iterate using pairs or ipairs on frozen objects because Lua 5.1 does not support overwriting these in metatables. However, you can use dash.iterator to get an iterator Iterating functions in Rodash such as dash.map , dash.filter etc. can iterate over frozen objects without this. If you want to treat the objects as arrays use dash.iterator(frozenObjet, true) explicitly. Parameters object - string Returns string Examples local drink = dash . freeze ({ mixer = coke , spirit = rum }) print ( drink . mixer ) -- coke drink . mixer = soda --! ReadonlyKey: Attempt to write to a frozen key mixer print ( drink . syrup ) -- nil drink . syrup = peach --! ReadonlyKey: Attempt to write to a frozen key peach See dash.iterator","title":"freeze"},{"location":"api/Classes/#isa","text":"function dash . isA ( value , Type ) -- string Returns true if value is an instance of type . Type can currently be either an Enum or a Class table. For instances of classes, dash.isA will also return true if the instance is an instance of any sub-class. The function will catch any errors thrown during this check, returning false if so. Parameters value - string Type - string Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local car = Vehicle . new ( 4 ) Vehicle . isA ( car ) -- true Vehicle . isA ( 5 ) -- false local TOGGLE = dash . enum ( ON , OFF ) TOGGLE . isA ( ON ) -- true TOGGLE . isA ( 5 ) -- false Usage This is useful if you no nothing about value .","title":"isA"},{"location":"api/Classes/#isinstance","text":"function dash . isInstance ( value ) -- string Returns true if value is an instance of Class or any sub-class. Parameters value - string Returns string Examples local Vehicle = dash . class ( Vehicle , function ( wheelCount ) return { speed = 0 , wheelCount = wheelCount } end ) local Car = Vehicle : extend ( Vehicle , function () return Vehicle . constructor ( 4 ) end ) local car = Car . new () car . isInstance ( Car ) -- true car . isInstance ( Vehicle ) -- true car . isInstance ( Bike ) -- false","title":"isInstance"},{"location":"api/Classes/#match","text":"function dash . match ( enum , strategies ) -- string Given an enum and strategies , a dictionary of functions keyed by enum values, dash.match returns a function that will execute the strategy for any value provided. A strategy for every enum key must be implemented, and this helps prevent missing values from causing problems later on down the line. Parameters enum - string strategies - string Returns string Examples local TOGGLE = dash . enum ( ON , OFF ) local setLightTo = dash . match ( TOGGLE , { ON = function ( light ) light . Brightness = 1 end , OFF = function ( light ) light . Brightness = 0 end }) -- This can be used to turn any light on or off: setLightTo ( TOGGLE . ON , game . Workspace . RoomLight ) -- Light turns on -- But will catch an invalid enum value: setLightTo ( Dim , game . Workspace . RoomLight ) --! BadInput: enumValue must be an instance of enum","title":"match"},{"location":"api/Classes/#mixin","text":"function dash . mixin ( fns ) -- string A decorator which adds a dictionary of functions to a Class table. Parameters fns - string Returns string Examples local CanBrake = { brake = function ( self ) self . speed = 0 end } local Car = dash . class ( Car , function ( speed ) return { speed = speed } end , { dash . mixin ( CanBrake )}) local car = Car . new ( 5 ) print ( car . speed ) -- 5 car : brake () print ( car . speed ) -- 0 Usage Include the return value of this function in the decorators argument when creating a class.","title":"mixin"},{"location":"api/Classes/#new","text":"function dash . new () -- string Return a new instance of the class, passing any arguments to the specified constructor. Parameters undefined - string Returns string","title":"new"},{"location":"api/Classes/#new_1","text":"function dash . new () -- string Parameters undefined - string Returns string","title":"new"},{"location":"api/Classes/#symbol","text":"function dash . symbol ( name ) -- string Create a symbol with a specified name . Symbols are useful when you want a value that isn't equal to any other type, for example if you want to store a unique property on an object that won't be accidentally accessed with a simple string lookup. Parameters name - string Returns string","title":"symbol"},{"location":"api/Classes/#tostring_1","text":"function dash . toString () -- string Return a string representation of the instance. By default this is the name field (or the Class name if this is not defined), but the method can be overridden. Returns string","title":"toString"},{"location":"api/Classes/#tostring_2","text":"function dash . toString () -- string Returns string","title":"toString"},{"location":"api/Functions/","text":"Functions Utility functions and building blocks for functional programming styles. Functions bind function dash . bind ( fn , ) -- string Takes a function fn and binds arguments to the head of the fn argument list. Returns a function which executes fn , passing the bound arguments supplied, followed by any dynamic arguments. Parameters fn - string undefined - string Returns string Examples local function damagePlayer ( player , amount ) player : Damage ( amount ) end local damageLocalPlayer = dash . bind ( damagePlayer , game . Players . LocalPlayer ) damageLocalPlayer ( 5 ) bindTail function dash . bindTail ( fn , ) -- string Takes a chainable function fn and binds arguments to the tail of the fn argument list. Returns a function which executes fn , passing a subject ahead of the bound arguments supplied. Parameters fn - string undefined - string Returns string Examples local filterHurtPlayers = dash . bindTail ( dash . filter , function ( player ) return player . Health player . MaxHealth end ) local getName = dash . bindTail ( dash . map , function ( player ) return player . Name end ) local filterHurtNames = dash . compose ( filterHurtPlayers , getName ) filterHurtNames ( game . Players ) -- { Frodo , Boromir } Usage Chainable rodash function feeds are mapped to dash.fn , such as dash.fn.map(handler) . Chainable call function dash . call ( subject , fn , ) -- string Calls the supplied fn on the subject and any additional arguments, returing the result., (T, (T, ...A - R), ...A - R) Parameters subject - string fn - string undefined - string Returns string Chainable chain function dash . chain ( fns , actor ) -- string Chain takes a dictionary of chainable functions and returns a Chain instance with methods mapped to the input functions. Chaining is useful when you want to simplify operating on data in a common form and perform sequences of operations on some data with a very concise syntax. An actor function can check the value of the data at each step and change how the chain proceeds. Calling a Chain with a subject reduces the chained operations in order on the subject. Parameters fns - string actor - string - called for each result in the chain to determine how the next operation should process it. (default = dash.invoke ) Returns string Examples -- Define a simple chain that can operate a list of numbers. -- A chain function is called with the subject being processed as first argument, -- and any arguments passed in the chain as subsequent arguments. local numberChain = dash . chain ({ addN = function ( list , n ) return dash . map ( list , function ( element ) return element + n end ) end , sum = function ( list ) return dash . sum ( list ) end }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- Get the name of a player local function getName ( player ) return player . Name end ) -- Create a chain that filters for hurt players and finds their name local filterHurtNames = dash . fn : filter ( function ( player ) return player . Health player . MaxHealth end ): map ( getName ) -- Run the chain on the current game players filterHurtNames ( game . Players ) -- { Frodo Baggins , Boromir } -- For fun, let s encapsulate the functionality above by -- defining a chain of operations on players... local players = dash . chain ({ filterHurtPlayers = dash . fn : filter ( function ( player ) return player . Health player . MaxHealth end ), -- Filter players by getting their name and checking it ends with Baggins filterBaggins = dash . fn : filter ( dash . fn : call ( getName ): endsWith ( Baggins )) }) local hurtHobbits = players : filterHurtPlayers (): filterBaggins () hurtHobbits ( game . Players ) -- {{Name = Frodo Baggins , ...}} local names = dash . fn : map ( getName ) -- Chains are themselves chainable, so you can compose two chains together local filterHurtHobbitNames = dash . compose ( hurtHobbits , names ) filterHurtHobbitNames ( game . Players ) -- { Frodo Baggins } Usage The \"Rodash\" chain: dash.chain(_) is aliased to dash.fn , so instead of writing dash.chain(_):filter you can simply write dash.fn:filter , or any other chainable method. A chained function can be made using dash.chain or built inductively using other chained methods of dash.fn . A chainable method is one that has the subject which is passed through a chain as the first argument, and subsequent arguments See dash.chainFn - Makes a function chainable if it returns a chain. dash.invoke - the identity actor dash.continue - an actor for chains of asynchronous functions dash.maybe - an actor for chains of partial functions chainFn function dash . chainFn ( fn ) -- string Wraps a function, making it chainable if it returns a chain itself. This allows you to define custom functions in terms of the arguments they will take when called in a chain, and return a chained function which performs the operation, rather than explicitly taking the subject as first argument., ((...A - T - R) - T, ...A - R) Parameters fn - string Returns string Examples -- In the chain example addN was defined like so: local function addN ( list , n ) return dash . map ( list , function ( element ) return element + n end ) end numberChain = dash . chain ({ addN = addN }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- It is more natural to define addN as a function taking one argument, -- to match the way it is called in the chain: local function addN ( n ) -- Methods on dash.fn are themselves chained, so list can be dropped. return dash . fn : map ( function ( element ) return element + n end ) end -- The dash.chainFn is used to wrap any functions which return chains. numberChain = dash . chain ({ addN = dash . chainFn ( addN ) }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 See dash.chain Chainable compose function dash . compose () -- string Returns a function that calls the argument functions in left-right order on an input, passing the return of the previous function as argument(s) to the next. Parameters undefined - string Returns string Examples local function fry ( item ) return fried .. item end local function cheesify ( item ) return cheesy .. item end local prepare = dash . compose ( fry , cheesify ) prepare ( nachos ) -- cheesy fried nachos Usage Useful for when you want to lazily compute something expensive that doesn't change. continue function dash . continue ( actor ) -- string An actor getter which awaits on any promises returned by chain methods, and continues execution when the promise completes. This allows any asynchronous methods to be used in chains without modifying any of the chain's synchronous methods, removing any boilerplate needed to handle promises in the main code body. Can wrap any other actor which handles values after any promise resolution. Parameters actor - string - (default = dash.invoke ) The actor to wrap. Returns string Rejects passthrough Examples -- Let s define a function which returns an answer after a delay local getName = function ( player ) return dash . delay ( 1 ): andThen ( dash . returns ( player . Name )) end local players players = dash . chain ( { -- Any chainable function can be used filter = dash . filter , -- A chain which evaluates a promise of the player names mapNames = dash . fn : map ( getName ): parallel (), filterHurt = dash . fn : filter ( function ( player ) return player . Health 100 end ), mapNameIf = dash . chainFn ( function ( expectedName ) -- Methods on self work as expected return players : mapNames (): filter ( dash . fn : endsWith ( expectedName )) end ) }, dash . continue () ) local filterHurtHobbitNames = players : filterHurt (): mapNameIf ( Baggins ) local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Name = Boromir , Health = 0 } } filterHurtHobbitNames ( crew ): await () -- { Frodo Baggins } (some time later) See dash.chain debounce function dash . debounce ( fn , delayInSeconds ) -- string Creates a debounced function that delays calling fn until after delayInSeconds seconds have elapsed since the last time the debounced function was attempted to be called. Parameters fn - string delayInSeconds - string Returns string - the debounced function with method :clear() can be called on to cancel any scheduled call. Usage A nice visualisation of debounce vs. throttle , the illustrated point being debounce will only call fn at the end of a spurt of events. Chainable id function dash . id () -- string A simple function that does nothing, but returns its input parameters. Parameters undefined - string Returns string Usage This is typically referred to as the \"identity\" function. invoke function dash . invoke ( fn , ) -- string An actor which calls the supplied fn with the argument tail. Parameters fn - string undefined - string Returns string Usage This is the default actor for dash.chain and acts as an identity, meaning it has no effect on the result. isCallable function dash . isCallable ( value ) -- string Return true if the value is a function or a table with a __call entry in its metatable. Parameters value - string Returns string Usage This is a more general test than checking purely for a function type. maybe function dash . maybe ( actor ) -- string An actor which cancels execution of a chain if a method returns nil, evaluating the chain as nil. Can wrap any other actor which handles values that are non-nil. Parameters actor - string Returns string Examples -- We can define a chain of Rodash functions that will skip after a nil is returned. local maybeFn = dash . chain ( _ , dash . maybe ()) local getName = function ( player ) return player . Name end local players players = dash . chain ( { -- Any chainable functions can be used call = dash . call , endsWith = dash . endsWith , filterHurt = dash . fn : filter ( function ( player ) return player . Health 100 end ), filterBaggins = dash . chainFn ( function () -- If getName returns nil here, endsWith will be skipped return dash . fn : filter ( maybeFn : call ( getName ): endsWith ( Baggins )) end ) } ) local hurtHobbits = players : filterHurt (): filterBaggins () local mapNames = dash . fn : map ( getName ) local filterHurtBagginsNames = dash . compose ( hurtHobbits , mapNames ) -- Here, one player record doesn t have a Name property, so it is skipped. local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Health = 0 } } memoize function dash . memoize ( fn , serializeArgs ) -- string Like dash.once , but caches non-nil results of calls to fn keyed by some serialization of the input arguments to fn . By default, all the args are serialized simply using tostring . Optionally memoize takes function serializeArgs(args, cache) , a function that should return a string key which a result should be cached at for a given signature. Return nil to avoid caching the result. Parameters fn - string serializeArgs - string - (default = dash.serialize ) Returns string - the function with method :clear(...) that resets the cache for the argument specified, or :clearAll() to clear the entire cache. Examples local menu = { soup , bread , butter } local heat = dash . memoize ( function ( index ) return hot ... menu [ index ] end ) heat ( 1 ) -- hot soup menu = { caviar } heat ( 1 ) -- hot soup heat ( 2 ) -- nil menu = { beef , potatoes } heat ( 1 ) -- hot soup heat ( 2 ) -- hot potatoes heat : clear ( 1 ) heat ( 1 ) -- hot beef See dash.serialize dash.serializeDeep if you want to recursively serialize arguments. noop function dash . noop () -- string A simple function that does nothing, and returns nil. Returns string Usage Shorthand for function() end . Chainable once function dash . once ( fn ) -- string Returns a function that when called, only calls fn the first time the function is called. For subsequent calls, the initial return of fn is returned, even if it is nil . Parameters fn - string Returns string - the function with method :clear() that resets the cached value. Throws passthrough - any error thrown when called will cause nil to cache and pass through the error. Examples local fry = dash . once ( function ( item ) return fried .. tiem end ) fry ( sardine ) -- fried sardine fry ( squid ) -- fried sardine fry : clear () fry ( squid ) -- fried squid fry ( owl ) -- fried squid Usage Useful for when you want to lazily compute something expensive that doesn't change. Chainable returns function dash . returns () -- string Returns a function that when called, returns the original input parameters. Parameters undefined - string Returns string Examples findPlayer ( builderman ): andThen ( dash . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones. setInterval function dash . setInterval ( fn , intervalInSeconds , delayInSeconds ) -- string Like dash.setTimeout but calls fn after every interval of intervalInSeconds time has passed. Parameters fn - string intervalInSeconds - string delayInSeconds - string - (default = intervalInSeconds ) The delay before the initial call. Returns string - an instance which :clear() can be called on to prevent fn from firing. setTimeout function dash . setTimeout ( fn , delayInSeconds ) -- string Like delay , this calls fn after delayInSeconds time has passed, with the added benefit of being cancelable. Parameters fn - string delayInSeconds - string Returns string - an instance which :clear() can be called on to prevent fn from firing. throttle function dash . throttle ( fn , cooldownInSeconds ) -- string Creates a throttle function that drops any repeat calls within a cooldown period and instead returns the result of the last call. Parameters fn - string cooldownInSeconds - string Returns string Usage A nice visualisation of debounce vs. throttle , the illustrated point being throttle will call fn every period during a spurt of events. throws function dash . throws ( errorMessage ) -- string Returns a function that when called, throws the original message. Parameters errorMessage - string Returns string Examples findPlayer ( builderman ): andThen ( dash . throws ( DaveNotFound )) --! DaveNotFound (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones. unary function dash . unary ( fn ) -- string Returns a function that wraps the input fn but only passes the first argument to it. Parameters fn - string Returns string","title":"Functions"},{"location":"api/Functions/#functions","text":"Utility functions and building blocks for functional programming styles.","title":"Functions"},{"location":"api/Functions/#functions_1","text":"","title":"Functions"},{"location":"api/Functions/#bind","text":"function dash . bind ( fn , ) -- string Takes a function fn and binds arguments to the head of the fn argument list. Returns a function which executes fn , passing the bound arguments supplied, followed by any dynamic arguments. Parameters fn - string undefined - string Returns string Examples local function damagePlayer ( player , amount ) player : Damage ( amount ) end local damageLocalPlayer = dash . bind ( damagePlayer , game . Players . LocalPlayer ) damageLocalPlayer ( 5 )","title":"bind"},{"location":"api/Functions/#bindtail","text":"function dash . bindTail ( fn , ) -- string Takes a chainable function fn and binds arguments to the tail of the fn argument list. Returns a function which executes fn , passing a subject ahead of the bound arguments supplied. Parameters fn - string undefined - string Returns string Examples local filterHurtPlayers = dash . bindTail ( dash . filter , function ( player ) return player . Health player . MaxHealth end ) local getName = dash . bindTail ( dash . map , function ( player ) return player . Name end ) local filterHurtNames = dash . compose ( filterHurtPlayers , getName ) filterHurtNames ( game . Players ) -- { Frodo , Boromir } Usage Chainable rodash function feeds are mapped to dash.fn , such as dash.fn.map(handler) . Chainable","title":"bindTail"},{"location":"api/Functions/#call","text":"function dash . call ( subject , fn , ) -- string Calls the supplied fn on the subject and any additional arguments, returing the result., (T, (T, ...A - R), ...A - R) Parameters subject - string fn - string undefined - string Returns string Chainable","title":"call"},{"location":"api/Functions/#chain","text":"function dash . chain ( fns , actor ) -- string Chain takes a dictionary of chainable functions and returns a Chain instance with methods mapped to the input functions. Chaining is useful when you want to simplify operating on data in a common form and perform sequences of operations on some data with a very concise syntax. An actor function can check the value of the data at each step and change how the chain proceeds. Calling a Chain with a subject reduces the chained operations in order on the subject. Parameters fns - string actor - string - called for each result in the chain to determine how the next operation should process it. (default = dash.invoke ) Returns string Examples -- Define a simple chain that can operate a list of numbers. -- A chain function is called with the subject being processed as first argument, -- and any arguments passed in the chain as subsequent arguments. local numberChain = dash . chain ({ addN = function ( list , n ) return dash . map ( list , function ( element ) return element + n end ) end , sum = function ( list ) return dash . sum ( list ) end }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- Get the name of a player local function getName ( player ) return player . Name end ) -- Create a chain that filters for hurt players and finds their name local filterHurtNames = dash . fn : filter ( function ( player ) return player . Health player . MaxHealth end ): map ( getName ) -- Run the chain on the current game players filterHurtNames ( game . Players ) -- { Frodo Baggins , Boromir } -- For fun, let s encapsulate the functionality above by -- defining a chain of operations on players... local players = dash . chain ({ filterHurtPlayers = dash . fn : filter ( function ( player ) return player . Health player . MaxHealth end ), -- Filter players by getting their name and checking it ends with Baggins filterBaggins = dash . fn : filter ( dash . fn : call ( getName ): endsWith ( Baggins )) }) local hurtHobbits = players : filterHurtPlayers (): filterBaggins () hurtHobbits ( game . Players ) -- {{Name = Frodo Baggins , ...}} local names = dash . fn : map ( getName ) -- Chains are themselves chainable, so you can compose two chains together local filterHurtHobbitNames = dash . compose ( hurtHobbits , names ) filterHurtHobbitNames ( game . Players ) -- { Frodo Baggins } Usage The \"Rodash\" chain: dash.chain(_) is aliased to dash.fn , so instead of writing dash.chain(_):filter you can simply write dash.fn:filter , or any other chainable method. A chained function can be made using dash.chain or built inductively using other chained methods of dash.fn . A chainable method is one that has the subject which is passed through a chain as the first argument, and subsequent arguments See dash.chainFn - Makes a function chainable if it returns a chain. dash.invoke - the identity actor dash.continue - an actor for chains of asynchronous functions dash.maybe - an actor for chains of partial functions","title":"chain"},{"location":"api/Functions/#chainfn","text":"function dash . chainFn ( fn ) -- string Wraps a function, making it chainable if it returns a chain itself. This allows you to define custom functions in terms of the arguments they will take when called in a chain, and return a chained function which performs the operation, rather than explicitly taking the subject as first argument., ((...A - T - R) - T, ...A - R) Parameters fn - string Returns string Examples -- In the chain example addN was defined like so: local function addN ( list , n ) return dash . map ( list , function ( element ) return element + n end ) end numberChain = dash . chain ({ addN = addN }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 -- It is more natural to define addN as a function taking one argument, -- to match the way it is called in the chain: local function addN ( n ) -- Methods on dash.fn are themselves chained, so list can be dropped. return dash . fn : map ( function ( element ) return element + n end ) end -- The dash.chainFn is used to wrap any functions which return chains. numberChain = dash . chain ({ addN = dash . chainFn ( addN ) }) local op = numberChain : addN ( 2 ): sum () op ({ 1 , 2 , 3 }) -- 12 See dash.chain Chainable","title":"chainFn"},{"location":"api/Functions/#compose","text":"function dash . compose () -- string Returns a function that calls the argument functions in left-right order on an input, passing the return of the previous function as argument(s) to the next. Parameters undefined - string Returns string Examples local function fry ( item ) return fried .. item end local function cheesify ( item ) return cheesy .. item end local prepare = dash . compose ( fry , cheesify ) prepare ( nachos ) -- cheesy fried nachos Usage Useful for when you want to lazily compute something expensive that doesn't change.","title":"compose"},{"location":"api/Functions/#continue","text":"function dash . continue ( actor ) -- string An actor getter which awaits on any promises returned by chain methods, and continues execution when the promise completes. This allows any asynchronous methods to be used in chains without modifying any of the chain's synchronous methods, removing any boilerplate needed to handle promises in the main code body. Can wrap any other actor which handles values after any promise resolution. Parameters actor - string - (default = dash.invoke ) The actor to wrap. Returns string Rejects passthrough Examples -- Let s define a function which returns an answer after a delay local getName = function ( player ) return dash . delay ( 1 ): andThen ( dash . returns ( player . Name )) end local players players = dash . chain ( { -- Any chainable function can be used filter = dash . filter , -- A chain which evaluates a promise of the player names mapNames = dash . fn : map ( getName ): parallel (), filterHurt = dash . fn : filter ( function ( player ) return player . Health 100 end ), mapNameIf = dash . chainFn ( function ( expectedName ) -- Methods on self work as expected return players : mapNames (): filter ( dash . fn : endsWith ( expectedName )) end ) }, dash . continue () ) local filterHurtHobbitNames = players : filterHurt (): mapNameIf ( Baggins ) local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Name = Boromir , Health = 0 } } filterHurtHobbitNames ( crew ): await () -- { Frodo Baggins } (some time later) See dash.chain","title":"continue"},{"location":"api/Functions/#debounce","text":"function dash . debounce ( fn , delayInSeconds ) -- string Creates a debounced function that delays calling fn until after delayInSeconds seconds have elapsed since the last time the debounced function was attempted to be called. Parameters fn - string delayInSeconds - string Returns string - the debounced function with method :clear() can be called on to cancel any scheduled call. Usage A nice visualisation of debounce vs. throttle , the illustrated point being debounce will only call fn at the end of a spurt of events. Chainable","title":"debounce"},{"location":"api/Functions/#id","text":"function dash . id () -- string A simple function that does nothing, but returns its input parameters. Parameters undefined - string Returns string Usage This is typically referred to as the \"identity\" function.","title":"id"},{"location":"api/Functions/#invoke","text":"function dash . invoke ( fn , ) -- string An actor which calls the supplied fn with the argument tail. Parameters fn - string undefined - string Returns string Usage This is the default actor for dash.chain and acts as an identity, meaning it has no effect on the result.","title":"invoke"},{"location":"api/Functions/#iscallable","text":"function dash . isCallable ( value ) -- string Return true if the value is a function or a table with a __call entry in its metatable. Parameters value - string Returns string Usage This is a more general test than checking purely for a function type.","title":"isCallable"},{"location":"api/Functions/#maybe","text":"function dash . maybe ( actor ) -- string An actor which cancels execution of a chain if a method returns nil, evaluating the chain as nil. Can wrap any other actor which handles values that are non-nil. Parameters actor - string Returns string Examples -- We can define a chain of Rodash functions that will skip after a nil is returned. local maybeFn = dash . chain ( _ , dash . maybe ()) local getName = function ( player ) return player . Name end local players players = dash . chain ( { -- Any chainable functions can be used call = dash . call , endsWith = dash . endsWith , filterHurt = dash . fn : filter ( function ( player ) return player . Health 100 end ), filterBaggins = dash . chainFn ( function () -- If getName returns nil here, endsWith will be skipped return dash . fn : filter ( maybeFn : call ( getName ): endsWith ( Baggins )) end ) } ) local hurtHobbits = players : filterHurt (): filterBaggins () local mapNames = dash . fn : map ( getName ) local filterHurtBagginsNames = dash . compose ( hurtHobbits , mapNames ) -- Here, one player record doesn t have a Name property, so it is skipped. local crew = { { Name = Frodo Baggins , Health = 50 }, { Name = Bilbo Baggins , Health = 100 }, { Health = 0 } }","title":"maybe"},{"location":"api/Functions/#memoize","text":"function dash . memoize ( fn , serializeArgs ) -- string Like dash.once , but caches non-nil results of calls to fn keyed by some serialization of the input arguments to fn . By default, all the args are serialized simply using tostring . Optionally memoize takes function serializeArgs(args, cache) , a function that should return a string key which a result should be cached at for a given signature. Return nil to avoid caching the result. Parameters fn - string serializeArgs - string - (default = dash.serialize ) Returns string - the function with method :clear(...) that resets the cache for the argument specified, or :clearAll() to clear the entire cache. Examples local menu = { soup , bread , butter } local heat = dash . memoize ( function ( index ) return hot ... menu [ index ] end ) heat ( 1 ) -- hot soup menu = { caviar } heat ( 1 ) -- hot soup heat ( 2 ) -- nil menu = { beef , potatoes } heat ( 1 ) -- hot soup heat ( 2 ) -- hot potatoes heat : clear ( 1 ) heat ( 1 ) -- hot beef See dash.serialize dash.serializeDeep if you want to recursively serialize arguments.","title":"memoize"},{"location":"api/Functions/#noop","text":"function dash . noop () -- string A simple function that does nothing, and returns nil. Returns string Usage Shorthand for function() end . Chainable","title":"noop"},{"location":"api/Functions/#once","text":"function dash . once ( fn ) -- string Returns a function that when called, only calls fn the first time the function is called. For subsequent calls, the initial return of fn is returned, even if it is nil . Parameters fn - string Returns string - the function with method :clear() that resets the cached value. Throws passthrough - any error thrown when called will cause nil to cache and pass through the error. Examples local fry = dash . once ( function ( item ) return fried .. tiem end ) fry ( sardine ) -- fried sardine fry ( squid ) -- fried sardine fry : clear () fry ( squid ) -- fried squid fry ( owl ) -- fried squid Usage Useful for when you want to lazily compute something expensive that doesn't change. Chainable","title":"once"},{"location":"api/Functions/#returns","text":"function dash . returns () -- string Returns a function that when called, returns the original input parameters. Parameters undefined - string Returns string Examples findPlayer ( builderman ): andThen ( dash . returns ( Found Dave! )) -- Found Dave! (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones.","title":"returns"},{"location":"api/Functions/#setinterval","text":"function dash . setInterval ( fn , intervalInSeconds , delayInSeconds ) -- string Like dash.setTimeout but calls fn after every interval of intervalInSeconds time has passed. Parameters fn - string intervalInSeconds - string delayInSeconds - string - (default = intervalInSeconds ) The delay before the initial call. Returns string - an instance which :clear() can be called on to prevent fn from firing.","title":"setInterval"},{"location":"api/Functions/#settimeout","text":"function dash . setTimeout ( fn , delayInSeconds ) -- string Like delay , this calls fn after delayInSeconds time has passed, with the added benefit of being cancelable. Parameters fn - string delayInSeconds - string Returns string - an instance which :clear() can be called on to prevent fn from firing.","title":"setTimeout"},{"location":"api/Functions/#throttle","text":"function dash . throttle ( fn , cooldownInSeconds ) -- string Creates a throttle function that drops any repeat calls within a cooldown period and instead returns the result of the last call. Parameters fn - string cooldownInSeconds - string Returns string Usage A nice visualisation of debounce vs. throttle , the illustrated point being throttle will call fn every period during a spurt of events.","title":"throttle"},{"location":"api/Functions/#throws","text":"function dash . throws ( errorMessage ) -- string Returns a function that when called, throws the original message. Parameters errorMessage - string Returns string Examples findPlayer ( builderman ): andThen ( dash . throws ( DaveNotFound )) --! DaveNotFound (soon after) Usage Useful for when you want a callback to discard the arguments passed in and instead use static ones.","title":"throws"},{"location":"api/Functions/#unary","text":"function dash . unary ( fn ) -- string Returns a function that wraps the input fn but only passes the first argument to it. Parameters fn - string Returns string","title":"unary"},{"location":"api/Strings/","text":"Strings Useful functions to manipulate strings, based on similar implementations in other standard libraries. Functions Chainable camelCase function dash . camelCase ( str ) -- string Convert str to camel-case. Parameters str - string Returns string Examples dash . camelCase ( Pepperoni Pizza ) -- pepperoniPizza dash . camelCase ( --pepperoni-pizza-- ) -- pepperoniPizza dash . camelCase ( __PEPPERONI_PIZZA ) -- pepperoniPizza Chainable capitalize function dash . capitalize ( str ) -- string Capitalize the first letter of str . Parameters str - string Returns string Examples dash . capitalize ( hello mould ) -- Hello mould charToHex function dash . charToHex ( char , format , useBytes ) -- string Converts char into a hex representation Parameters char - string format - string - (optional) a string passed to dash.format which formats the hex value of each of the character's code points. useBytes - string - (default = false) whether to use the character's bytes, rather than UTF-8 code points. Returns string Examples dash . charToHex ( ) -- 3C dash . charToHex ( , #{}; ) -- #3C; dash . charToHex ( \ud83d\ude0f ) -- 1F60F dash . charToHex ( \ud83d\ude0f , 0x{} ) -- 0x1F60F dash . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , #x{}; ) -- #x1F937; #x1F3FC; #x200D; #x2640; #xFE0F; dash . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , %{} , true ) -- %F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F debug function dash . debug ( subject , ) -- string This function first calls dash.format on the arguments provided and then outputs the response to the debug target, set using dash.setDebug . By default, this function does nothing, allowing developers to leave the calls in the source code if that is beneficial. Parameters subject - string - the format match string undefined - string Returns string Usage A common pattern would be to dash.setDebug() to alias to print during local development, and call e.g. dash.setDebug(dash.bind(HttpService.PostAsync, \"https://example.com/log\")) on a production build to allow remote debugging. Chainable decodeHtml function dash . decodeHtml ( str ) -- string The inverse of dash.encodeHtml . Converts any HTML entities in str to their corresponding characters. Parameters str - string Returns string Examples dash . decodeHtml ( lt;b gt; #34;Smashed quot; lt;/b gt; apos;Avocado #39; #x1F60F; ) -- [[ b Smashed /b Avocado \ud83d\ude0f]] Chainable decodeUrl function dash . decodeUrl ( str ) -- string The inverse of dash.encodeUrl . Parameters str - string Returns string Examples dash . decodeUrl ( https://Egg+Fried%20Rice!? ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURI in JavaScript. Chainable decodeUrlComponent function dash . decodeUrlComponent ( str ) -- string The inverse of dash.encodeUrlComponent . Parameters str - string Returns string Throws MalformedInput if str contains characters encoded incorrectly. Examples dash . decodeUrlComponent ( https%3A%2F%2FEgg%2BFried%20Rice!%3F ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURIComponent in JavaScript. Chainable encodeHtml function dash . encodeHtml ( str ) -- string Converts the characters \"' in str to their corresponding HTML entities. Parameters str - string Returns string Examples dash . encodeHtml ( [[Pease Bacon Fish Chips ]] ) -- Peas lt; Bacon gt; quot;Fish quot; amp; apos;Chips apos; encodeQueryString function dash . encodeQueryString ( query ) -- string Takes a query dictionary of key-value pairs and builds a query string that can be concatenated to the end of a url. Parameters query - string Returns string Examples dash . encodeQueryString ({ time = 11 , biscuits = hob nobs , chocolatey = true })) -- ?biscuits=hob+nobs time=11 chocolatey=true Usage A query string which contains duplicate keys with different values is technically valid, but this function doesn't provide a way to produce them. Chainable encodeUrl function dash . encodeUrl ( str ) -- string Encodes str for use as a URL, for example as an entire URL. Parameters str - string Returns string Examples dash . encodeUrl ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https://example.com/Egg+Fried%20Rice!?%F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F Usage This method is designed to act like encodeURI in JavaScript. Chainable encodeUrlComponent function dash . encodeUrlComponent ( str ) -- string Encodes str for use in a URL, for example as a query parameter of a URL. Parameters str - string Returns string Examples dash . encodeUrlComponent ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https%3A%2F%2Fexample.com%2FEgg%2BFried%20Rice!%3F%F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F Usage This method is designed to act like encodeURIComponent in JavaScript. This is very similar to HttpService.EncodeUrl , but is included for parity and conforms closer to the standard (e.g. EncodeUrl unnecessarily encodes ! ). Chainable endsWith function dash . endsWith ( str , suffix ) -- string Checks if str ends with the string suffix . Parameters str - string suffix - string Returns string Examples dash . endsWith ( Fun Roblox Games , Games ) -- true dash . endsWith ( Bad Roblox Memes , Games ) -- false format function dash . format ( format , ) -- string Returns the format string with placeholders {...} substituted with readable representations of the subsequent arguments. This function is a simpler more powerful version of string.format , inspired by format! in Rust. {} formats and prints the next argument using :format() if available, or a suitable default representation depending on its type. {2} formats and prints the 2nd argument. {#2} prints the length of the 2nd argument. Display parameters can be combined after a : in the curly braces. Any format parameters used in string.format can be used here, along with these extras: {:?} formats any value using dash.serializeDeep . {:#?} formats any value using dash.pretty . {:b} formats a number in its binary representation. Parameters format - string undefined - string Returns string Examples local props = { teeth , claws , whiskers , tail } dash . format ( {:?} is in {:#?} , whiskers , props ) - whiskers is in { teeth , claws , whiskers , tail } dash . format ( {} in binary is {1:b} , 125 ) - 125 in binary is 110100 dash . format ( The time is {:02}:{:02} , 2 , 4 ) - The time is 02:04 dash . format ( The color blue is #{:06X} , 255 ) - The color blue is #0000FF Usage Escape { with {{ and } similarly with }} . See https://developer.roblox.com/articles/Format-String for complete list of formating options and further use cases. See dash.serializeDeep dash.pretty formatValue function dash . formatValue ( value , displayString ) -- string Format a specific value using the specified displayString . Parameters value - string displayString - string Returns string hexToChar function dash . hexToChar ( hex ) -- string Generates a character from its hex representation. Parameters hex - string Returns string Throws MalformedInput if char is not a valid encoding. Examples dash . hexToChar ( 1F60F ) -- \ud83d\ude0f dash . hexToChar ( %1F60F ) -- \ud83d\ude0f dash . hexToChar ( #1F60F ) -- \ud83d\ude0f dash . hexToChar ( 0x1F60F ) -- \ud83d\ude0f Chainable kebabCase function dash . kebabCase ( str ) -- string Convert str to kebab-case, making all letters lowercase. Parameters str - string Returns string Examples dash . kebabCase ( strongStilton ) -- strong-stilton dash . kebabCase ( Strong Stilton ) -- strong-stilton dash . kebabCase ( __STRONG_STILTON__ ) -- strong-stilton Usage Chain with :upper() if you need an upper kebab-case string. Chainable leftPad function dash . leftPad ( str , length , prefix ) -- string Makes a string of length from str by repeating characters from prefix at the start of the string. Parameters str - string length - string prefix - string - (default = \" \" ) Returns string Examples dash . leftPad ( toast , 6 ) -- toast dash . leftPad ( 2 , 2 , 0 ) -- 02 dash . leftPad ( toast , 10 , :) ) -- :):):toast pretty function dash . pretty ( value , serializeOptions ) -- string Returns a human-readable string for the given value . If multiline is true , the string will be formatted across multiple lines if a descendant element gets longer than 80 characters. Parameters value - string serializeOptions - string Returns string Usage This format may be improved in the future, so use dash.serializeDeep if need a format which won't change. See dash.serializeDeep Chainable rightPad function dash . rightPad ( str , length , suffix ) -- string Makes a string of length from str by repeating characters from suffix at the end of the string. Parameters str - string length - string suffix - string - (default = \" \" ) Returns string Examples dash . rightPad ( toast , 6 ) -- toast dash . rightPad ( 2 , 2 , ! ) -- 2! dash . rightPad ( toast , 10 , :) ) -- toast:):): setDebug function dash . setDebug ( fn ) -- string Hooks up any debug methods to invoke fn . By default, dash.debug does nothing. Parameters fn - string - (default = print ) Returns string Usage Calling dash.setDebug() will simply print all calls to dash.debug with formatted arguments. Chainable snakeCase function dash . snakeCase ( str ) -- string Convert str to snake-case, making all letters uppercase. Parameters str - string Returns string Examples dash . snakeCase ( sweetChickenCurry ) -- SWEET_CHICKEN_CURRY dash . snakeCase ( Sweet Chicken Curry ) -- SWEET_CHICKEN__CURRY dash . snakeCase ( --sweet-chicken--curry-- ) -- SWEET_CHICKEN__CURRY Usage Chain with :lower() if you need a lower snake-case string. Chainable splitOn function dash . splitOn ( str , pattern ) -- string Splits str into parts based on a pattern delimiter and returns a table of the parts, followed by a table of the matched delimiters. Parameters str - string pattern - string Returns string Examples dash . splitOn ( rice ) -- { r , i , c , e }, { , , , } dash . splitOn ( one.two::flour , [.:] ) -- { one , two , , flour }, { . , : , : } Usage This method is useful only when you need a pattern as a delimiter. Use the Roblox native string.split if you are splitting on a simple string. Chainable startsWith function dash . startsWith ( str , prefix ) -- string Checks if str starts with the string start . Parameters str - string prefix - string Returns string Examples dash . startsWith ( Fun Roblox Games , Fun ) -- true dash . startsWith ( Chess , Fun ) -- false Chainable titleCase function dash . titleCase ( str ) -- string Convert str to title-case, where the first letter of each word is capitalized. Parameters str - string Returns string Examples dash . titleCase ( jello world ) -- Jello World dash . titleCase ( yellow-jello with_sprinkles ) -- Yellow-jello With_sprinkles dash . titleCase ( yellow jello s don\u2019t mellow ) -- Yellow Jello s Dont\u2019t Mellow Usage Dashes, underscores and apostraphes don't break words. Chainable trim function dash . trim ( str ) -- string Removes any spaces from the start and end of str . Parameters str - string Returns string Examples dash . trim ( roast veg ) -- roast veg","title":"Strings"},{"location":"api/Strings/#strings","text":"Useful functions to manipulate strings, based on similar implementations in other standard libraries.","title":"Strings"},{"location":"api/Strings/#functions","text":"Chainable","title":"Functions"},{"location":"api/Strings/#camelcase","text":"function dash . camelCase ( str ) -- string Convert str to camel-case. Parameters str - string Returns string Examples dash . camelCase ( Pepperoni Pizza ) -- pepperoniPizza dash . camelCase ( --pepperoni-pizza-- ) -- pepperoniPizza dash . camelCase ( __PEPPERONI_PIZZA ) -- pepperoniPizza Chainable","title":"camelCase"},{"location":"api/Strings/#capitalize","text":"function dash . capitalize ( str ) -- string Capitalize the first letter of str . Parameters str - string Returns string Examples dash . capitalize ( hello mould ) -- Hello mould","title":"capitalize"},{"location":"api/Strings/#chartohex","text":"function dash . charToHex ( char , format , useBytes ) -- string Converts char into a hex representation Parameters char - string format - string - (optional) a string passed to dash.format which formats the hex value of each of the character's code points. useBytes - string - (default = false) whether to use the character's bytes, rather than UTF-8 code points. Returns string Examples dash . charToHex ( ) -- 3C dash . charToHex ( , #{}; ) -- #3C; dash . charToHex ( \ud83d\ude0f ) -- 1F60F dash . charToHex ( \ud83d\ude0f , 0x{} ) -- 0x1F60F dash . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , #x{}; ) -- #x1F937; #x1F3FC; #x200D; #x2640; #xFE0F; dash . charToHex ( \ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f , %{} , true ) -- %F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F","title":"charToHex"},{"location":"api/Strings/#debug","text":"function dash . debug ( subject , ) -- string This function first calls dash.format on the arguments provided and then outputs the response to the debug target, set using dash.setDebug . By default, this function does nothing, allowing developers to leave the calls in the source code if that is beneficial. Parameters subject - string - the format match string undefined - string Returns string Usage A common pattern would be to dash.setDebug() to alias to print during local development, and call e.g. dash.setDebug(dash.bind(HttpService.PostAsync, \"https://example.com/log\")) on a production build to allow remote debugging. Chainable","title":"debug"},{"location":"api/Strings/#decodehtml","text":"function dash . decodeHtml ( str ) -- string The inverse of dash.encodeHtml . Converts any HTML entities in str to their corresponding characters. Parameters str - string Returns string Examples dash . decodeHtml ( lt;b gt; #34;Smashed quot; lt;/b gt; apos;Avocado #39; #x1F60F; ) -- [[ b Smashed /b Avocado \ud83d\ude0f]] Chainable","title":"decodeHtml"},{"location":"api/Strings/#decodeurl","text":"function dash . decodeUrl ( str ) -- string The inverse of dash.encodeUrl . Parameters str - string Returns string Examples dash . decodeUrl ( https://Egg+Fried%20Rice!? ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURI in JavaScript. Chainable","title":"decodeUrl"},{"location":"api/Strings/#decodeurlcomponent","text":"function dash . decodeUrlComponent ( str ) -- string The inverse of dash.encodeUrlComponent . Parameters str - string Returns string Throws MalformedInput if str contains characters encoded incorrectly. Examples dash . decodeUrlComponent ( https%3A%2F%2FEgg%2BFried%20Rice!%3F ) -- https://Egg+Fried Rice!? Usage This method is designed to act like decodeURIComponent in JavaScript. Chainable","title":"decodeUrlComponent"},{"location":"api/Strings/#encodehtml","text":"function dash . encodeHtml ( str ) -- string Converts the characters \"' in str to their corresponding HTML entities. Parameters str - string Returns string Examples dash . encodeHtml ( [[Pease Bacon Fish Chips ]] ) -- Peas lt; Bacon gt; quot;Fish quot; amp; apos;Chips apos;","title":"encodeHtml"},{"location":"api/Strings/#encodequerystring","text":"function dash . encodeQueryString ( query ) -- string Takes a query dictionary of key-value pairs and builds a query string that can be concatenated to the end of a url. Parameters query - string Returns string Examples dash . encodeQueryString ({ time = 11 , biscuits = hob nobs , chocolatey = true })) -- ?biscuits=hob+nobs time=11 chocolatey=true Usage A query string which contains duplicate keys with different values is technically valid, but this function doesn't provide a way to produce them. Chainable","title":"encodeQueryString"},{"location":"api/Strings/#encodeurl","text":"function dash . encodeUrl ( str ) -- string Encodes str for use as a URL, for example as an entire URL. Parameters str - string Returns string Examples dash . encodeUrl ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https://example.com/Egg+Fried%20Rice!?%F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F Usage This method is designed to act like encodeURI in JavaScript. Chainable","title":"encodeUrl"},{"location":"api/Strings/#encodeurlcomponent","text":"function dash . encodeUrlComponent ( str ) -- string Encodes str for use in a URL, for example as a query parameter of a URL. Parameters str - string Returns string Examples dash . encodeUrlComponent ( https://example.com/Egg+Fried Rice!?\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f ) -- https%3A%2F%2Fexample.com%2FEgg%2BFried%20Rice!%3F%F0%9F%A4%B7%F0%9F%8F%BC%E2%80%8D%E2%99%80%EF%B8%8F Usage This method is designed to act like encodeURIComponent in JavaScript. This is very similar to HttpService.EncodeUrl , but is included for parity and conforms closer to the standard (e.g. EncodeUrl unnecessarily encodes ! ). Chainable","title":"encodeUrlComponent"},{"location":"api/Strings/#endswith","text":"function dash . endsWith ( str , suffix ) -- string Checks if str ends with the string suffix . Parameters str - string suffix - string Returns string Examples dash . endsWith ( Fun Roblox Games , Games ) -- true dash . endsWith ( Bad Roblox Memes , Games ) -- false","title":"endsWith"},{"location":"api/Strings/#format","text":"function dash . format ( format , ) -- string Returns the format string with placeholders {...} substituted with readable representations of the subsequent arguments. This function is a simpler more powerful version of string.format , inspired by format! in Rust. {} formats and prints the next argument using :format() if available, or a suitable default representation depending on its type. {2} formats and prints the 2nd argument. {#2} prints the length of the 2nd argument. Display parameters can be combined after a : in the curly braces. Any format parameters used in string.format can be used here, along with these extras: {:?} formats any value using dash.serializeDeep . {:#?} formats any value using dash.pretty . {:b} formats a number in its binary representation. Parameters format - string undefined - string Returns string Examples local props = { teeth , claws , whiskers , tail } dash . format ( {:?} is in {:#?} , whiskers , props ) - whiskers is in { teeth , claws , whiskers , tail } dash . format ( {} in binary is {1:b} , 125 ) - 125 in binary is 110100 dash . format ( The time is {:02}:{:02} , 2 , 4 ) - The time is 02:04 dash . format ( The color blue is #{:06X} , 255 ) - The color blue is #0000FF Usage Escape { with {{ and } similarly with }} . See https://developer.roblox.com/articles/Format-String for complete list of formating options and further use cases. See dash.serializeDeep dash.pretty","title":"format"},{"location":"api/Strings/#formatvalue","text":"function dash . formatValue ( value , displayString ) -- string Format a specific value using the specified displayString . Parameters value - string displayString - string Returns string","title":"formatValue"},{"location":"api/Strings/#hextochar","text":"function dash . hexToChar ( hex ) -- string Generates a character from its hex representation. Parameters hex - string Returns string Throws MalformedInput if char is not a valid encoding. Examples dash . hexToChar ( 1F60F ) -- \ud83d\ude0f dash . hexToChar ( %1F60F ) -- \ud83d\ude0f dash . hexToChar ( #1F60F ) -- \ud83d\ude0f dash . hexToChar ( 0x1F60F ) -- \ud83d\ude0f Chainable","title":"hexToChar"},{"location":"api/Strings/#kebabcase","text":"function dash . kebabCase ( str ) -- string Convert str to kebab-case, making all letters lowercase. Parameters str - string Returns string Examples dash . kebabCase ( strongStilton ) -- strong-stilton dash . kebabCase ( Strong Stilton ) -- strong-stilton dash . kebabCase ( __STRONG_STILTON__ ) -- strong-stilton Usage Chain with :upper() if you need an upper kebab-case string. Chainable","title":"kebabCase"},{"location":"api/Strings/#leftpad","text":"function dash . leftPad ( str , length , prefix ) -- string Makes a string of length from str by repeating characters from prefix at the start of the string. Parameters str - string length - string prefix - string - (default = \" \" ) Returns string Examples dash . leftPad ( toast , 6 ) -- toast dash . leftPad ( 2 , 2 , 0 ) -- 02 dash . leftPad ( toast , 10 , :) ) -- :):):toast","title":"leftPad"},{"location":"api/Strings/#pretty","text":"function dash . pretty ( value , serializeOptions ) -- string Returns a human-readable string for the given value . If multiline is true , the string will be formatted across multiple lines if a descendant element gets longer than 80 characters. Parameters value - string serializeOptions - string Returns string Usage This format may be improved in the future, so use dash.serializeDeep if need a format which won't change. See dash.serializeDeep Chainable","title":"pretty"},{"location":"api/Strings/#rightpad","text":"function dash . rightPad ( str , length , suffix ) -- string Makes a string of length from str by repeating characters from suffix at the end of the string. Parameters str - string length - string suffix - string - (default = \" \" ) Returns string Examples dash . rightPad ( toast , 6 ) -- toast dash . rightPad ( 2 , 2 , ! ) -- 2! dash . rightPad ( toast , 10 , :) ) -- toast:):):","title":"rightPad"},{"location":"api/Strings/#setdebug","text":"function dash . setDebug ( fn ) -- string Hooks up any debug methods to invoke fn . By default, dash.debug does nothing. Parameters fn - string - (default = print ) Returns string Usage Calling dash.setDebug() will simply print all calls to dash.debug with formatted arguments. Chainable","title":"setDebug"},{"location":"api/Strings/#snakecase","text":"function dash . snakeCase ( str ) -- string Convert str to snake-case, making all letters uppercase. Parameters str - string Returns string Examples dash . snakeCase ( sweetChickenCurry ) -- SWEET_CHICKEN_CURRY dash . snakeCase ( Sweet Chicken Curry ) -- SWEET_CHICKEN__CURRY dash . snakeCase ( --sweet-chicken--curry-- ) -- SWEET_CHICKEN__CURRY Usage Chain with :lower() if you need a lower snake-case string. Chainable","title":"snakeCase"},{"location":"api/Strings/#spliton","text":"function dash . splitOn ( str , pattern ) -- string Splits str into parts based on a pattern delimiter and returns a table of the parts, followed by a table of the matched delimiters. Parameters str - string pattern - string Returns string Examples dash . splitOn ( rice ) -- { r , i , c , e }, { , , , } dash . splitOn ( one.two::flour , [.:] ) -- { one , two , , flour }, { . , : , : } Usage This method is useful only when you need a pattern as a delimiter. Use the Roblox native string.split if you are splitting on a simple string. Chainable","title":"splitOn"},{"location":"api/Strings/#startswith","text":"function dash . startsWith ( str , prefix ) -- string Checks if str starts with the string start . Parameters str - string prefix - string Returns string Examples dash . startsWith ( Fun Roblox Games , Fun ) -- true dash . startsWith ( Chess , Fun ) -- false Chainable","title":"startsWith"},{"location":"api/Strings/#titlecase","text":"function dash . titleCase ( str ) -- string Convert str to title-case, where the first letter of each word is capitalized. Parameters str - string Returns string Examples dash . titleCase ( jello world ) -- Jello World dash . titleCase ( yellow-jello with_sprinkles ) -- Yellow-jello With_sprinkles dash . titleCase ( yellow jello s don\u2019t mellow ) -- Yellow Jello s Dont\u2019t Mellow Usage Dashes, underscores and apostraphes don't break words. Chainable","title":"titleCase"},{"location":"api/Strings/#trim","text":"function dash . trim ( str ) -- string Removes any spaces from the start and end of str . Parameters str - string Returns string Examples dash . trim ( roast veg ) -- roast veg","title":"trim"},{"location":"api/Tables/","text":"Tables A collection of functions that operate on Lua tables. These can operate on arrays, dictionaries and any collection types implemented with tables. Functions can also iterate over custom iterator functions. These functions typically act on immutable tables and return new tables in functional style. Note that mutable arguments in Rodash are explicitly typed as such. Functions all function dash . all ( source , handler ) -- string Return true if handler returns true for every element in source it is called with. If no handler is provided, dash.all returns true if every element is non-nil. Parameters source - string handler - string - (default = dash.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local allNamesStartWithB = dash . all ( names , function ( name ) return dash . startsWith ( name , B ) end ) allNamesStartWithB -- false any function dash . any ( source , handler ) -- string Return true if handler returns true for at least one element in source it is called with. If no handler is provided, dash.any returns true if some element is non-nil. Parameters source - string handler - string - (default = dash.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local anyNameStartsWithB = dash . any ( names , function ( name ) return dash . startsWith ( name , B ) end ) anyNameStartsWithB -- true assign function dash . assign ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in later tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = dash . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See dash.defaults dash.merge clone function dash . clone ( source ) -- string Returns a shallow copy of source . Parameters source - string Returns string Examples local Hermione = { name = Hermione Granger , time = 12 } local PastHermione = dash . clone ( Hermione ) PastHermione . time = 9 Hermione . time -- 12 See dash.cloneDeep - if you also want to clone descendants of the table, though this can be costly. dash.map - if you want to return different values for each key. dash.Cloneable - use this to derive a default :clone() method for class instances. cloneDeep function dash . cloneDeep ( source ) -- string Recursively clones descendants of source , returning the cloned object. If references to the same table are found, the same clone is used in the result. This means that dash.cloneDeep is cycle-safe. Elements which are not tables are not modified. Parameters source - string Returns string Examples local Harry = { patronus = stag , age = 12 } local Hedwig = { animal = owl , owner = Harry } Harry . pet = Hedwig local clonedHarry = dash . cloneDeep ( Harry ) Harry . age = 13 -- The object clonedHarry is completely independent of any changes to Harry: dash . pretty ( clonedHarry ) -- 1 {age = 12, patronus = stag , pet = {animal = owl , owner = 1}} See dash.clone - if you simply want to perform a shallow clone. compact function dash . compact ( source ) -- string Returns an array of elements from a sparse array source with the returned elements provided in original key-order. Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local inOrderNames = dash . compact ( names ) inOrderNames -- { Frodo , Boromir , Bilbo } deepEqual function dash . deepEqual ( a , b ) -- string Returns true if every element in a recursively matches every element b . For elements which are not tables, they match if they are equal. If they are tables they match if the left is recursively deeply-equal to the right. Parameters a - string b - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } local car2 = { speed = 10 , wheels = 4 , lightsOn = { indicators = false , headlights = false } } dash . deepEqual ( car , {}) -- false dash . deepEqual ( car , car ) -- true dash . deepEqual ( car , dash . clone ( car )) -- true dash . deepEqual ( car , dash . cloneDeep ( car )) -- true dash . deepEqual ( car , car2 ) -- false See dash.isSubset dash.shallowEqual defaultSerializer function dash . defaultSerializer ( input ) -- string A function which provides a simple, shallow string representation of a value. Parameters input - string Returns string defaults function dash . defaults ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in earlier tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = dash . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } Bilbo = { team = yellow } } ]] See dash.assign dash.merge entries function dash . entries ( source ) -- string Returns an array of all the entries of elements in source . Each entry is a tuple (key, value) . Parameters source - string Returns string Examples dash . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {{ Frodo , 1}, { Boromir , 2}, { Bilbo , 3}} (in some order) filter function dash . filter ( source , handler ) -- string Returns an array of any values in source that the handler function returned true for, in order of iteration. Parameters source - string handler - string Returns string Examples local myTools = game . Players . LocalPlayer . Backpack : GetChildren () local mySpoons = dash . filter ( myTools , function ( tool ) return dash . endsWith ( tool . Name , Spoon ) end ) mySpoons -- {SilverSpoon, TableSpoon} See dash.map if you would like to remove elements but preserve table keys find function dash . find ( source , handler ) -- string Picks a value from the table that handler returns true for. As tables do not have ordered keys, do not rely on returning any particular value. Parameters source - string handler - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local nameWithB = dash . find ( names , function ( name ) return dash . startsWith ( name , B ) end ) nameWithB -- Bilbo , 8 (or Boromir , 3) -- Or use a chain: local nameWithF = dash . find ( names , dash . fn : startsWith ( name , B )) nameWithF -- Frodo , 1 -- Or find the key of a specific value: local _ , key = dash . find ( names , dash . fn : matches ( Bilbo )) key -- 8 Usage If you need to find the first value of an array that matches, use dash.first . See dash.first flatMap function dash . flatMap ( source , handler ) -- string Like dash.mapValues but handler must return an array. These elements are then insterted into the the resulting array returned. You can return an empty array {} from handler to avoid inserting anything for a particular element. Parameters source - string handler - string Returns string Examples local tools = dash . flatMap ( game . Players : GetChildren (), function ( player ) return player . Backpack : GetChildren () end ) tools -- {Spoon, Ring, Sting, Book} Chainable get function dash . get ( source , ) -- string Get a child or descendant of a table, returning nil if any errors are generated. Parameters source - string undefined - string Returns string Examples local upperTorso = dash . get ( game . Players , LocalPlayer , Character , UpperTorso ) upperTorso -- Part (if player s character and its UpperTorso are defined) -- You can also bind a lookup to get later on: local getUpperTorso = dash . bindTail ( dash . get , Character , UpperTorso ) getUpperTorso ( players . LocalPlayer ) -- Part groupBy function dash . groupBy ( source , handler ) -- string Like dash.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = dash . mapKeys ( playerSet , function ( name ) return dash . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true} includes function dash . includes ( source , item ) -- string Returns true if item exists as a value in the source table. Parameters source - string item - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } dash . includes ( names , Boromir ) -- true dash . includes ( names , 1 ) -- false invert function dash . invert ( source ) -- string Returns a table with elements from source with their keys and values flipped. Parameters source - string Returns string Examples local teams = { red = Frodo , blue = Bilbo , yellow = Boromir } local players = dash . invert ( teams ) players -- {Frodo = red , Bilbo = blue , Boromir = yellow } isArray function dash . isArray ( source ) -- string Returns true is source is made up only of natural keys 1..n . Parameters source - string Returns string Examples dash . isArray ({ 1 , 2 , 3 }) -- true dash . isArray ({ a = 1 , b = 2 , c = 3 }) -- false -- Treating sparse arrays as natural arrays will only complicate things: dash . isArray ({ 1 , 2 , nil , nil , 3 }) -- false dash . isArray ( dash . compact ({ 1 , 2 , nil , nil , 3 })) -- true isEmpty function dash . isEmpty ( source ) -- string Returns true if source has no keys. Parameters source - string Returns string Examples dash . isEmpty ({}) -- true dash . isEmpty ({ false }) -- false dash . isEmpty ({ a = 1 }) -- false isSubset function dash . isSubset ( a , b ) -- string Returns true if all the values in a match corresponding values in b recursively. For elements which are not tables, they match if they are equal. If they are tables they match if the right is a subset of the left. , (T{}, T{}) - bool Parameters a - string b - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } dash . isSubset ( car , {}) -- true dash . isSubset ( car , car ) -- true dash . isSubset ( car , { speed = 10 , lightsOn = { indicators = true }}) -- true dash . isSubset ( car , { speed = 12 }) -- false dash . isSubset ({}, car ) -- false iterator function dash . iterator ( source , asArray ) -- string Determines a suitable iterator to use for source , allowing source to be either a plain table, a table that has a metatable with an iterable key, or a function. By default, the iterator is unordered, but passing asArray as true uses ipairs to iterate through natural keys 1..n in order. Parameters source - string asArray - string Returns string keyBy function dash . keyBy ( source , handler ) -- string Like dash.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = dash . keyBy ( playerSet , function ( name ) return dash . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true} keys function dash . keys ( source ) -- string Returns an array of all the keys of the elements in source . Parameters source - string Returns string Examples dash . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- { Frodo , Boromir , Bilbo } (in some order) len function dash . len ( source ) -- string Returns the number of elements in source . Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } dash . len ( names ) -- 3 map function dash . map ( source , handler ) -- string Return new table from source with each value at the same key, but replaced by the return from the handler function called for each value and key in the table. Parameters source - string handler - string Returns string Examples -- Use map to get the same property of each value: local playerNames = dash . map ( game . Players : GetChildren (), function ( player ) return player . Name end ) playerNames -- { Frodo Baggins , Bilbo Baggins , Boromir } -- Use map to remove elements while preserving keys: local ingredients = { veg = carrot , sauce = tomato , herb = basil } local carrotsAndHerbs = dash . map ( ingredients , function ( value , key ) if value == carrot or key == herb then return value end end ) carrotsAndHerbs -- {veg = carrot , herb = basil } -- Use map with multiple values of a table at once: local numbers = { 1 , 1 , 2 , 3 , 5 } local nextNumbers = dash . map ( numbers , function ( value , key ) return value + ( numbers [ key - 1 ] or 0 ) end ) nextNumbers -- {1, 2, 3, 5, 8} See filter if you want to mapValues function dash . mapValues ( source , handler ) -- string Like dash.map , but returns an array of the transformed values in the order that they are iterated over, dropping the original keys. Parameters source - string handler - string Returns string Examples local ingredients = { veg = carrot , sauce = tomato , herb = basil } local list = dash . mapValues ( function ( value ) return dash . format ( {} x2 , value ) end ) list -- { carrot x2 , tomato x2 , basil x2 } (in some order) merge function dash . merge ( target , ) -- string Mutates target by iterating recursively through elements of the subsequent arguments in order and inserting or replacing the values in target with each element preserving keys. If any values are both tables, these are merged recursively using dash.merge . Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local mergedInfo = dash . merge ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See dash.assign dash.defaults occurences function dash . occurences ( source ) -- string Return a set of the tables that appear as descendants of source , mapped to the number of times each table has been found with a unique parent. Repeat occurences are not traversed, so the function is cycle-safe. If any tables in the result have a count of two or more, they may form cycles in the source ., (T - Iterable ) Parameters source - string Returns string Examples local plate = { veg = potato , pie = { stilton , beef }} dash . occurences ( plate ) -- { [{ veg = potato , pie = { stilton , beef }}] = 1 [{ stilton , beef }] = 1 } local kyle = { name = Kyle } kyle . child = kyle dash . occurences ( kyle ) -- { [{ name = Kyle , child = kyle }] = 2 } one function dash . one ( source ) -- string Returns an element from source , if it has one. Parameters source - string Returns string Examples dash . one ({}) -- nil dash . one ({ a = 1 , b = 2 , c = 3 }) -- b, 2 (or any another element) privatize function dash . privatize ( source ) -- string Returns a copy of source , ensuring each key starts with an underscore _ . Keys which are already prefixed with an underscore are left unchanged., (T{} - T{}) Parameters source - string Returns string Examples local privates = dash . privatize ({ [ 1 ] = 1 , public = 2 , _private = 3 }) privates -- {_1 = 1, _public = 2, _private = 3} serialize function dash . serialize ( source , options ) -- string Returns a string representation of source including all elements with sorted keys. dash.serialize preserves the properties of being unique, stable and cycle-safe if the serializer functions provided also obey these properties. Parameters source - string options - string Returns string Examples dash . serialize ({ 1 , 2 , 3 }) -- {1,2,3} dash . serialize ({ a = 1 , b = true , [ 3 ] = hello }) -- { a :1, b :true,3: hello } dash . serialize ({ a = function () end , b = { a = table }) -- { a : function: 0x... , b = table: 0x... } Usage Use dash.serialize when you need a representation of a table which doesn't need to be human-readable, or you need to customize the way serialization works. dash.pretty is more appropriate when you need a human-readable string. See dash.serializeDeep dash.defaultSerializer dash.pretty serializeDeep function dash . serializeDeep ( source , options ) -- string Like dash.serialize , but if a child element is a table it is serialized recursively. Returns a string representation of source including all elements with sorted keys. This function preserves uniqueness, stability and cycle-safety. Parameters source - string options - string Returns string Examples dash . serializeDeep ({ a = { b = table }) -- { a :{ b : table }} local kyle = { name = Kyle } kyle . child = kyle dash . serializeDeep ( kyle ) -- 0 { child : 0 , name : Kyle } See dash.serialize dash.defaultSerializer Chainable set function dash . set ( source , path , value ) -- string Set a child or descendant of a table. Returns true if the operation completed without error. If any values along the path are not tables, dash.set will do nothing and return false . Parameters source - string path - string value - string Returns string Examples dash . set ( game . Players , { LocalPlayer , Character , UpperTorso , Color }, Color3 . new ( 255 , 255 , 255 )) -- true (if the set worked) shallowEqual function dash . shallowEqual ( left , right ) -- string Returns true if left and right are equal, or if they are tables and the elements in one are present and have equal values to those in the other. Parameters left - string right - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } dash . shallowEqual ( car , {}) -- false dash . shallowEqual ( car , car ) -- true dash . shallowEqual ( car , dash . clone ( car )) -- true dash . shallowEqual ( car , dash . cloneDeep ( car )) -- false Based on https : // developmentarc . gitbooks . io / react - indepth / content / life_cycle / update / using_should_component_update . html See dash.deepEqual unique function dash . unique ( source ) -- string Returns an array of the values in source , without any repetitions. Values are considered equal if the have the same key representation. Parameters source - string Returns string Examples local list = { 1 , 2 , 2 , 3 , 5 , 1 } dash . unique ( list ) -- {1, 2, 3, 5} (or another order) values function dash . values ( source ) -- string Returns an array of all the values of the elements in source . Parameters source - string Returns string Examples dash . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {1, 2, 3} (in some order) without function dash . without ( source , value ) -- string Returns an array of elements in source with any elements of value removed. Parameters source - string value - string Returns string Examples local points = { 0 , 10 , 3 , 0 , 5 } local nonZero = dash . without ( points , 0 ) nonZero -- {10, 3, 5} local ingredients = { veg = carrot , sauce = tomato , herb = basil } local withoutCarrots = dash . without ( ingredients , carrot ) withoutCarrots -- { tomato , basil } (in some order)","title":"Tables"},{"location":"api/Tables/#tables","text":"A collection of functions that operate on Lua tables. These can operate on arrays, dictionaries and any collection types implemented with tables. Functions can also iterate over custom iterator functions. These functions typically act on immutable tables and return new tables in functional style. Note that mutable arguments in Rodash are explicitly typed as such.","title":"Tables"},{"location":"api/Tables/#functions","text":"","title":"Functions"},{"location":"api/Tables/#all","text":"function dash . all ( source , handler ) -- string Return true if handler returns true for every element in source it is called with. If no handler is provided, dash.all returns true if every element is non-nil. Parameters source - string handler - string - (default = dash.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local allNamesStartWithB = dash . all ( names , function ( name ) return dash . startsWith ( name , B ) end ) allNamesStartWithB -- false","title":"all"},{"location":"api/Tables/#any","text":"function dash . any ( source , handler ) -- string Return true if handler returns true for at least one element in source it is called with. If no handler is provided, dash.any returns true if some element is non-nil. Parameters source - string handler - string - (default = dash.id ) Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local anyNameStartsWithB = dash . any ( names , function ( name ) return dash . startsWith ( name , B ) end ) anyNameStartsWithB -- true","title":"any"},{"location":"api/Tables/#assign","text":"function dash . assign ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in later tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = dash . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See dash.defaults dash.merge","title":"assign"},{"location":"api/Tables/#clone","text":"function dash . clone ( source ) -- string Returns a shallow copy of source . Parameters source - string Returns string Examples local Hermione = { name = Hermione Granger , time = 12 } local PastHermione = dash . clone ( Hermione ) PastHermione . time = 9 Hermione . time -- 12 See dash.cloneDeep - if you also want to clone descendants of the table, though this can be costly. dash.map - if you want to return different values for each key. dash.Cloneable - use this to derive a default :clone() method for class instances.","title":"clone"},{"location":"api/Tables/#clonedeep","text":"function dash . cloneDeep ( source ) -- string Recursively clones descendants of source , returning the cloned object. If references to the same table are found, the same clone is used in the result. This means that dash.cloneDeep is cycle-safe. Elements which are not tables are not modified. Parameters source - string Returns string Examples local Harry = { patronus = stag , age = 12 } local Hedwig = { animal = owl , owner = Harry } Harry . pet = Hedwig local clonedHarry = dash . cloneDeep ( Harry ) Harry . age = 13 -- The object clonedHarry is completely independent of any changes to Harry: dash . pretty ( clonedHarry ) -- 1 {age = 12, patronus = stag , pet = {animal = owl , owner = 1}} See dash.clone - if you simply want to perform a shallow clone.","title":"cloneDeep"},{"location":"api/Tables/#compact","text":"function dash . compact ( source ) -- string Returns an array of elements from a sparse array source with the returned elements provided in original key-order. Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local inOrderNames = dash . compact ( names ) inOrderNames -- { Frodo , Boromir , Bilbo }","title":"compact"},{"location":"api/Tables/#deepequal","text":"function dash . deepEqual ( a , b ) -- string Returns true if every element in a recursively matches every element b . For elements which are not tables, they match if they are equal. If they are tables they match if the left is recursively deeply-equal to the right. Parameters a - string b - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } local car2 = { speed = 10 , wheels = 4 , lightsOn = { indicators = false , headlights = false } } dash . deepEqual ( car , {}) -- false dash . deepEqual ( car , car ) -- true dash . deepEqual ( car , dash . clone ( car )) -- true dash . deepEqual ( car , dash . cloneDeep ( car )) -- true dash . deepEqual ( car , car2 ) -- false See dash.isSubset dash.shallowEqual","title":"deepEqual"},{"location":"api/Tables/#defaultserializer","text":"function dash . defaultSerializer ( input ) -- string A function which provides a simple, shallow string representation of a value. Parameters input - string Returns string","title":"defaultSerializer"},{"location":"api/Tables/#defaults","text":"function dash . defaults ( target , ) -- string Adds new elements in target from subsequent table arguments in order, with elements in earlier tables replacing earlier ones if their keys match. Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local assignedInfo = dash . assign ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } Bilbo = { team = yellow } } ]] See dash.assign dash.merge","title":"defaults"},{"location":"api/Tables/#entries","text":"function dash . entries ( source ) -- string Returns an array of all the entries of elements in source . Each entry is a tuple (key, value) . Parameters source - string Returns string Examples dash . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {{ Frodo , 1}, { Boromir , 2}, { Bilbo , 3}} (in some order)","title":"entries"},{"location":"api/Tables/#filter","text":"function dash . filter ( source , handler ) -- string Returns an array of any values in source that the handler function returned true for, in order of iteration. Parameters source - string handler - string Returns string Examples local myTools = game . Players . LocalPlayer . Backpack : GetChildren () local mySpoons = dash . filter ( myTools , function ( tool ) return dash . endsWith ( tool . Name , Spoon ) end ) mySpoons -- {SilverSpoon, TableSpoon} See dash.map if you would like to remove elements but preserve table keys","title":"filter"},{"location":"api/Tables/#find","text":"function dash . find ( source , handler ) -- string Picks a value from the table that handler returns true for. As tables do not have ordered keys, do not rely on returning any particular value. Parameters source - string handler - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } local nameWithB = dash . find ( names , function ( name ) return dash . startsWith ( name , B ) end ) nameWithB -- Bilbo , 8 (or Boromir , 3) -- Or use a chain: local nameWithF = dash . find ( names , dash . fn : startsWith ( name , B )) nameWithF -- Frodo , 1 -- Or find the key of a specific value: local _ , key = dash . find ( names , dash . fn : matches ( Bilbo )) key -- 8 Usage If you need to find the first value of an array that matches, use dash.first . See dash.first","title":"find"},{"location":"api/Tables/#flatmap","text":"function dash . flatMap ( source , handler ) -- string Like dash.mapValues but handler must return an array. These elements are then insterted into the the resulting array returned. You can return an empty array {} from handler to avoid inserting anything for a particular element. Parameters source - string handler - string Returns string Examples local tools = dash . flatMap ( game . Players : GetChildren (), function ( player ) return player . Backpack : GetChildren () end ) tools -- {Spoon, Ring, Sting, Book} Chainable","title":"flatMap"},{"location":"api/Tables/#get","text":"function dash . get ( source , ) -- string Get a child or descendant of a table, returning nil if any errors are generated. Parameters source - string undefined - string Returns string Examples local upperTorso = dash . get ( game . Players , LocalPlayer , Character , UpperTorso ) upperTorso -- Part (if player s character and its UpperTorso are defined) -- You can also bind a lookup to get later on: local getUpperTorso = dash . bindTail ( dash . get , Character , UpperTorso ) getUpperTorso ( players . LocalPlayer ) -- Part","title":"get"},{"location":"api/Tables/#groupby","text":"function dash . groupBy ( source , handler ) -- string Like dash.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = dash . mapKeys ( playerSet , function ( name ) return dash . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true}","title":"groupBy"},{"location":"api/Tables/#includes","text":"function dash . includes ( source , item ) -- string Returns true if item exists as a value in the source table. Parameters source - string item - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } dash . includes ( names , Boromir ) -- true dash . includes ( names , 1 ) -- false","title":"includes"},{"location":"api/Tables/#invert","text":"function dash . invert ( source ) -- string Returns a table with elements from source with their keys and values flipped. Parameters source - string Returns string Examples local teams = { red = Frodo , blue = Bilbo , yellow = Boromir } local players = dash . invert ( teams ) players -- {Frodo = red , Bilbo = blue , Boromir = yellow }","title":"invert"},{"location":"api/Tables/#isarray","text":"function dash . isArray ( source ) -- string Returns true is source is made up only of natural keys 1..n . Parameters source - string Returns string Examples dash . isArray ({ 1 , 2 , 3 }) -- true dash . isArray ({ a = 1 , b = 2 , c = 3 }) -- false -- Treating sparse arrays as natural arrays will only complicate things: dash . isArray ({ 1 , 2 , nil , nil , 3 }) -- false dash . isArray ( dash . compact ({ 1 , 2 , nil , nil , 3 })) -- true","title":"isArray"},{"location":"api/Tables/#isempty","text":"function dash . isEmpty ( source ) -- string Returns true if source has no keys. Parameters source - string Returns string Examples dash . isEmpty ({}) -- true dash . isEmpty ({ false }) -- false dash . isEmpty ({ a = 1 }) -- false","title":"isEmpty"},{"location":"api/Tables/#issubset","text":"function dash . isSubset ( a , b ) -- string Returns true if all the values in a match corresponding values in b recursively. For elements which are not tables, they match if they are equal. If they are tables they match if the right is a subset of the left. , (T{}, T{}) - bool Parameters a - string b - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } dash . isSubset ( car , {}) -- true dash . isSubset ( car , car ) -- true dash . isSubset ( car , { speed = 10 , lightsOn = { indicators = true }}) -- true dash . isSubset ( car , { speed = 12 }) -- false dash . isSubset ({}, car ) -- false","title":"isSubset"},{"location":"api/Tables/#iterator","text":"function dash . iterator ( source , asArray ) -- string Determines a suitable iterator to use for source , allowing source to be either a plain table, a table that has a metatable with an iterable key, or a function. By default, the iterator is unordered, but passing asArray as true uses ipairs to iterate through natural keys 1..n in order. Parameters source - string asArray - string Returns string","title":"iterator"},{"location":"api/Tables/#keyby","text":"function dash . keyBy ( source , handler ) -- string Like dash.map , but the return of the handler is used to transform the key of each element, while the value is preserved. If the handler returns nil, the element is dropped from the result. Parameters source - string handler - string Returns string Examples local playerSet = { Frodo = true , Bilbo = true , Boromir = true } local healthSet = dash . keyBy ( playerSet , function ( name ) return dash . get ( game . Players , name , Health ) end ) healthSet -- {100 = true, 50 = true, 0 = true}","title":"keyBy"},{"location":"api/Tables/#keys","text":"function dash . keys ( source ) -- string Returns an array of all the keys of the elements in source . Parameters source - string Returns string Examples dash . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- { Frodo , Boromir , Bilbo } (in some order)","title":"keys"},{"location":"api/Tables/#len","text":"function dash . len ( source ) -- string Returns the number of elements in source . Parameters source - string Returns string Examples local names = { [ 3 ] = Boromir , [ 1 ] = Frodo , [ 8 ] = Bilbo } dash . len ( names ) -- 3","title":"len"},{"location":"api/Tables/#map","text":"function dash . map ( source , handler ) -- string Return new table from source with each value at the same key, but replaced by the return from the handler function called for each value and key in the table. Parameters source - string handler - string Returns string Examples -- Use map to get the same property of each value: local playerNames = dash . map ( game . Players : GetChildren (), function ( player ) return player . Name end ) playerNames -- { Frodo Baggins , Bilbo Baggins , Boromir } -- Use map to remove elements while preserving keys: local ingredients = { veg = carrot , sauce = tomato , herb = basil } local carrotsAndHerbs = dash . map ( ingredients , function ( value , key ) if value == carrot or key == herb then return value end end ) carrotsAndHerbs -- {veg = carrot , herb = basil } -- Use map with multiple values of a table at once: local numbers = { 1 , 1 , 2 , 3 , 5 } local nextNumbers = dash . map ( numbers , function ( value , key ) return value + ( numbers [ key - 1 ] or 0 ) end ) nextNumbers -- {1, 2, 3, 5, 8} See filter if you want to","title":"map"},{"location":"api/Tables/#mapvalues","text":"function dash . mapValues ( source , handler ) -- string Like dash.map , but returns an array of the transformed values in the order that they are iterated over, dropping the original keys. Parameters source - string handler - string Returns string Examples local ingredients = { veg = carrot , sauce = tomato , herb = basil } local list = dash . mapValues ( function ( value ) return dash . format ( {} x2 , value ) end ) list -- { carrot x2 , tomato x2 , basil x2 } (in some order)","title":"mapValues"},{"location":"api/Tables/#merge","text":"function dash . merge ( target , ) -- string Mutates target by iterating recursively through elements of the subsequent arguments in order and inserting or replacing the values in target with each element preserving keys. If any values are both tables, these are merged recursively using dash.merge . Parameters target - string undefined - string Returns string Examples local someInfo = { Frodo = { name = Frodo Baggins , team = blue }, Boromir = { score = 5 } } local someOtherInfo = { Frodo = { team = red , score = 10 }, Bilbo = { team = yellow , }, Boromir = { score = { 1 , 2 , 3 } } } local mergedInfo = dash . merge ( someInfo , someOtherInfo ) --[[ -- { Frodo = { name = Frodo Baggins , team = red , score = 10 }, Bilbo = { team = yellow }, Boromir = { score = {1, 2, 3} } } ]] See dash.assign dash.defaults","title":"merge"},{"location":"api/Tables/#occurences","text":"function dash . occurences ( source ) -- string Return a set of the tables that appear as descendants of source , mapped to the number of times each table has been found with a unique parent. Repeat occurences are not traversed, so the function is cycle-safe. If any tables in the result have a count of two or more, they may form cycles in the source ., (T - Iterable ) Parameters source - string Returns string Examples local plate = { veg = potato , pie = { stilton , beef }} dash . occurences ( plate ) -- { [{ veg = potato , pie = { stilton , beef }}] = 1 [{ stilton , beef }] = 1 } local kyle = { name = Kyle } kyle . child = kyle dash . occurences ( kyle ) -- { [{ name = Kyle , child = kyle }] = 2 }","title":"occurences"},{"location":"api/Tables/#one","text":"function dash . one ( source ) -- string Returns an element from source , if it has one. Parameters source - string Returns string Examples dash . one ({}) -- nil dash . one ({ a = 1 , b = 2 , c = 3 }) -- b, 2 (or any another element)","title":"one"},{"location":"api/Tables/#privatize","text":"function dash . privatize ( source ) -- string Returns a copy of source , ensuring each key starts with an underscore _ . Keys which are already prefixed with an underscore are left unchanged., (T{} - T{}) Parameters source - string Returns string Examples local privates = dash . privatize ({ [ 1 ] = 1 , public = 2 , _private = 3 }) privates -- {_1 = 1, _public = 2, _private = 3}","title":"privatize"},{"location":"api/Tables/#serialize","text":"function dash . serialize ( source , options ) -- string Returns a string representation of source including all elements with sorted keys. dash.serialize preserves the properties of being unique, stable and cycle-safe if the serializer functions provided also obey these properties. Parameters source - string options - string Returns string Examples dash . serialize ({ 1 , 2 , 3 }) -- {1,2,3} dash . serialize ({ a = 1 , b = true , [ 3 ] = hello }) -- { a :1, b :true,3: hello } dash . serialize ({ a = function () end , b = { a = table }) -- { a : function: 0x... , b = table: 0x... } Usage Use dash.serialize when you need a representation of a table which doesn't need to be human-readable, or you need to customize the way serialization works. dash.pretty is more appropriate when you need a human-readable string. See dash.serializeDeep dash.defaultSerializer dash.pretty","title":"serialize"},{"location":"api/Tables/#serializedeep","text":"function dash . serializeDeep ( source , options ) -- string Like dash.serialize , but if a child element is a table it is serialized recursively. Returns a string representation of source including all elements with sorted keys. This function preserves uniqueness, stability and cycle-safety. Parameters source - string options - string Returns string Examples dash . serializeDeep ({ a = { b = table }) -- { a :{ b : table }} local kyle = { name = Kyle } kyle . child = kyle dash . serializeDeep ( kyle ) -- 0 { child : 0 , name : Kyle } See dash.serialize dash.defaultSerializer Chainable","title":"serializeDeep"},{"location":"api/Tables/#set","text":"function dash . set ( source , path , value ) -- string Set a child or descendant of a table. Returns true if the operation completed without error. If any values along the path are not tables, dash.set will do nothing and return false . Parameters source - string path - string value - string Returns string Examples dash . set ( game . Players , { LocalPlayer , Character , UpperTorso , Color }, Color3 . new ( 255 , 255 , 255 )) -- true (if the set worked)","title":"set"},{"location":"api/Tables/#shallowequal","text":"function dash . shallowEqual ( left , right ) -- string Returns true if left and right are equal, or if they are tables and the elements in one are present and have equal values to those in the other. Parameters left - string right - string Returns string Examples local car = { speed = 10 , wheels = 4 , lightsOn = { indicators = true , headlights = false } } dash . shallowEqual ( car , {}) -- false dash . shallowEqual ( car , car ) -- true dash . shallowEqual ( car , dash . clone ( car )) -- true dash . shallowEqual ( car , dash . cloneDeep ( car )) -- false Based on https : // developmentarc . gitbooks . io / react - indepth / content / life_cycle / update / using_should_component_update . html See dash.deepEqual","title":"shallowEqual"},{"location":"api/Tables/#unique","text":"function dash . unique ( source ) -- string Returns an array of the values in source , without any repetitions. Values are considered equal if the have the same key representation. Parameters source - string Returns string Examples local list = { 1 , 2 , 2 , 3 , 5 , 1 } dash . unique ( list ) -- {1, 2, 3, 5} (or another order)","title":"unique"},{"location":"api/Tables/#values","text":"function dash . values ( source ) -- string Returns an array of all the values of the elements in source . Parameters source - string Returns string Examples dash . values ({ Frodo = 1 , Boromir = 2 , Bilbo = 3 }) -- {1, 2, 3} (in some order)","title":"values"},{"location":"api/Tables/#without","text":"function dash . without ( source , value ) -- string Returns an array of elements in source with any elements of value removed. Parameters source - string value - string Returns string Examples local points = { 0 , 10 , 3 , 0 , 5 } local nonZero = dash . without ( points , 0 ) nonZero -- {10, 3, 5} local ingredients = { veg = carrot , sauce = tomato , herb = basil } local withoutCarrots = dash . without ( ingredients , carrot ) withoutCarrots -- { tomato , basil } (in some order)","title":"without"}]}